# Welcome

> Griffe, pronounced "grif" (`/ɡʁif/`), is a french word that means "claw", but also "signature" in a familiar way. "On reconnaît bien là sa griffe."

- **Getting started**

  ______________________________________________________________________

  Learn how to quickly install and use Griffe.

  [Installation](installation/) [Introduction](introduction/)

- **Deep dive**

  ______________________________________________________________________

  Learn everything you can do with Griffe.

  [Guide](guide/users/) [API reference](reference/api/)

## What is Griffe?

Griffe is a Python tool and library that gives you signatures for entire Python programs. It extracts the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.

Griffe can be used as a Python library. For example, the [Python handler](https://mkdocstrings.github.io/python) of [mkdocstrings](https://mkdocstrings.github.io/) uses Griffe to collect API data and render API documentation in HTML. Griffe can also be used on the command-line, to load and serialize your API data to JSON, or find breaking changes in your API since the previous version of your library.

Serializing as JSON

```
$ griffe dump griffe -ssrc -r 2>/dev/null | head -n29
{
  "griffe": {
    "docstring": {
      "endlineno": 161,
      "lineno": 5,
      "value": "Griffe package.\n\nSignatures for entire Python programs.\nExtract the structure, the frame, the skeleton of your project,\nto generate API documentation or find breaking changes in your API.\n\nThe entirety of the public API is exposed here, in the top-level `griffe` module.\n\nAll messages written to standard output or error are logged using the `logging` module.\nOur logger's name is set to `\"griffe\"` and is public (you can rely on it).\nYou can obtain the logger from the standard `logging` module: `logging.getLogger(\"griffe\")`.\nActual logging messages are not part of the public API (they might change without notice).\n\nRaised exceptions throughout the package are part of the public API (you can rely on them).\nTheir actual messages are not part of the public API (they might change without notice).\n\nThe following paragraphs will help you discover the package's content.\n\n## CLI entrypoints\n\nGriffe provides a command-line interface (CLI) to interact with the package. The CLI entrypoints can be called from Python code.\n\n- [`griffe.main`][]: Run the main program.\n- [`griffe.check`][]: Check for API breaking changes in two versions of the same package.\n- [`griffe.dump`][]: Load packages data and dump it as JSON.\n\n## Loaders\n\nTo load API data, Griffe provides several high-level functions.\n\n- [`griffe.load`][]: Load and return a Griffe object.\n- [`griffe.load_git`][]: Load and return a module from a specific Git reference.\n- [`griffe.load_pypi`][]: Load and return a module from a specific package version downloaded using pip.\n\n## Models\n\nThe data loaded by Griffe is represented by several classes.\n\n- [`griffe.Module`][]: The class representing a Python module.\n- [`griffe.Class`][]: The class representing a Python class.\n- [`griffe.Function`][]: The class representing a Python function or method.\n- [`griffe.Attribute`][]: The class representing a Python attribute.\n- [`griffe.Alias`][]: This class represents an alias, or indirection, to an object declared in another module.\n\nAdditional classes are available to represent other concepts.\n\n- [`griffe.Decorator`][]: This class represents a decorator.\n- [`griffe.Parameters`][]: This class is a container for parameters.\n- [`griffe.Parameter`][]: This class represent a function parameter.\n\n## Agents\n\nGriffe is able to analyze code both statically and dynamically, using the following \"agents\".\nHowever most of the time you will only need to use the loaders above.\n\n- [`griffe.visit`][]: Parse and visit a module file.\n- [`griffe.inspect`][]: Inspect a module.\n\n## Serializers\n\nGriffe can serizalize data to dictionary and JSON.\n\n- [`griffe.Object.as_json`][griffe.Object.as_json]\n- [`griffe.Object.from_json`][griffe.Object.from_json]\n- [`griffe.JSONEncoder`][]: JSON encoder for Griffe objects.\n- [`griffe.json_decoder`][]: JSON decoder for Griffe objects.\n\n## API checks\n\nGriffe can compare two versions of the same package to find breaking changes.\n\n- [`griffe.find_breaking_changes`][]: Find breaking changes between two versions of the same API.\n- [`griffe.Breakage`][]: Breakage classes can explain what broke from a version to another.\n\n## Extensions\n\nGriffe supports extensions. You can create your own extension by subclassing the `griffe.Extension` class.\n\n- [`griffe.load_extensions`][]: Load configured extensions.\n- [`griffe.Extension`][]: Base class for Griffe extensions.\n\n## Docstrings\n\nGriffe can parse docstrings into structured data.\n\nMain class:\n\n- [`griffe.Docstring`][]: This class represents docstrings.\n\nDocstring section and element classes all start with `Docstring`.\n\nDocstring parsers:\n\n- [`griffe.parse`][]: Parse the docstring.\n- [`griffe.parse_auto`][]: Parse a docstring by automatically detecting the style it uses.\n- [`griffe.parse_google`][]: Parse a Google-style docstring.\n- [`griffe.parse_numpy`][]: Parse a Numpydoc-style docstring.\n- [`griffe.parse_sphinx`][]: Parse a Sphinx-style docstring.\n\n## Exceptions\n\nGriffe uses several exceptions to signal errors.\n\n- [`griffe.GriffeError`][]: The base exception for all Griffe errors.\n- [`griffe.LoadingError`][]: Exception for loading errors.\n- [`griffe.NameResolutionError`][]: Exception for names that cannot be resolved in a object scope.\n- [`griffe.UnhandledEditableModuleError`][]: Exception for unhandled editables modules, when searching modules.\n- [`griffe.UnimportableModuleError`][]: Exception for modules that cannot be imported.\n- [`griffe.AliasResolutionError`][]: Exception for aliases that cannot be resolved.\n- [`griffe.CyclicAliasError`][]: Exception raised when a cycle is detected in aliases.\n- [`griffe.LastNodeError`][]: Exception raised when trying to access a next or previous node.\n- [`griffe.RootNodeError`][]: Exception raised when trying to use siblings properties on a root node.\n- [`griffe.BuiltinModuleError`][]: Exception raised when trying to access the filepath of a builtin module.\n- [`griffe.ExtensionError`][]: Base class for errors raised by extensions.\n- [`griffe.ExtensionNotLoadedError`][]: Exception raised when an extension could not be loaded.\n- [`griffe.GitError`][]: Exception raised for errors related to Git.\n\n# Expressions\n\nGriffe stores snippets of code (attribute values, decorators, base class, type annotations) as expressions.\nExpressions are basically abstract syntax trees (AST) with a few differences compared to the nodes returned by [`ast`][].\nGriffe provides a few helpers to extract expressions from regular AST nodes.\n\n- [`griffe.get_annotation`][]: Get a type annotation as expression.\n- [`griffe.get_base_class`][]: Get a base class as expression.\n- [`griffe.get_condition`][]: Get a condition as expression.\n- [`griffe.get_expression`][]: Get an expression from an AST node.\n- [`griffe.safe_get_annotation`][]: Get a type annotation as expression, safely (returns `None` on error).\n- [`griffe.safe_get_base_class`][]: Get a base class as expression, safely (returns `None` on error).\n- [`griffe.safe_get_condition`][]: Get a condition as expression, safely (returns `None` on error).\n- [`griffe.safe_get_expression`][]: Get an expression from an AST node, safely (returns `None` on error).\n\nThe base class for expressions.\n\n- [`griffe.Expr`][]\n\nExpression classes all start with `Expr`.\n\n# Loggers\n\nIf you want to log messages from extensions, get a logger with `get_logger`.\nThe `logger` attribute is used by Griffe itself. You can use it to temporarily disable Griffe logging.\n\n- [`griffe.logger`][]: Our global logger, used throughout the library.\n- [`griffe.get_logger`][]: Create and return a new logger instance.\n\n# Helpers\n\nTo test your Griffe extensions, or to load API data from code in memory, Griffe provides the following helpers.\n\n- [`griffe.temporary_pyfile`][]: Create a Python file containing the given code in a temporary directory.\n- [`griffe.temporary_pypackage`][]: Create a package containing the given modules in a temporary directory.\n- [`griffe.temporary_visited_module`][]: Create and visit a temporary module with the given code.\n- [`griffe.temporary_visited_package`][]: Create and visit a temporary package.\n- [`griffe.temporary_inspected_module`][]: Create and inspect a temporary module with the given code.\n- [`griffe.temporary_inspected_package`][]: Create and inspect a temporary package."
    },
    "filepath": "/media/data/dev/insiders/griffe/src/griffe/__init__.py",
    "kind": "module",
    "labels": [],
    "members": {
      "Alias": {
        "endlineno": 350,
        "kind": "alias",
        "lineno": 339,
        "name": "Alias",
        "target_path": "_griffe.models.Alias"
      },
      "AliasResolutionError": {
        "endlineno": 275,
        "kind": "alias",
        "lineno": 261,
        "name": "AliasResolutionError",
        "target_path": "_griffe.exceptions.AliasResolutionError"
      },
      "Attribute": {
        "endlineno": 350,
        "kind": "alias",
        "lineno": 339,

```

Checking for API breaking changes

```
$ griffe check griffe -ssrc -b0.46.0.1.2.0 -a0.45.0.1.2.0 --verbose
src/griffe/mixins.py:303: ObjectAliasMixin.is_exported:
Public object points to a different kind of object:
  Old: function
  New: attribute

src/griffe/mixins.py:353: ObjectAliasMixin.is_public:
Public object points to a different kind of object:
  Old: function
  New: attribute

src/griffe/dataclasses.py:520: Object.has_labels(labels):
Parameter kind was changed:
  Old: positional or keyword
  New: variadic positional

src/griffe/diff.py:571: find_breaking_changes(ignore_private):
Parameter default was changed:
  Old: True
  New: _sentinel

src/griffe/extensions/base.py:463: load_extensions(exts):
Parameter kind was changed:
  Old: positional or keyword
  New: variadic positional

src/griffe/dataclasses.py:1073: Alias.has_labels(labels):
Parameter kind was changed:
  Old: positional or keyword
  New: variadic positional

```

[Playground](playground/) [Join our Gitter channel](https://app.gitter.im/#/room/#mkdocstrings_griffe:gitter.im)

# griffe

Griffe package.

Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.

The entirety of the public API is exposed here, in the top-level `griffe` module.

All messages written to standard output or error are logged using the `logging` module. Our logger's name is set to `"griffe"` and is public (you can rely on it). You can obtain the logger from the standard `logging` module: `logging.getLogger("griffe")`. Actual logging messages are not part of the public API (they might change without notice).

Raised exceptions throughout the package are part of the public API (you can rely on them). Their actual messages are not part of the public API (they might change without notice).

The following paragraphs will help you discover the package's content.

### CLI entrypoints

Griffe provides a command-line interface (CLI) to interact with the package. The CLI entrypoints can be called from Python code.

- griffe.main: Run the main program.
- griffe.check: Check for API breaking changes in two versions of the same package.
- griffe.dump: Load packages data and dump it as JSON.

### Loaders

To load API data, Griffe provides several high-level functions.

- griffe.load: Load and return a Griffe object.
- griffe.load_git: Load and return a module from a specific Git reference.
- griffe.load_pypi: Load and return a module from a specific package version downloaded using pip.

### Models

The data loaded by Griffe is represented by several classes.

- griffe.Module: The class representing a Python module.
- griffe.Class: The class representing a Python class.
- griffe.Function: The class representing a Python function or method.
- griffe.Attribute: The class representing a Python attribute.
- griffe.Alias: This class represents an alias, or indirection, to an object declared in another module.

Additional classes are available to represent other concepts.

- griffe.Decorator: This class represents a decorator.
- griffe.Parameters: This class is a container for parameters.
- griffe.Parameter: This class represent a function parameter.

### Agents

Griffe is able to analyze code both statically and dynamically, using the following "agents". However most of the time you will only need to use the loaders above.

- griffe.visit: Parse and visit a module file.
- griffe.inspect: Inspect a module.

### Serializers

Griffe can serizalize data to dictionary and JSON.

- griffe.Object.as_json
- griffe.Object.from_json
- griffe.JSONEncoder: JSON encoder for Griffe objects.
- griffe.json_decoder: JSON decoder for Griffe objects.

### API checks

Griffe can compare two versions of the same package to find breaking changes.

- griffe.find_breaking_changes: Find breaking changes between two versions of the same API.
- griffe.Breakage: Breakage classes can explain what broke from a version to another.

### Extensions

Griffe supports extensions. You can create your own extension by subclassing the `griffe.Extension` class.

- griffe.load_extensions: Load configured extensions.
- griffe.Extension: Base class for Griffe extensions.

### Docstrings

Griffe can parse docstrings into structured data.

Main class:

- griffe.Docstring: This class represents docstrings.

Docstring section and element classes all start with `Docstring`.

Docstring parsers:

- griffe.parse: Parse the docstring.
- griffe.parse_auto: Parse a docstring by automatically detecting the style it uses.
- griffe.parse_google: Parse a Google-style docstring.
- griffe.parse_numpy: Parse a Numpydoc-style docstring.
- griffe.parse_sphinx: Parse a Sphinx-style docstring.

### Exceptions

Griffe uses several exceptions to signal errors.

- griffe.GriffeError: The base exception for all Griffe errors.
- griffe.LoadingError: Exception for loading errors.
- griffe.NameResolutionError: Exception for names that cannot be resolved in a object scope.
- griffe.UnhandledEditableModuleError: Exception for unhandled editables modules, when searching modules.
- griffe.UnimportableModuleError: Exception for modules that cannot be imported.
- griffe.AliasResolutionError: Exception for aliases that cannot be resolved.
- griffe.CyclicAliasError: Exception raised when a cycle is detected in aliases.
- griffe.LastNodeError: Exception raised when trying to access a next or previous node.
- griffe.RootNodeError: Exception raised when trying to use siblings properties on a root node.
- griffe.BuiltinModuleError: Exception raised when trying to access the filepath of a builtin module.
- griffe.ExtensionError: Base class for errors raised by extensions.
- griffe.ExtensionNotLoadedError: Exception raised when an extension could not be loaded.
- griffe.GitError: Exception raised for errors related to Git.

## Expressions

Griffe stores snippets of code (attribute values, decorators, base class, type annotations) as expressions. Expressions are basically abstract syntax trees (AST) with a few differences compared to the nodes returned by ast. Griffe provides a few helpers to extract expressions from regular AST nodes.

- griffe.get_annotation: Get a type annotation as expression.
- griffe.get_base_class: Get a base class as expression.
- griffe.get_condition: Get a condition as expression.
- griffe.get_expression: Get an expression from an AST node.
- griffe.safe_get_annotation: Get a type annotation as expression, safely (returns `None` on error).
- griffe.safe_get_base_class: Get a base class as expression, safely (returns `None` on error).
- griffe.safe_get_condition: Get a condition as expression, safely (returns `None` on error).
- griffe.safe_get_expression: Get an expression from an AST node, safely (returns `None` on error).

The base class for expressions.

- griffe.Expr

Expression classes all start with `Expr`.

## Loggers

If you want to log messages from extensions, get a logger with `get_logger`. The `logger` attribute is used by Griffe itself. You can use it to temporarily disable Griffe logging.

- griffe.logger: Our global logger, used throughout the library.
- griffe.get_logger: Create and return a new logger instance.

## Helpers

To test your Griffe extensions, or to load API data from code in memory, Griffe provides the following helpers.

- griffe.temporary_pyfile: Create a Python file containing the given code in a temporary directory.
- griffe.temporary_pypackage: Create a package containing the given modules in a temporary directory.
- griffe.temporary_visited_module: Create and visit a temporary module with the given code.
- griffe.temporary_visited_package: Create and visit a temporary package.
- griffe.temporary_inspected_module: Create and inspect a temporary module with the given code.
- griffe.temporary_inspected_package: Create and inspect a temporary package.

# CLI reference

## griffe

> Signatures for entire Python programs.

Global Options:

- `-h`, `--help`: Show this help message and exit. Commands also accept the -h/--help option.
- `-V`, `--version`: show program's version number and exit
- `--debug-info`: Print debug information.

Commands:

### dump

> Load package-signatures and dump them as JSON.

Search Options:

- `-s`, `--search`: Paths to search packages into.
- `-y`, `--sys-path`: Whether to append `sys.path` to search paths specified with `-s`.

Loading Options:

- `-B`, `--find-stubs-packages`: Whether to look for stubs-only packages and merge them with concrete ones.
- `-e`, `--extensions`: A list of extensions to use.
- `-X`, `--no-inspection`: Disallow inspection of builtin/compiled/not found modules. Default: `True`.
- `-x`, `--force-inspection`: Force inspection of everything, even when sources are found.

Dump Options:

- `packages` `PACKAGE`: Packages to find, load and dump.
- `-f`, `--full`: Whether to dump full data in JSON.
- `-o`, `--output`: Output file. Supports templating to output each package in its own file, with `{package}`. Default: `sys.stdout`.
- `-d`, `--docstyle`: The docstring style to parse.
- `-D`, `--docopts`: The options for the docstring parser.
- `-r`, `--resolve-aliases`: Whether to resolve aliases.
- `-I`, `--resolve-implicit`: Whether to resolve implicitly exported aliases as well. Aliases are explicitly exported when defined in `__all__`.
- `-U`, `--resolve-external`: Always resolve aliases pointing to external/unknown modules (not loaded directly).Default is to resolve only from one module to its private sibling (`ast` -> `_ast`).
- `--no-resolve-external`: Never resolve aliases pointing to external/unknown modules (not loaded directly).Default is to resolve only from one module to its private sibling (`ast` -> `_ast`). Default: `True`.
- `-S`, `--stats`: Show statistics at the end.

Debugging Options:

- `-L`, `--log-level` `LEVEL`: Set the log level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`. Default: `INFO`.

Common Options:

- `-h`, `--help`: Show this help message and exit.

### check

> Check for API breakages or possible improvements.

Search Options:

- `-s`, `--search`: Paths to search packages into.
- `-y`, `--sys-path`: Whether to append `sys.path` to search paths specified with `-s`.

Loading Options:

- `-B`, `--find-stubs-packages`: Whether to look for stubs-only packages and merge them with concrete ones.
- `-e`, `--extensions`: A list of extensions to use.
- `-X`, `--no-inspection`: Disallow inspection of builtin/compiled/not found modules. Default: `True`.
- `-x`, `--force-inspection`: Force inspection of everything, even when sources are found.

Debugging Options:

- `-L`, `--log-level` `LEVEL`: Set the log level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`. Default: `INFO`.

Common Options:

- `-h`, `--help`: Show this help message and exit.

Check Options:

- `package` `PACKAGE`: Package to find, load and check, as path.
- `-a`, `--against` `REF`: Older Git reference (commit, branch, tag) to check against. Default: load latest tag.
- `-b`, `--base-ref` `BASE_REF`: Git reference (commit, branch, tag) to check. Default: load current code.
- `--color`: Force enable colors in the output.
- `--no-color`: Force disable colors in the output.
- `-v`, `--verbose`: Verbose output.
- `-f`, `--format`: Output format.

# Docstrings

Griffe provides different docstring parsers allowing to extract even more structured data from source code.

The available parsers are:

- `google`, to parse Google-style docstrings, see [Napoleon's documentation](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)
- `numpy`, to parse Numpydoc docstrings, see [Numpydoc's documentation](https://numpydoc.readthedocs.io/en/latest/format.html)
- `sphinx`, to parse Sphinx-style docstrings, see [Sphinx's documentation](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html)
- `auto` (sponsors only), to automatically detect the docstring style, see [Auto-style](#auto-style)

Most of the time, the syntax specified in the aforementioned docs is supported. In some cases, the original syntax is not supported, or is supported but with subtle differences. We will try to document these differences in the following sections.

No assumption is made on the markup used in docstrings: it's retrieved as regular text. Tooling making use of Griffe can then choose to render the text as if it is Markdown, or AsciiDoc, or reStructuredText, etc..

## Google-style

Google-style docstrings, see [Napoleon's documentation](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

### Syntax

Sections are written like this:

```
section identifier: optional section title
    section contents

```

All sections identifiers are case-insensitive. All sections support multiple lines in descriptions, as well as blank lines. The first line must not be blank. Each section must be separated from contents above by a blank line.

❌ This is **invalid** and will be parsed as regular markup:

```
Some text.
Note: # (1)!
    Some information.

    Blank lines allowed.

```

1. Missing blank line above.

❌ This is **invalid** and will be parsed as regular markup:

```
Some text.

Note: # (1)!

    Some information.

    Blank lines allowed.

```

1. Extraneous blank line below.

✅ This is **valid** and will parsed as a text section followed by a note admonition:

```
Some text.

Note:
    Some information.

    Blank lines allowed.

```

Find out possibly invalid section syntax by grepping for "reasons" in Griffe debug logs:

```
griffe dump -Ldebug -o/dev/null -fdgoogle your_package 2>&1 | grep reasons

```

Some sections support documenting multiple items (attributes, parameters, etc.). When multiple items are supported, each item description can use multiple lines, and continuation lines must be indented once more so that the parser is able to differentiate items.

```
def foo(a, b):
    """Foo.

    Parameters:
        a: Here's a.
            Continuation line 1.

            Continuation line 2.
        b: Here's b.
    """

```

It's possible to start a description with a newline if you find it less confusing:

```
def foo(a, b):
    """Foo.

    Parameters:
        a:
            Here's a.
            Continuation line 1.

            Continuation line 2.
        b: Here's b.
    """

```

### Admonitions

When a section identifier does not match one of the [supported sections](#google-sections), the section is parsed as an "admonition" (or "callout").

Identifiers are case-insensitive, however singular and plural forms are distinct. For example, `Note:` is not the same as `Notes:`.

In particular, `Examples` is parsed as the [Examples section](#google-section-examples), while `Example` is parsed as an admonition whose kind is `example`.

The kind is obtained by lower-casing the identifier and replacing spaces with dashes. For example, an admonition whose identifier is `See also:` will have a kind equal to `see-also`.

Custom section titles are preserved in admonitions: `Tip: Check this out:` is parsed as a `tip` admonition with `Check this out:` as title.

It is up to any downstream documentation renderer to make use of these kinds and titles.

### Parser options

The parser accepts a few options:

- `ignore_init_summary`: Ignore the first line in `__init__` methods' docstrings. Useful when merging `__init__` docstring into class' docstrings with mkdocstrings-python's [`merge_init_into_class`](https://mkdocstrings.github.io/python/usage/configuration/docstrings/#merge_init_into_class) option. Default: false.
- `returns_multiple_items`: Parse [Returns sections](#google-section-returns) and [Yields sections](#google-section-yields) as if they contain multiple items. It means that continuation lines must be indented. Default: true.
- `returns_named_value`: Whether to parse `thing: Description` in [Returns sections](#google-section-returns) and [Yields sections](#google-section-yields) as a name and description, rather than a type and description. When true, type must be wrapped in parentheses: `(int): Description.`. When false, parentheses are optional but the items cannot be named: `int: Description`. Default: true.
- `receives_multiple_items`: Parse [Receives sections](#google-section-receives) as if they contain multiple items. It means that continuation lines must be indented. Default: true.
- `receives_named_value`: Whether to parse `thing: Description` in [Receives sections](#google-section-receives) as a name and description, rather than a type and description. When true, type must be wrapped in parentheses: `(int): Description.`. When false, parentheses are optional but the items cannot be named: `int: Description`. Default: true.
- `returns_type_in_property_summary`: Whether to parse the return type of properties at the beginning of their summary: `str: Summary of the property`. Default: false.
- `trim_doctest_flags`: Remove the [doctest flags](https://docs.python.org/3/library/doctest.html#option-flags) written as comments in `pycon` snippets within a docstring. These flags are used to alter the behavior of [doctest](https://docs.python.org/3/library/doctest.html#module-doctest) when testing docstrings, and should not be visible in your docs. Default: true.
- `warn_unknown_params`: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.

### Sections

The following sections are supported.

#### Attributes

- Multiple items allowed

Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.

```
"""My module.

Attributes:
    foo: Description for `foo`.
    bar: Description for `bar`.
"""

foo: int = 0
bar: bool = True


class MyClass:
    """My class.

    Attributes:
        foofoo: Description for `foofoo`.
        barbar: Description for `barbar`.
    """

    foofoo: int = 0

    def __init__(self):
        self.barbar: bool = True

```

Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:

```
"""My module.

Attributes:
    foo (Integer): Description for `foo`.
    bar (Boolean): Description for `bar`.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

When documenting an attribute with `attr_name (attr_type): Attribute description`, `attr_type` will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of `list[str]` will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example `Optional[Union[int, Tuple[float, float]]]`.

#### Functions/Methods

- Multiple items allowed

Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.

```
"""My module.

Functions:
    foo: Description for `foo`.
    bar: Description for `bar`.
"""


def foo():
    return "foo"


def bar(baz: int) -> int:
    return baz * 2


class MyClass:
    """My class.

    Methods:
        foofoo: Description for `foofoo`.
        barbar: Description for `barbar`.
    """

    def foofoo(self):
        return "foofoo"

    @staticmethod
    def barbar():
        return "barbar"

```

It's possible to write the function/method signature as well as its name:

```
"""
Functions:
    foo(): Description for `foo`.
    bar(baz=1): Description for `bar`.
"""

```

The signatures do not have to match the real ones: you can shorten them to only show the important parameters.

#### Classes

- Multiple items allowed

Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.

```
"""My module.

Classes:
    Foo: Description for `foo`.
    Bar: Description for `bar`.
"""


class Foo:
    ...


class Bar:
    def __init__(self, baz: int) -> int:
        return baz * 2


class MyClass:
    """My class.

    Classes:
        FooFoo: Description for `foofoo`.
        BarBar: Description for `barbar`.
    """

    class FooFoo:
        ...

    class BarBar:
        ...

```

It's possible to write the class signature as well as its name:

```
"""
Functions:
    Foo(): Description for `Foo`.
    Bar(baz=1): Description for `Bar`.
"""

```

The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.

#### Modules

- Multiple items allowed

Modules sections allow to document submodules of a module. They should be used in modules docstrings only.

```
📁 my_pkg/
├──  __init__.py
├──  foo.py
└──  bar.py

```

my_pkg/__init__.py

```
"""My package.

Modules:
    foo: Description for `foo`.
    bar: Description for `bar`.
"""

```

#### Examples

Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.

```
"""My module.

Examples:
    Some explanation of what is possible.

    >>> print("hello!")
    hello!

    Blank lines delimit prose vs. console blocks.

    >>> a = 0
    >>> a += 1
    >>> a
    1
"""

```

Not the same as *Example* sections.

*Example* (singular) sections are parsed as admonitions. Console code blocks will only be understood in *Examples* (plural) sections.

#### Parameters

- Aliases: Args, Arguments, Params
- Multiple items allowed

Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.

```
def foo(a: int, b: str):
    """Foo.

    Parameters:
        a: Here's a.
        b: Here's b.
    """

```

```
from dataclasses import dataclass


@dataclass
class Foo:
    """Foo.

    Parameters:
        a: Here's a.
        b: Here's b.
    """

    foo: int
    bar: str

```

Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:

```
"""My function.

Parameters:
    foo (Integer): Description for `foo`.
    bar (String): Description for `bar`.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

When documenting a parameter with `param_name (param_type): Parameter description`, `param_type` will be resolved using the scope of the function (or class). For example, a type of `list[str]` will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example `Optional[Union[int, Tuple[float, float]]]`.

#### Other Parameters

- Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params
- Multiple items allowed

Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are, but can also be useful in decorators / to document returned callables.

```
def foo(a, b, **kwargs):
    """Foo.

    Parameters:
        a: Here's a.
        b: Here's b.

    Other parameters:
        c (int): Here's c.
        d (bool): Here's d.
    """

```

```
def foo(a, b):
    """Returns a callable.

    Parameters:
        a: Here's a.
        b: Here's b.

    Other parameters: Parameters of the returned callable:
        c (int): Here's c.
        d (bool): Here's d.
    """

    def inner(c, d):
        ...

    return inner

```

Types in docstrings are resolved using the docstrings' parent scope.

See the same tip for parameters.

#### Raises

- Aliases: Exceptions
- Multiple items allowed

Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.

```
def foo(a: int):
    """Foo.

    Parameters:
        a: A value.

    Raises:
        ValueError: When `a` is less than 0.
    """
    if a < 0:
        raise ValueError("message")

```

Exceptions names are resolved using the function's scope.

`ValueError` and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example `my_exceptions.MyCustomException` or `MyCustomException` directly, depending on what you imported/defined in the current module.

#### Warns

- Aliases: Warnings
- Multiple items allowed

Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.

```
import warnings


def foo():
    """Foo.

    Warns:
        UserWarning: To annoy users.
    """
    warnings.warn("Just messing with you.", UserWarning)

```

Warnings names are resolved using the function's scope.

`UserWarning` and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example `my_warnings.MyCustomWarning` or `MyCustomWarning` directly, depending on what you imported/defined in the current module.

#### Yields

- Multiple items allowed

Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.

```
from typing import Iterator


def foo() -> Iterator[int]:
    """Foo.

    Yields:
        Integers from 0 to 9.
    """
    for i in range(10):
        yield i

```

Type annotations are fetched from the function return annotation when the annotation is `typing.Generator` or `typing.Iterator`. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
from datetime import datetime


def foo() -> Iterator[tuple[float, float, datetime]]:
    """Foo.

    Yields:
        x: Absissa.
        y: Ordinate.
        t: Time.

    ...
    """
    ...

```

You have to indent each continuation line when documenting yielded values, even if there's only one value yielded:

```
"""Foo.

Yields:
    partial_result: Some partial result.
        A longer description of details and other information
        for this partial result.
"""

```

If you don't want to indent continuation lines for the only yielded value, use the [`returns_multiple_items=False`](#google-options) parser option.

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Yields:
    x (int): Absissa.
    y (int): Ordinate.
    t (int): Timestamp.
"""

```

If you want to specify the type without a name, you still have to wrap the type in parentheses:

```
"""Foo.

Yields:
    (int): Absissa.
    (int): Ordinate.
    (int): Timestamp.
"""

```

If you don't want to wrap the type in parentheses, use the [`returns_named_value=False`](#google-options) parser option. Setting it to false will disallow specifying a name.

Types in docstrings are resolved using the docstrings' parent scope.

See previous tips for types in docstrings.

#### Receives

- Multiple items allowed

Receives sections allow to document values that can be sent to generators using their `send` method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.

```
from typing import Generator


def foo() -> Generator[int, str, None]:
    """Foo.

    Receives:
        reverse: Reverse the generator if `"reverse"` is received.

    Yields:
        Integers from 0 to 9.

    Examples:
        >>> gen = foo()
        >>> next(gen)
        0
        >>> next(gen)
        1
        >>> next(gen)
        2
        >>> gen.send("reverse")
        2
        >>> next(gen)
        1
        >>> next(gen)
        0
        >>> next(gen)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        StopIteration
    """
    for i in range(10):
        received = yield i
        if received == "reverse":
            for j in range(i, -1, -1):
                yield j
            break

```

Type annotations are fetched from the function return annotation when the annotation is `typing.Generator`. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
def foo() -> Generator[int, tuple[str, bool], None]:
    """Foo.

    Receives:
        mode: Some mode.
        flag: Some flag.

    ...
    """
    ...

```

You have to indent each continuation line when documenting received values, even if there's only one value received:

```
"""Foo.

Receives:
    data: Input data.
        A longer description of what this data actually is,
        and what it isn't.
"""

```

If you don't want to indent continuation lines for the only received value, use the [`receives_multiple_items=False`](#google-options) parser option.

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Receives:
    mode (ModeEnum): Some mode.
    flag (int): Some flag.
"""

```

If you want to specify the type without a name, you still have to wrap the type in parentheses:

```
"""Foo.

Receives:
    (ModeEnum): Some mode.
    (int): Some flag.
"""

```

If you don't want to wrap the type in parentheses, use the [`receives_named_value=False`](#google-options) parser option. Setting it to false will disallow specifying a name.

Types in docstrings are resolved using the docstrings' parent scope.

See previous tips for types in docstrings.

#### Returns

- Multiple items allowed

Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.

```
import random


def foo() -> int:
    """Foo.

    Returns:
        A random integer.
    """
    return random.randint(0, 100)

```

Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
def foo() -> tuple[bool, float]:
    """Foo.

    Returns:
        success: Whether it succeeded.
        precision: Final precision.

    ...
    """
    ...

```

You have to indent each continuation line when documenting returned values, even if there's only one value returned:

```
"""Foo.

Returns:
    success: Whether it succeeded.
        A longer description of what is considered success,
        and what is considered failure.
"""

```

If you don't want to indent continuation lines for the only returned value, use the [`returns_multiple_items=False`](#google-options) parser option.

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Returns:
    success (int): Whether it succeeded.
    precision (Decimal): Final precision.
"""

```

If you want to specify the type without a name, you still have to wrap the type in parentheses:

```
"""Foo.

Returns:
    (int): Whether it succeeded.
    (Decimal): Final precision.
"""

```

If you don't want to wrap the type in parentheses, use the [`returns_named_value=False`](#google-options) parser option. Setting it to false will disallow specifying a name.

Types in docstrings are resolved using the docstrings' function scope.

See previous tips for types in docstrings.

## Numpydoc-style

Numpydoc docstrings, see [Numpydoc's documentation](https://numpydoc.readthedocs.io/en/latest/format.html)

### Syntax

Sections are written like this:

```
section identifier
------------------
section contents

```

All sections identifiers are case-insensitive. All sections support multiple lines in descriptions.

Some sections support documenting items items. Item descriptions start on a new, indented line. When multiple items are supported, each item description can use multiple lines.

```
def foo(a, b):
    """Foo.

    Parameters
    ----------
    a
        Here's a.
        Continuation line 1.

        Continuation line 2.
    b
        Here's b.
    """

```

For items that have an optional name and type, several syntaxes are supported:

- specifying both the name and type:

  ```
  """
  name : type
      description
  """

  ```

- specifying just the name:

  ```
  """
  name
      description
  """

  ```

  or

  ```
  """
  name :
      description
  """

  ```

- specifying just the type:

  ```
  """
  : type
      description
  """

  ```

- specifying neither the name nor type:

  ```
  """
  :
      description
  """

  ```

### Admonitions

When a section identifier does not match one of the [supported sections](#numpydoc-sections), the section is parsed as an "admonition" (or "callout").

Identifiers are case-insensitive, however singular and plural forms are distinct, except for notes and warnings. In particular, `Examples` is parsed as the [Examples section](#numpydoc-section-examples), while `Example` is parsed as an admonition whose kind is `example`.

The kind is obtained by lower-casing the identifier and replacing spaces with dashes. For example, an admonition whose identifier is `See also` will have a kind equal to `see-also`.

It is up to any downstream documentation renderer to make use of these kinds.

### Parser options

The parser accepts a few options:

- `ignore_init_summary`: Ignore the first line in `__init__` methods' docstrings. Useful when merging `__init__` docstring into class' docstrings with mkdocstrings-python's [`merge_init_into_class`](https://mkdocstrings.github.io/python/usage/configuration/docstrings/#merge_init_into_class) option. Default: false.
- `trim_doctest_flags`: Remove the [doctest flags](https://docs.python.org/3/library/doctest.html#option-flags) written as comments in `pycon` snippets within a docstring. These flags are used to alter the behavior of [doctest](https://docs.python.org/3/library/doctest.html#module-doctest) when testing docstrings, and should not be visible in your docs. Default: true.
- `warn_unknown_params`: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.

### Sections

The following sections are supported.

#### Attributes

- Multiple items allowed

Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.

```
"""My module.

Attributes
----------
foo
    Description for `foo`.
bar
    Description for `bar`.
"""

foo: int = 0
bar: bool = True


class MyClass:
    """My class.

    Attributes
    ----------
    foofoo
        Description for `foofoo`.
    barbar
        Description for `barbar`.
    """

    foofoo: int = 0

    def __init__(self):
        self.barbar: bool = True

```

Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:

```
"""My module.

Attributes
----------
foo : Integer
    Description for `foo`.
bar : Boolean
    Description for `bar`.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

When documenting an attribute with `attr_name : attr_type`, `attr_type` will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of `list[str]` will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example `Optional[Union[int, Tuple[float, float]]]`.

#### Functions/Methods

- Multiple items allowed

Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.

```
"""My module.

Functions
---------
foo
    Description for `foo`.
bar
    Description for `bar`.
"""


def foo():
    return "foo"


def bar(baz: int) -> int:
    return baz * 2


class MyClass:
    """My class.

    Methods
    -------
    foofoo
        Description for `foofoo`.
    barbar
        Description for `barbar`.
    """

    def foofoo(self):
        return "foofoo"

    @staticmethod
    def barbar():
        return "barbar"

```

It's possible to write the function/method signature as well as its name:

```
"""
Functions
---------
foo()
    Description for `foo`.
bar(baz=1)
    Description for `bar`.
"""

```

The signatures do not have to match the real ones: you can shorten them to only show the important parameters.

#### Classes

- Multiple items allowed

Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.

```
"""My module.

Classes
-------
Foo
    Description for `foo`.
Bar
    Description for `bar`.
"""


class Foo:
    ...


class Bar:
    def __init__(self, baz: int) -> int:
        return baz * 2


class MyClass:
    """My class.

    Classes
    -------
    FooFoo
        Description for `foofoo`.
    BarBar
        Description for `barbar`.
    """

    class FooFoo:
        ...

    class BarBar:
        ...

```

It's possible to write the class signature as well as its name:

```
"""
Functions
---------
Foo()
    Description for `Foo`.
Bar(baz=1)
    Description for `Bar`.
"""

```

The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.

#### Modules

- Multiple items allowed

Modules sections allow to document submodules of a module. They should be used in modules docstrings only.

```
📁 my_pkg/
├──  __init__.py
├──  foo.py
└──  bar.py

```

my_pkg/__init__.py

```
"""My package.

Modules
-------
foo
    Description for `foo`.
bar
    Description for `bar`.
"""

```

#### Examples

Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.

```
"""My module.

Examples
--------
Some explanation of what is possible.

>>> print("hello!")
hello!

Blank lines delimit prose vs. console blocks.

>>> a = 0
>>> a += 1
>>> a
1
"""

```

#### Parameters

- Aliases: Args, Arguments, Params
- Multiple items allowed

Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.

```
def foo(a: int, b: str):
    """Foo.

    Parameters
    ----------
    a
        Here's a.
    b
        Here's b.
    """

```

```
from dataclasses import dataclass


@dataclass
class Foo:
    """Foo.

    Parameters
    ----------
    a
        Here's a.
    b
        Here's b.
    """

    foo: int
    bar: str

```

Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:

```
"""My function.

Parameters
----------
foo : Integer
    Description for `foo`.
bar : String
    Description for `bar`.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

When documenting a parameter with `param_name : param_type`, `param_type` will be resolved using the scope of the function (or class). For example, a type of `list[str]` will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example `Optional[Union[int, Tuple[float, float]]]`.

#### Other Parameters

- Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params
- Multiple items allowed

Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are.

```
def foo(a, b, **kwargs):
    """Foo.

    Parameters
    ----------
    a
        Here's a.
    b
        Here's b.

    Other parameters
    ----------------
    c : int
        Here's c.
    d : bool
        Here's d.
    """

```

Types in docstrings are resolved using the docstrings' parent scope.

See the same tip for parameters.

#### Raises

- Aliases: Exceptions
- Multiple items allowed

Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.

```
def foo(a: int):
    """Foo.

    Parameters
    ----------
    a
        A value.

    Raises
    ------
    ValueError
        When `a` is less than 0.
    """
    if a < 0:
        raise ValueError("message")

```

Exceptions names are resolved using the function's scope.

`ValueError` and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example `my_exceptions.MyCustomException` or `MyCustomException` directly, depending on what you imported/defined in the current module.

#### Warns

- Multiple items allowed

Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.

```
import warnings


def foo():
    """Foo.

    Warns
    -----
    UserWarning
        To annoy users.
    """
    warnings.warn("Just messing with you.", UserWarning)

```

Warnings names are resolved using the function's scope.

`UserWarning` and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example `my_warnings.MyCustomWarning` or `MyCustomWarning` directly, depending on what you imported/defined in the current module.

#### Yields

- Multiple items allowed

Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.

```
from typing import Iterator


def foo() -> Iterator[int]:
    """Foo.

    Yields
    ------
    :
        Integers from 0 to 9.
    """
    for i in range(10):
        yield i

```

Type annotations are fetched from the function return annotation when the annotation is `typing.Generator` or `typing.Iterator`. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
from datetime import datetime


def foo() -> Iterator[tuple[float, float, datetime]]:
    """Foo.

    Yields
    ------
    x
        Absissa.
    y
        Ordinate.
    t
        Time.
    """
    ...

```

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Yields
------
x : int
    Absissa.
y : int
    Ordinate.
t : int
    Timestamp.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

See previous tips for types in docstrings.

#### Receives

- Multiple items allowed

Receives sections allow to document values that can be sent to generators using their `send` method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.

```
from typing import Generator


def foo() -> Generator[int, str, None]:
    """Foo.

    Receives
    --------
    reverse
        Reverse the generator if `"reverse"` is received.

    Yields
    ------
    :
        Integers from 0 to 9.

    Examples
    --------
    >>> gen = foo()
    >>> next(gen)
    0
    >>> next(gen)
    1
    >>> next(gen)
    2
    >>> gen.send("reverse")
    2
    >>> next(gen)
    1
    >>> next(gen)
    0
    >>> next(gen)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
    StopIteration
    """
    for i in range(10):
        received = yield i
        if received == "reverse":
            for j in range(i, -1, -1):
                yield j
            break

```

Type annotations are fetched from the function return annotation when the annotation is `typing.Generator`. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
def foo() -> Generator[int, tuple[str, bool], None]:
    """Foo.

    Receives
    --------
    mode
        Some mode.
    flag
        Some flag.
    """
    ...

```

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Receives
--------
mode : ModeEnum
    Some mode.
flag : int
    Some flag.
"""

```

Types in docstrings are resolved using the docstrings' parent scope.

See previous tips for types in docstrings.

#### Returns

- Multiple items allowed

Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.

```
import random


def foo() -> int:
    """Foo.

    Returns
    -------
    :
        A random integer.
    """
    return random.randint(0, 100)

```

Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:

```
def foo() -> tuple[bool, float]:
    """Foo.

    Returns
    -------
    success
        Whether it succeeded.
    precision
        Final precision.
    """
    ...

```

Type annotations can as usual be overridden using types in parentheses in the docstring itself:

```
"""Foo.

Returns
-------
success : int
    Whether it succeeded.
precision : Decimal
    Final precision.
"""

```

Types in docstrings are resolved using the docstrings' function scope.

See previous tips for types in docstrings.

## Auto-style

[Sponsors only](../../insiders/) — [Insiders 1.3.0](../../insiders/changelog/#1.3.0).

Automatic style detection. This parser will first try to detect the style used in the docstring, and call the corresponding parser on it.

### Parser options

The parser accepts a few options:

- `method`: The method to use to detect the style and infer the parser. Method 'heuristics' will use regular expressions, while method 'max_sections' will parse the docstring with all parsers specified in `style_order` and return the one who parsed the most sections. Default: `"heuristics"`.
- `style_order`: If multiple parsers parsed the same number of sections, `style_order` is used to decide which one to return. Default: `["sphinx", "google", "numpy"]`.
- `default`: If heuristics fail, the `default` parser is returned. The `default` parser is never used with the 'max_sections' method. Default: `None`.
- Any other option is passed down to the detected parser, if any.

For non-Insiders versions, `default` is returned if specified, else the first parser in `style_order` is returned. If `style_order` is not specified, `None` is returned.

## Parsers features

Want to contribute?

Each red cross is a link to an issue on the bugtracker. You will find some guidance on how to add support for the corresponding item.

The sections are easier to deal in that order:

- Raises, Warns (multiple items, no names, single type each)
- Attributes, Other Parameters, Parameters (multiple items, one name and one optional type each)
- Returns (multiple items, optional name and/or type each, annotation to split when multiple names)
- Receives, Yields (multiple items, optional name and/or type each, several types of annotations to split when multiple names)

"Examples" section are a bit different as they require to parse the examples. But you can probably reuse the code in the Google parser. We can probably even factorize the examples parsing into a single function.

You can tackle several items at once in a single PR, as long as they relate to a single parser or a single section (a line or a column of the following tables).

### Sections

| Section | Google | Numpy | Sphinx | | --- | --- | --- | --- | | Attributes | ✅ | ✅ | ✅ | | Functions | ✅ | ✅ | ❌ | | Methods | ✅ | ✅ | ❌ | | Classes | ✅ | ✅ | ❌ | | Modules | ✅ | ✅ | ❌ | | Examples | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/7) | | Parameters | ✅ | ✅ | ✅ | | Other Parameters | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/27) | | Raises | ✅ | ✅ | ✅ | | Warns | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/9) | | Yields | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/10) | | Receives | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/8) | | Returns | ✅ | ✅ | ✅ |

### Getting annotations/defaults from parent

| Section | Google | Numpy | Sphinx | | --- | --- | --- | --- | | Attributes | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/33) | | Functions | / | / | / | | Methods | / | / | / | | Classes | / | / | / | | Modules | / | / | / | | Examples | / | / | / | | Parameters | ✅ | ✅ | ✅ | | Other Parameters | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/34) | | Raises | / | / | / | | Warns | / | / | / | | Yields | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/36) | | Receives | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/35) | | Returns | ✅ | ✅ | ✅ |

### Cross-references for annotations in docstrings

| Section | Google | Numpy | Sphinx | | --- | --- | --- | --- | | Attributes | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/19) | | Functions | [❌](https://github.com/mkdocstrings/griffe/issues/199) | [❌](https://github.com/mkdocstrings/griffe/issues/200) | / | | Methods | [❌](https://github.com/mkdocstrings/griffe/issues/199) | [❌](https://github.com/mkdocstrings/griffe/issues/200) | / | | Classes | [❌](https://github.com/mkdocstrings/griffe/issues/199) | [❌](https://github.com/mkdocstrings/griffe/issues/200) | / | | Modules | / | / | / | | Examples | / | / | / | | Parameters | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/21) | | Other Parameters | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/20) | | Raises | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/22) | | Warns | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/25) | | Yields | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/26) | | Receives | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/23) | | Returns | ✅ | ✅ | [❌](https://github.com/mkdocstrings/griffe/issues/24) |

# Agents

Griffe is able to analyze code both statically and dynamically.

## **Main API**

## visit

```
visit(
    module_name: str,
    filepath: Path,
    code: str,
    *,
    extensions: Extensions | None = None,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
) -> Module

```

Parse and visit a module file.

We provide this function for static analysis. It uses a NodeVisitor-like class, the Visitor, to compile and parse code (using compile) then visit the resulting AST (Abstract Syntax Tree).

Important

This function is generally not used directly. In most cases, users can rely on the GriffeLoader and its accompanying load shortcut and their respective options to load modules using static analysis.

Parameters:

- ### **`module_name`**

  (`str`) – The module name (as when importing [from] it).

- ### **`filepath`**

  (`Path`) – The module file path.

- ### **`code`**

  (`str`) – The module contents.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use when visiting the AST.

- ### **`parent`**

  (`Module | None`, default: `None` ) – The optional parent of this module.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Returns:

- `Module` – The module, with its members populated.

## inspect

```
inspect(
    module_name: str,
    *,
    filepath: Path | None = None,
    import_paths: Sequence[str | Path] | None = None,
    extensions: Extensions | None = None,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
) -> Module

```

Inspect a module.

Sometimes we cannot get the source code of a module or an object, typically built-in modules like `itertools`. The only way to know what they are made of is to actually import them and inspect their contents.

Sometimes, even if the source code is available, loading the object is desired because it was created or modified dynamically, and our static agent is not powerful enough to infer all these dynamic modifications. In this case, we load the module using introspection.

Griffe therefore provides this function for dynamic analysis. It uses a NodeVisitor-like class, the Inspector, to inspect the module with inspect.getmembers().

The inspection agent works similarly to the regular Visitor agent, in that it maintains a state with the current object being handled, and recursively handle its members.

Important

This function is generally not used directly. In most cases, users can rely on the GriffeLoader and its accompanying load shortcut and their respective options to load modules using dynamic analysis.

Parameters:

- ### **`module_name`**

  (`str`) – The module name (as when importing [from] it).

- ### **`filepath`**

  (`Path | None`, default: `None` ) – The module file path.

- ### **`import_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – Paths to import the module from.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use when inspecting the module.

- ### **`parent`**

  (`Module | None`, default: `None` ) – The optional parent of this module.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Returns:

- `Module` – The module, with its members populated.

## **Advanced API**

## Visitor

```
Visitor(
    module_name: str,
    filepath: Path,
    code: str,
    extensions: Extensions,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
)

```

This class is used to instantiate a visitor.

Visitors iterate on AST nodes to extract data from them.

Parameters:

- ### **`module_name`**

  (`str`) – The module name.

- ### **`filepath`**

  (`Path`) – The module filepath.

- ### **`code`**

  (`str`) – The module source code.

- ### **`extensions`**

  (`Extensions`) – The extensions to use when visiting.

- ### **`parent`**

  (`Module | None`, default: `None` ) – An optional parent for the final module object.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – The docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Methods:

- **`decorators_to_labels`** – Build and return a set of labels based on decorators.
- **`generic_visit`** – Extend the base generic visit with extensions.
- **`get_base_property`** – Check decorators to return the base property in case of setters and deleters.
- **`get_module`** – Build and return the object representing the module attached to this visitor.
- **`handle_attribute`** – Handle an attribute (assignment) node.
- **`handle_function`** – Handle a function definition node.
- **`visit`** – Extend the base visit with extensions.
- **`visit_annassign`** – Visit an annotated assignment node.
- **`visit_assign`** – Visit an assignment node.
- **`visit_asyncfunctiondef`** – Visit an async function definition node.
- **`visit_augassign`** – Visit an augmented assignment node.
- **`visit_classdef`** – Visit a class definition node.
- **`visit_functiondef`** – Visit a function definition node.
- **`visit_if`** – Visit an "if" node.
- **`visit_import`** – Visit an import node.
- **`visit_importfrom`** – Visit an "import from" node.
- **`visit_module`** – Visit a module node.

Attributes:

- **`code`** (`str`) – The module source code.
- **`current`** (`Module | Class`) – The current object being visited.
- **`docstring_options`** (`dict[str, Any]`) – The docstring parsing options.
- **`docstring_parser`** (`DocstringStyle | Parser | None`) – The docstring parser to use.
- **`extensions`** (`Extensions`) – The extensions to use when visiting the AST.
- **`filepath`** (`Path`) – The module filepath.
- **`lines_collection`** (`LinesCollection`) – A collection of source code lines.
- **`module_name`** (`str`) – The module name.
- **`modules_collection`** (`ModulesCollection`) – A collection of modules.
- **`parent`** (`Module | None`) – An optional parent for the final module object.
- **`type_guarded`** (`bool`) – Whether the current code branch is type-guarded.

### code

```
code: str = code

```

The module source code.

### current

```
current: Module | Class = None

```

The current object being visited.

### docstring_options

```
docstring_options: dict[str, Any] = docstring_options or {}

```

The docstring parsing options.

### docstring_parser

```
docstring_parser: DocstringStyle | Parser | None = (
    docstring_parser
)

```

The docstring parser to use.

### extensions

```
extensions: Extensions = extensions

```

The extensions to use when visiting the AST.

### filepath

```
filepath: Path = filepath

```

The module filepath.

### lines_collection

```
lines_collection: LinesCollection = (
    lines_collection or LinesCollection()
)

```

A collection of source code lines.

### module_name

```
module_name: str = module_name

```

The module name.

### modules_collection

```
modules_collection: ModulesCollection = (
    modules_collection or ModulesCollection()
)

```

A collection of modules.

### parent

```
parent: Module | None = parent

```

An optional parent for the final module object.

### type_guarded

```
type_guarded: bool = False

```

Whether the current code branch is type-guarded.

### decorators_to_labels

```
decorators_to_labels(
    decorators: list[Decorator],
) -> set[str]

```

Build and return a set of labels based on decorators.

Parameters:

- #### **`decorators`**

  (`list[Decorator]`) – The decorators to check.

Returns:

- `set[str]` – A set of labels.

### generic_visit

```
generic_visit(node: AST) -> None

```

Extend the base generic visit with extensions.

Parameters:

- #### **`node`**

  (`AST`) – The node to visit.

### get_base_property

```
get_base_property(
    decorators: list[Decorator], function: Function
) -> str | None

```

Check decorators to return the base property in case of setters and deleters.

Parameters:

- #### **`decorators`**

  (`list[Decorator]`) – The decorators to check.

Returns:

- **`base_property`** ( `str | None` ) – The property for which the setter/deleted is set.
- **`property_function`** ( `str | None` ) – Either "setter" or "deleter".

### get_module

```
get_module() -> Module

```

Build and return the object representing the module attached to this visitor.

This method triggers a complete visit of the module nodes.

Returns:

- `Module` – A module instance.

### handle_attribute

```
handle_attribute(
    node: Assign | AnnAssign,
    annotation: str | Expr | None = None,
) -> None

```

Handle an attribute (assignment) node.

Parameters:

- #### **`node`**

  (`Assign | AnnAssign`) – The node to visit.

- #### **`annotation`**

  (`str | Expr | None`, default: `None` ) – A potential annotation.

### handle_function

```
handle_function(
    node: AsyncFunctionDef | FunctionDef,
    labels: set | None = None,
) -> None

```

Handle a function definition node.

Parameters:

- #### **`node`**

  (`AsyncFunctionDef | FunctionDef`) – The node to visit.

- #### **`labels`**

  (`set | None`, default: `None` ) – Labels to add to the data object.

### visit

```
visit(node: AST) -> None

```

Extend the base visit with extensions.

Parameters:

- #### **`node`**

  (`AST`) – The node to visit.

### visit_annassign

```
visit_annassign(node: AnnAssign) -> None

```

Visit an annotated assignment node.

Parameters:

- #### **`node`**

  (`AnnAssign`) – The node to visit.

### visit_assign

```
visit_assign(node: Assign) -> None

```

Visit an assignment node.

Parameters:

- #### **`node`**

  (`Assign`) – The node to visit.

### visit_asyncfunctiondef

```
visit_asyncfunctiondef(node: AsyncFunctionDef) -> None

```

Visit an async function definition node.

Parameters:

- #### **`node`**

  (`AsyncFunctionDef`) – The node to visit.

### visit_augassign

```
visit_augassign(node: AugAssign) -> None

```

Visit an augmented assignment node.

Parameters:

- #### **`node`**

  (`AugAssign`) – The node to visit.

### visit_classdef

```
visit_classdef(node: ClassDef) -> None

```

Visit a class definition node.

Parameters:

- #### **`node`**

  (`ClassDef`) – The node to visit.

### visit_functiondef

```
visit_functiondef(node: FunctionDef) -> None

```

Visit a function definition node.

Parameters:

- #### **`node`**

  (`FunctionDef`) – The node to visit.

### visit_if

```
visit_if(node: If) -> None

```

Visit an "if" node.

Parameters:

- #### **`node`**

  (`If`) – The node to visit.

### visit_import

```
visit_import(node: Import) -> None

```

Visit an import node.

Parameters:

- #### **`node`**

  (`Import`) – The node to visit.

### visit_importfrom

```
visit_importfrom(node: ImportFrom) -> None

```

Visit an "import from" node.

Parameters:

- #### **`node`**

  (`ImportFrom`) – The node to visit.

### visit_module

```
visit_module(node: Module) -> None

```

Visit a module node.

Parameters:

- #### **`node`**

  (`Module`) – The node to visit.

## Inspector

```
Inspector(
    module_name: str,
    filepath: Path | None,
    extensions: Extensions,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
)

```

This class is used to instantiate an inspector.

Inspectors iterate on objects members to extract data from them.

Parameters:

- ### **`module_name`**

  (`str`) – The module name.

- ### **`filepath`**

  (`Path | None`) – The optional filepath.

- ### **`extensions`**

  (`Extensions`) – Extensions to use when inspecting.

- ### **`parent`**

  (`Module | None`, default: `None` ) – The module parent.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – The docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Methods:

- **`generic_inspect`** – Extend the base generic inspection with extensions.
- **`get_module`** – Build and return the object representing the module attached to this inspector.
- **`handle_attribute`** – Handle an attribute.
- **`handle_function`** – Handle a function.
- **`inspect`** – Extend the base inspection with extensions.
- **`inspect_attribute`** – Inspect an attribute.
- **`inspect_builtin_function`** – Inspect a builtin function.
- **`inspect_builtin_method`** – Inspect a builtin method.
- **`inspect_cached_property`** – Inspect a cached property.
- **`inspect_class`** – Inspect a class.
- **`inspect_classmethod`** – Inspect a class method.
- **`inspect_coroutine`** – Inspect a coroutine.
- **`inspect_function`** – Inspect a function.
- **`inspect_getset_descriptor`** – Inspect a get/set descriptor.
- **`inspect_method`** – Inspect a method.
- **`inspect_method_descriptor`** – Inspect a method descriptor.
- **`inspect_module`** – Inspect a module.
- **`inspect_property`** – Inspect a property.
- **`inspect_staticmethod`** – Inspect a static method.

Attributes:

- **`current`** (`Module | Class`) – The current object being inspected.
- **`docstring_options`** (`dict[str, Any]`) – The docstring parsing options.
- **`docstring_parser`** (`DocstringStyle | Parser | None`) – The docstring parser to use.
- **`extensions`** (`Extensions`) – The extensions to use when inspecting.
- **`filepath`** (`Path | None`) – The module file path.
- **`lines_collection`** (`LinesCollection`) – A collection of source code lines.
- **`module_name`** (`str`) – The module name.
- **`modules_collection`** (`ModulesCollection`) – A collection of modules.
- **`parent`** (`Module | None`) – An optional parent for the final module object.

### current

```
current: Module | Class = None

```

The current object being inspected.

### docstring_options

```
docstring_options: dict[str, Any] = docstring_options or {}

```

The docstring parsing options.

### docstring_parser

```
docstring_parser: DocstringStyle | Parser | None = (
    docstring_parser
)

```

The docstring parser to use.

### extensions

```
extensions: Extensions = extensions

```

The extensions to use when inspecting.

### filepath

```
filepath: Path | None = filepath

```

The module file path.

### lines_collection

```
lines_collection: LinesCollection = (
    lines_collection or LinesCollection()
)

```

A collection of source code lines.

### module_name

```
module_name: str = module_name

```

The module name.

### modules_collection

```
modules_collection: ModulesCollection = (
    modules_collection or ModulesCollection()
)

```

A collection of modules.

### parent

```
parent: Module | None = parent

```

An optional parent for the final module object.

### generic_inspect

```
generic_inspect(node: ObjectNode) -> None

```

Extend the base generic inspection with extensions.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### get_module

```
get_module(
    import_paths: Sequence[str | Path] | None = None,
) -> Module

```

Build and return the object representing the module attached to this inspector.

This method triggers a complete inspection of the module members.

Parameters:

- #### **`import_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – Paths replacing sys.path to import the module.

Returns:

- `Module` – A module instance.

### handle_attribute

```
handle_attribute(
    node: ObjectNode, annotation: str | Expr | None = None
) -> None

```

Handle an attribute.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

- #### **`annotation`**

  (`str | Expr | None`, default: `None` ) – A potential annotation.

### handle_function

```
handle_function(
    node: ObjectNode, labels: set | None = None
) -> None

```

Handle a function.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

- #### **`labels`**

  (`set | None`, default: `None` ) – Labels to add to the data object.

### inspect

```
inspect(node: ObjectNode) -> None

```

Extend the base inspection with extensions.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_attribute

```
inspect_attribute(node: ObjectNode) -> None

```

Inspect an attribute.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_builtin_function

```
inspect_builtin_function(node: ObjectNode) -> None

```

Inspect a builtin function.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_builtin_method

```
inspect_builtin_method(node: ObjectNode) -> None

```

Inspect a builtin method.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_cached_property

```
inspect_cached_property(node: ObjectNode) -> None

```

Inspect a cached property.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_class

```
inspect_class(node: ObjectNode) -> None

```

Inspect a class.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_classmethod

```
inspect_classmethod(node: ObjectNode) -> None

```

Inspect a class method.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_coroutine

```
inspect_coroutine(node: ObjectNode) -> None

```

Inspect a coroutine.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_function

```
inspect_function(node: ObjectNode) -> None

```

Inspect a function.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_getset_descriptor

```
inspect_getset_descriptor(node: ObjectNode) -> None

```

Inspect a get/set descriptor.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_method

```
inspect_method(node: ObjectNode) -> None

```

Inspect a method.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_method_descriptor

```
inspect_method_descriptor(node: ObjectNode) -> None

```

Inspect a method descriptor.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_module

```
inspect_module(node: ObjectNode) -> None

```

Inspect a module.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_property

```
inspect_property(node: ObjectNode) -> None

```

Inspect a property.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### inspect_staticmethod

```
inspect_staticmethod(node: ObjectNode) -> None

```

Inspect a static method.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

## **Dynamic analysis helpers**

## sys_path

```
sys_path(*paths: str | Path) -> Iterator[None]

```

Redefine `sys.path` temporarily.

Parameters:

- ### **`*paths`**

  (`str | Path`, default: `()` ) – The paths to use when importing modules. If no paths are given, keep sys.path untouched.

Yields:

- `None` – Nothing.

## dynamic_import

```
dynamic_import(
    import_path: str,
    import_paths: Sequence[str | Path] | None = None,
) -> Any

```

Dynamically import the specified object.

It can be a module, class, method, function, attribute, nested arbitrarily.

It works like this:

- for a given object path `a.b.x.y`
- it tries to import `a.b.x.y` as a module (with `importlib.import_module`)
- if it fails, it tries again with `a.b.x`, storing `y`
- then `a.b`, storing `x.y`
- then `a`, storing `b.x.y`
- if nothing worked, it raises an error
- if one of the iteration worked, it moves on, and...
- it tries to get the remaining (stored) parts with `getattr`
- for example it gets `b` from `a`, then `x` from `b`, etc.
- if a single attribute access fails, it raises an error
- if everything worked, it returns the last obtained attribute

Since the function potentially tries multiple things before succeeding, all errors happening along the way are recorded, and re-emitted with an `ImportError` when it fails, to let users know what was tried.

Important

The paths given through the `import_paths` parameter are used to temporarily patch `sys.path`: this function is therefore not thread-safe.

Important

The paths given as `import_paths` must be *correct*. The contents of `sys.path` must be consistent to what a user of the imported code would expect. Given a set of paths, if the import fails for a user, it will fail here too, with potentially unintuitive errors. If we wanted to make this function more robust, we could add a loop to "roll the window" of given paths, shifting them to the left (for example: `("/a/a", "/a/b", "/a/c/")`, then `("/a/b", "/a/c", "/a/a/")`, then `("/a/c", "/a/a", "/a/b/")`), to make sure each entry is given highest priority at least once, maintaining relative order, but we deem this unnecessary for now.

Parameters:

- ### **`import_path`**

  (`str`) – The path of the object to import.

- ### **`import_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The (sys) paths to import the object from.

Raises:

- `ModuleNotFoundError` – When the object's module could not be found.
- `ImportError` – When there was an import error or when couldn't get the attribute.

Returns:

- `Any` – The imported object.

## ObjectNode

```
ObjectNode(
    obj: Any, name: str, parent: ObjectNode | None = None
)

```

Helper class to represent an object tree.

It's not really a tree but more a backward-linked list: each node has a reference to its parent, but not to its child (for simplicity purposes and to avoid bugs).

Each node stores an object, its name, and a reference to its parent node.

Parameters:

- ### **`obj`**

  (`Any`) – A Python object.

- ### **`name`**

  (`str`) – The object's name.

- ### **`parent`**

  (`ObjectNode | None`, default: `None` ) – The object's parent node.

Attributes:

- **`alias_target_path`** (`str | None`) – Alias target path of this node, if the node should be an alias.
- **`children`** (`Sequence[ObjectNode]`) – The children of this node.
- **`exclude_specials`** (`set[str]`) – Low level attributes known to cause issues when resolving aliases.
- **`is_attribute`** (`bool`) – Whether this node's object is an attribute.
- **`is_builtin_function`** (`bool`) – Whether this node's object is a builtin function.
- **`is_builtin_method`** (`bool`) – Whether this node's object is a builtin method.
- **`is_cached_property`** (`bool`) – Whether this node's object is a cached property.
- **`is_class`** (`bool`) – Whether this node's object is a class.
- **`is_classmethod`** (`bool`) – Whether this node's object is a classmethod.
- **`is_coroutine`** (`bool`) – Whether this node's object is a coroutine.
- **`is_function`** (`bool`) – Whether this node's object is a function.
- **`is_getset_descriptor`** (`bool`) – Whether this node's object is a get/set descriptor.
- **`is_method`** (`bool`) – Whether this node's object is a method.
- **`is_method_descriptor`** (`bool`) – Whether this node's object is a method descriptor.
- **`is_module`** (`bool`) – Whether this node's object is a module.
- **`is_property`** (`bool`) – Whether this node's object is a property.
- **`is_staticmethod`** (`bool`) – Whether this node's object is a staticmethod.
- **`kind`** (`ObjectKind`) – The kind of this node.
- **`module`** (`ObjectNode`) – The object's module, fetched from the node tree.
- **`module_path`** (`str | None`) – The object's module path.
- **`name`** (`str`) – The Python object's name.
- **`obj`** (`Any`) – The actual Python object.
- **`parent`** (`ObjectNode | None`) – The parent node.
- **`parent_is_class`** (`bool`) – Whether the object of this node's parent is a class.
- **`path`** (`str`) – The object's (Python) path.

### alias_target_path

```
alias_target_path: str | None

```

Alias target path of this node, if the node should be an alias.

### children

```
children: Sequence[ObjectNode]

```

The children of this node.

### exclude_specials

```
exclude_specials: set[str] = {
    "__builtins__",
    "__loader__",
    "__spec__",
}

```

Low level attributes known to cause issues when resolving aliases.

### is_attribute

```
is_attribute: bool

```

Whether this node's object is an attribute.

### is_builtin_function

```
is_builtin_function: bool

```

Whether this node's object is a builtin function.

### is_builtin_method

```
is_builtin_method: bool

```

Whether this node's object is a builtin method.

### is_cached_property

```
is_cached_property: bool = is_cached_property

```

Whether this node's object is a cached property.

### is_class

```
is_class: bool

```

Whether this node's object is a class.

### is_classmethod

```
is_classmethod: bool

```

Whether this node's object is a classmethod.

### is_coroutine

```
is_coroutine: bool

```

Whether this node's object is a coroutine.

### is_function

```
is_function: bool

```

Whether this node's object is a function.

### is_getset_descriptor

```
is_getset_descriptor: bool

```

Whether this node's object is a get/set descriptor.

### is_method

```
is_method: bool

```

Whether this node's object is a method.

### is_method_descriptor

```
is_method_descriptor: bool

```

Whether this node's object is a method descriptor.

Built-in methods (e.g. those implemented in C/Rust) are often method descriptors, rather than normal methods.

### is_module

```
is_module: bool

```

Whether this node's object is a module.

### is_property

```
is_property: bool

```

Whether this node's object is a property.

### is_staticmethod

```
is_staticmethod: bool

```

Whether this node's object is a staticmethod.

### kind

```
kind: ObjectKind

```

The kind of this node.

### module

```
module: ObjectNode

```

The object's module, fetched from the node tree.

### module_path

```
module_path: str | None

```

The object's module path.

### name

```
name: str = name

```

The Python object's name.

### obj

```
obj: Any = obj

```

The actual Python object.

### parent

```
parent: ObjectNode | None = parent

```

The parent node.

### parent_is_class

```
parent_is_class: bool

```

Whether the object of this node's parent is a class.

### path

```
path: str

```

The object's (Python) path.

## ObjectKind

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.ObjectKind[ObjectKind]

              

              click griffe.ObjectKind href "" "griffe.ObjectKind"
            
```

Enumeration of the different runtime object kinds.

Attributes:

- **`ATTRIBUTE`** – Attributes.
- **`BUILTIN_FUNCTION`** – Built-in functions.
- **`BUILTIN_METHOD`** – Built-in methods.
- **`CACHED_PROPERTY`** – Cached properties.
- **`CLASS`** – Classes.
- **`CLASSMETHOD`** – Class methods.
- **`COROUTINE`** – Coroutines
- **`FUNCTION`** – Functions.
- **`GETSET_DESCRIPTOR`** – Get/set descriptors.
- **`METHOD`** – Methods.
- **`METHOD_DESCRIPTOR`** – Method descriptors.
- **`MODULE`** – Modules.
- **`PROPERTY`** – Properties.
- **`STATICMETHOD`** – Static methods.

### ATTRIBUTE

```
ATTRIBUTE = 'attribute'

```

Attributes.

### BUILTIN_FUNCTION

```
BUILTIN_FUNCTION = 'builtin_function'

```

Built-in functions.

### BUILTIN_METHOD

```
BUILTIN_METHOD = 'builtin_method'

```

Built-in methods.

### CACHED_PROPERTY

```
CACHED_PROPERTY = 'cached_property'

```

Cached properties.

### CLASS

```
CLASS = 'class'

```

Classes.

### CLASSMETHOD

```
CLASSMETHOD = 'classmethod'

```

Class methods.

### COROUTINE

```
COROUTINE = 'coroutine'

```

Coroutines

### FUNCTION

```
FUNCTION = 'function'

```

Functions.

### GETSET_DESCRIPTOR

```
GETSET_DESCRIPTOR = 'getset_descriptor'

```

Get/set descriptors.

### METHOD

```
METHOD = 'method'

```

Methods.

### METHOD_DESCRIPTOR

```
METHOD_DESCRIPTOR = 'method_descriptor'

```

Method descriptors.

### MODULE

```
MODULE = 'module'

```

Modules.

### PROPERTY

```
PROPERTY = 'property'

```

Properties.

### STATICMETHOD

```
STATICMETHOD = 'staticmethod'

```

Static methods.

## **Static analysis helpers**

## builtin_decorators

```
builtin_decorators = {
    "property": "property",
    "staticmethod": "staticmethod",
    "classmethod": "classmethod",
}

```

Mapping of builtin decorators to labels.

## stdlib_decorators

```
stdlib_decorators = {
    "abc.abstractmethod": {"abstractmethod"},
    "functools.cache": {"cached"},
    "functools.cached_property": {"cached", "property"},
    "cached_property.cached_property": {
        "cached",
        "property",
    },
    "functools.lru_cache": {"cached"},
    "dataclasses.dataclass": {"dataclass"},
}

```

Mapping of standard library decorators to labels.

## typing_overload

```
typing_overload = {
    "typing.overload",
    "typing_extensions.overload",
}

```

Set of recognized typing overload decorators.

When such a decorator is found, the decorated function becomes an overload.

## ast_kind

```
ast_kind(node: AST) -> str

```

Return the kind of an AST node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Returns:

- `str` – The node kind.

## ast_children

```
ast_children(node: AST) -> Iterator[AST]

```

Return the children of an AST node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Yields:

- `AST` – The node children.

## ast_previous_siblings

```
ast_previous_siblings(node: AST) -> Iterator[AST]

```

Return the previous siblings of this node, starting from the closest.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Yields:

- `AST` – The previous siblings.

## ast_next_siblings

```
ast_next_siblings(node: AST) -> Iterator[AST]

```

Return the next siblings of this node, starting from the closest.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Yields:

- `AST` – The next siblings.

## ast_siblings

```
ast_siblings(node: AST) -> Iterator[AST]

```

Return the siblings of this node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Yields:

- `AST` – The siblings.

## ast_previous

```
ast_previous(node: AST) -> AST

```

Return the previous sibling of this node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Raises:

- `LastNodeError` – When the node does not have previous siblings.

Returns:

- `AST` – The sibling.

## ast_next

```
ast_next(node: AST) -> AST

```

Return the next sibling of this node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Raises:

- `LastNodeError` – When the node does not have next siblings.

Returns:

- `AST` – The sibling.

## ast_first_child

```
ast_first_child(node: AST) -> AST

```

Return the first child of this node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Raises:

- `LastNodeError` – When the node does not have children.

Returns:

- `AST` – The child.

## ast_last_child

```
ast_last_child(node: AST) -> AST

```

Return the lasts child of this node.

Parameters:

- ### **`node`**

  (`AST`) – The AST node.

Raises:

- `LastNodeError` – When the node does not have children.

Returns:

- `AST` – The child.

## get_docstring

```
get_docstring(
    node: AST, *, strict: bool = False
) -> tuple[str | None, int | None, int | None]

```

Extract a docstring.

Parameters:

- ### **`node`**

  (`AST`) – The node to extract the docstring from.

- ### **`strict`**

  (`bool`, default: `False` ) – Whether to skip searching the body (functions).

Returns:

- `tuple[str | None, int | None, int | None]` – A tuple with the value and line numbers of the docstring.

## get_name

```
get_name(node: AST) -> str

```

Extract name from an assignment node.

Parameters:

- ### **`node`**

  (`AST`) – The node to extract names from.

Returns:

- `str` – A list of names.

## get_names

```
get_names(node: AST) -> list[str]

```

Extract names from an assignment node.

Parameters:

- ### **`node`**

  (`AST`) – The node to extract names from.

Returns:

- `list[str]` – A list of names.

## get_instance_names

```
get_instance_names(node: AST) -> list[str]

```

Extract names from an assignment node, only for instance attributes.

Parameters:

- ### **`node`**

  (`AST`) – The node to extract names from.

Returns:

- `list[str]` – A list of names.

## get\_\_all\_\_

```
get__all__(
    node: Assign | AnnAssign | AugAssign, parent: Module
) -> list[str | ExprName]

```

Get the values declared in `__all__`.

Parameters:

- ### **`node`**

  (`Assign | AnnAssign | AugAssign`) – The assignment node.

- ### **`parent`**

  (`Module`) – The parent module.

Returns:

- `list[str | ExprName]` – A set of names.

## safe_get\_\_all\_\_

```
safe_get__all__(
    node: Assign | AnnAssign | AugAssign,
    parent: Module,
    log_level: LogLevel = debug,
) -> list[str | ExprName]

```

Safely (no exception) extract values in `__all__`.

Parameters:

- ### **`node`**

  (`Assign | AnnAssign | AugAssign`) – The __all__ assignment node.

- ### **`parent`**

  (`Module`) – The parent used to resolve the names.

- ### **`log_level`**

  (`LogLevel`, default: `debug` ) – Log level to use to log a message.

Returns:

- `list[str | ExprName]` – A list of strings or resolvable names.

## relative_to_absolute

```
relative_to_absolute(
    node: ImportFrom, name: alias, current_module: Module
) -> str

```

Convert a relative import path to an absolute one.

Parameters:

- ### **`node`**

  (`ImportFrom`) – The "from ... import ..." AST node.

- ### **`name`**

  (`alias`) – The imported name.

- ### **`current_module`**

  (`Module`) – The module in which the import happens.

Returns:

- `str` – The absolute import path.

## get_parameters

```
get_parameters(node: arguments) -> ParametersType

```

## get_value

```
get_value(node: AST | None) -> str | None

```

Get the string representation of a node.

Parameters:

- ### **`node`**

  (`AST | None`) – The node to represent.

Returns:

- `str | None` – The representing code for the node.

## safe_get_value

```
safe_get_value(
    node: AST | None, filepath: str | Path | None = None
) -> str | None

```

Safely (no exception) get the string representation of a node.

Parameters:

- ### **`node`**

  (`AST | None`) – The node to represent.

- ### **`filepath`**

  (`str | Path | None`, default: `None` ) – An optional filepath from where the node comes.

Returns:

- `str | None` – The representing code for the node.

## **Deprecated API**

## ExportedName

```
ExportedName(name: str, parent: Module)

```

Deprecated. An intermediate class to store names.

The get\_\_all\_\_ function now returns instances of ExprName instead.

Attributes:

- **`name`** (`str`) – The exported name.
- **`parent`** (`Module`) – The parent module.

### name

```
name: str

```

The exported name.

### parent

```
parent: Module

```

The parent module.

# API checks

## find_breaking_changes

```
find_breaking_changes(
    old_obj: Object | Alias, new_obj: Object | Alias
) -> Iterator[Breakage]

```

Find breaking changes between two versions of the same API.

The function will iterate recursively on all objects and yield breaking changes with detailed information.

Parameters:

- ### **`old_obj`**

  (`Object | Alias`) – The old version of an object.

- ### **`new_obj`**

  (`Object | Alias`) – The new version of an object.

Yields:

- `Breakage` – Breaking changes.

Examples:

```
>>> import sys, griffe
>>> new = griffe.load("pkg")
>>> old = griffe.load_git("pkg", "1.2.3")
>>> for breakage in griffe.find_breaking_changes(old, new)
...     print(breakage.explain(style=style), file=sys.stderr)

```

## ExplanationStyle

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.ExplanationStyle[ExplanationStyle]

              

              click griffe.ExplanationStyle href "" "griffe.ExplanationStyle"
            
```

Enumeration of the possible styles for explanations.

Attributes:

- **`GITHUB`** – Explanation as GitHub workflow commands warnings, adapted to CI.
- **`MARKDOWN`** – Explanations in Markdown, adapted to changelogs.
- **`ONE_LINE`** – Explanations on one-line.
- **`VERBOSE`** – Explanations on multiple lines.

### GITHUB

```
GITHUB = 'github'

```

Explanation as GitHub workflow commands warnings, adapted to CI.

### MARKDOWN

```
MARKDOWN = 'markdown'

```

Explanations in Markdown, adapted to changelogs.

### ONE_LINE

```
ONE_LINE = 'oneline'

```

Explanations on one-line.

### VERBOSE

```
VERBOSE = 'verbose'

```

Explanations on multiple lines.

## Breakage

```
Breakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Breakages can explain what broke from a version to another.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## BreakageKind

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.BreakageKind[BreakageKind]

              

              click griffe.BreakageKind href "" "griffe.BreakageKind"
            
```

Enumeration of the possible API breakages.

Attributes:

- **`ATTRIBUTE_CHANGED_TYPE`** – Attribute types are incompatible
- **`ATTRIBUTE_CHANGED_VALUE`** – Attribute value was changed
- **`CLASS_REMOVED_BASE`** – Base class was removed
- **`OBJECT_CHANGED_KIND`** – Public object points to a different kind of object
- **`OBJECT_REMOVED`** – Public object was removed
- **`PARAMETER_ADDED_REQUIRED`** – Parameter was added as required
- **`PARAMETER_CHANGED_DEFAULT`** – Parameter default was changed
- **`PARAMETER_CHANGED_KIND`** – Parameter kind was changed
- **`PARAMETER_CHANGED_REQUIRED`** – Parameter is now required
- **`PARAMETER_MOVED`** – Positional parameter was moved
- **`PARAMETER_REMOVED`** – Parameter was removed
- **`RETURN_CHANGED_TYPE`** – Return types are incompatible

### ATTRIBUTE_CHANGED_TYPE

```
ATTRIBUTE_CHANGED_TYPE = 'Attribute types are incompatible'

```

Attribute types are incompatible

### ATTRIBUTE_CHANGED_VALUE

```
ATTRIBUTE_CHANGED_VALUE = 'Attribute value was changed'

```

Attribute value was changed

### CLASS_REMOVED_BASE

```
CLASS_REMOVED_BASE = 'Base class was removed'

```

Base class was removed

### OBJECT_CHANGED_KIND

```
OBJECT_CHANGED_KIND = (
    "Public object points to a different kind of object"
)

```

Public object points to a different kind of object

### OBJECT_REMOVED

```
OBJECT_REMOVED = 'Public object was removed'

```

Public object was removed

### PARAMETER_ADDED_REQUIRED

```
PARAMETER_ADDED_REQUIRED = "Parameter was added as required"

```

Parameter was added as required

### PARAMETER_CHANGED_DEFAULT

```
PARAMETER_CHANGED_DEFAULT = 'Parameter default was changed'

```

Parameter default was changed

### PARAMETER_CHANGED_KIND

```
PARAMETER_CHANGED_KIND = 'Parameter kind was changed'

```

Parameter kind was changed

### PARAMETER_CHANGED_REQUIRED

```
PARAMETER_CHANGED_REQUIRED = 'Parameter is now required'

```

Parameter is now required

### PARAMETER_MOVED

```
PARAMETER_MOVED = 'Positional parameter was moved'

```

Positional parameter was moved

### PARAMETER_REMOVED

```
PARAMETER_REMOVED = 'Parameter was removed'

```

Parameter was removed

### RETURN_CHANGED_TYPE

```
RETURN_CHANGED_TYPE = 'Return types are incompatible'

```

Return types are incompatible

## AttributeChangedTypeBreakage

```
AttributeChangedTypeBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.AttributeChangedTypeBreakage[AttributeChangedTypeBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.AttributeChangedTypeBreakage
                


              click griffe.AttributeChangedTypeBreakage href "" "griffe.AttributeChangedTypeBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for attributes whose type changed.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = ATTRIBUTE_CHANGED_TYPE

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## AttributeChangedValueBreakage

```
AttributeChangedValueBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.AttributeChangedValueBreakage[AttributeChangedValueBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.AttributeChangedValueBreakage
                


              click griffe.AttributeChangedValueBreakage href "" "griffe.AttributeChangedValueBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for attributes whose value changed.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = ATTRIBUTE_CHANGED_VALUE

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ClassRemovedBaseBreakage

```
ClassRemovedBaseBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ClassRemovedBaseBreakage[ClassRemovedBaseBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ClassRemovedBaseBreakage
                


              click griffe.ClassRemovedBaseBreakage href "" "griffe.ClassRemovedBaseBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for removed base classes.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = CLASS_REMOVED_BASE

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ObjectChangedKindBreakage

```
ObjectChangedKindBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ObjectChangedKindBreakage[ObjectChangedKindBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ObjectChangedKindBreakage
                


              click griffe.ObjectChangedKindBreakage href "" "griffe.ObjectChangedKindBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for objects whose kind changed.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = OBJECT_CHANGED_KIND

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ObjectRemovedBreakage

```
ObjectRemovedBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ObjectRemovedBreakage[ObjectRemovedBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ObjectRemovedBreakage
                


              click griffe.ObjectRemovedBreakage href "" "griffe.ObjectRemovedBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for removed objects.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = OBJECT_REMOVED

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterAddedRequiredBreakage

```
ParameterAddedRequiredBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterAddedRequiredBreakage[ParameterAddedRequiredBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterAddedRequiredBreakage
                


              click griffe.ParameterAddedRequiredBreakage href "" "griffe.ParameterAddedRequiredBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for new parameters added as required.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_ADDED_REQUIRED

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterChangedDefaultBreakage

```
ParameterChangedDefaultBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterChangedDefaultBreakage[ParameterChangedDefaultBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterChangedDefaultBreakage
                


              click griffe.ParameterChangedDefaultBreakage href "" "griffe.ParameterChangedDefaultBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for parameters whose default value changed.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_CHANGED_DEFAULT

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterChangedKindBreakage

```
ParameterChangedKindBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterChangedKindBreakage[ParameterChangedKindBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterChangedKindBreakage
                


              click griffe.ParameterChangedKindBreakage href "" "griffe.ParameterChangedKindBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for parameters whose kind changed.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_CHANGED_KIND

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterChangedRequiredBreakage

```
ParameterChangedRequiredBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterChangedRequiredBreakage[ParameterChangedRequiredBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterChangedRequiredBreakage
                


              click griffe.ParameterChangedRequiredBreakage href "" "griffe.ParameterChangedRequiredBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for parameters which became required.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_CHANGED_REQUIRED

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterMovedBreakage

```
ParameterMovedBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterMovedBreakage[ParameterMovedBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterMovedBreakage
                


              click griffe.ParameterMovedBreakage href "" "griffe.ParameterMovedBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for moved parameters.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_MOVED

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ParameterRemovedBreakage

```
ParameterRemovedBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ParameterRemovedBreakage[ParameterRemovedBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ParameterRemovedBreakage
                


              click griffe.ParameterRemovedBreakage href "" "griffe.ParameterRemovedBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for removed parameters.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = PARAMETER_REMOVED

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

## ReturnChangedTypeBreakage

```
ReturnChangedTypeBreakage(
    obj: Object,
    old_value: Any,
    new_value: Any,
    details: str = "",
)

```

Bases: `Breakage`

```

              flowchart TD
              griffe.ReturnChangedTypeBreakage[ReturnChangedTypeBreakage]
              _griffe.diff.Breakage[Breakage]

                              _griffe.diff.Breakage --> griffe.ReturnChangedTypeBreakage
                


              click griffe.ReturnChangedTypeBreakage href "" "griffe.ReturnChangedTypeBreakage"
              click _griffe.diff.Breakage href "" "_griffe.diff.Breakage"
            
```

Specific breakage class for return values which changed type.

Parameters:

- ### **`obj`**

  (`Object`) – The object related to the breakage.

- ### **`old_value`**

  (`Any`) – The old value.

- ### **`new_value`**

  (`Any`) – The new, incompatible value.

- ### **`details`**

  (`str`, default: `''` ) – Some details about the breakage.

Methods:

- **`as_dict`** – Return this object's data as a dictionary.
- **`explain`** – Explain the breakage by showing old and new value.

Attributes:

- **`details`** – Some details about the breakage.
- **`kind`** (`BreakageKind`) – The kind of breakage.
- **`new_value`** – The new, incompatible value.
- **`obj`** – The object related to the breakage.
- **`old_value`** – The old value.

### details

```
details = details

```

Some details about the breakage.

### kind

```
kind: BreakageKind = RETURN_CHANGED_TYPE

```

The kind of breakage.

### new_value

```
new_value = new_value

```

The new, incompatible value.

### obj

```
obj = obj

```

The object related to the breakage.

### old_value

```
old_value = old_value

```

The old value.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### explain

```
explain(style: ExplanationStyle = ONE_LINE) -> str

```

Explain the breakage by showing old and new value.

Parameters:

- #### **`style`**

  (`ExplanationStyle`, default: `ONE_LINE` ) – The explanation style to use.

Returns:

- `str` – An explanation.

# CLI entrypoints

## **Main API**

## main

```
main(args: list[str] | None = None) -> int

```

Run the main program.

This function is executed when you type `griffe` or `python -m griffe`.

Parameters:

- ### **`args`**

  (`list[str] | None`, default: `None` ) – Arguments passed from the command line.

Returns:

- `int` – An exit code.

## check

```
check(
    package: str | Path,
    against: str | None = None,
    against_path: str | Path | None = None,
    *,
    base_ref: str | None = None,
    extensions: Sequence[
        str | dict[str, Any] | Extension | type[Extension]
    ]
    | None = None,
    search_paths: Sequence[str | Path] | None = None,
    append_sys_path: bool = False,
    find_stubs_package: bool = False,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    verbose: bool = False,
    color: bool | None = None,
    style: str | ExplanationStyle | None = None,
) -> int

```

Check for API breaking changes in two versions of the same package.

Parameters:

- ### **`package`**

  (`str | Path`) – The package to load and check.

- ### **`against`**

  (`str | None`, default: `None` ) – Older Git reference (commit, branch, tag) to check against.

- ### **`against_path`**

  (`str | Path | None`, default: `None` ) – Path when the "against" reference is checked out.

- ### **`base_ref`**

  (`str | None`, default: `None` ) – Git reference (commit, branch, tag) to check.

- ### **`extensions`**

  (`Sequence[str | dict[str, Any] | Extension | type[Extension]] | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into.

- ### **`append_sys_path`**

  (`bool`, default: `False` ) – Whether to append the contents of sys.path to the search paths.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`force_inspection`**

  (`bool`, default: `False` ) – Whether to force using dynamic analysis when loading data.

- ### **`verbose`**

  (`bool`, default: `False` ) – Use a verbose output.

Returns:

- `int` – 0 for success, 1 for failure.

## dump

```
dump(
    packages: Sequence[str],
    *,
    output: str | IO | None = None,
    full: bool = False,
    docstring_parser: Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    extensions: Sequence[
        str | dict[str, Any] | Extension | type[Extension]
    ]
    | None = None,
    resolve_aliases: bool = False,
    resolve_implicit: bool = False,
    resolve_external: bool | None = None,
    search_paths: Sequence[str | Path] | None = None,
    find_stubs_package: bool = False,
    append_sys_path: bool = False,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    stats: bool = False,
) -> int

```

Load packages data and dump it as JSON.

Parameters:

- ### **`packages`**

  (`Sequence[str]`) – The packages to load and dump.

- ### **`output`**

  (`str | IO | None`, default: `None` ) – Where to output the JSON-serialized data.

- ### **`full`**

  (`bool`, default: `False` ) – Whether to output full or minimal data.

- ### **`docstring_parser`**

  (`Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases (indirect objects references).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – Whether to resolve every alias or only the explicitly exported ones.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to load additional, unspecified modules to resolve aliases. Default is to resolve only from one module to its private sibling (ast -> \_ast).

- ### **`extensions`**

  (`Sequence[str | dict[str, Any] | Extension | type[Extension]] | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into.

- ### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only packages. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

- ### **`append_sys_path`**

  (`bool`, default: `False` ) – Whether to append the contents of sys.path to the search paths.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`force_inspection`**

  (`bool`, default: `False` ) – Whether to force using dynamic analysis when loading data.

- ### **`stats`**

  (`bool`, default: `False` ) – Whether to compute and log stats about loading.

Returns:

- `int` – 0 for success, 1 for failure.

## **Advanced API**

## get_parser

```
get_parser() -> ArgumentParser

```

Return the CLI argument parser.

Returns:

- `ArgumentParser` – An argparse parser.

# Docstrings

Docstrings are [parsed](parsers/) and the extracted information is structured in [models](models/).

# Exceptions

## GriffeError

Bases: `Exception`

```

              flowchart TD
              griffe.GriffeError[GriffeError]

              

              click griffe.GriffeError href "" "griffe.GriffeError"
            
```

The base exception for all Griffe errors.

## LoadingError

Bases: `GriffeError`

```

              flowchart TD
              griffe.LoadingError[LoadingError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.LoadingError
                


              click griffe.LoadingError href "" "griffe.LoadingError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

The base exception for all Griffe errors.

## NameResolutionError

Bases: `GriffeError`

```

              flowchart TD
              griffe.NameResolutionError[NameResolutionError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.NameResolutionError
                


              click griffe.NameResolutionError href "" "griffe.NameResolutionError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception for names that cannot be resolved in a object scope.

## UnhandledEditableModuleError

Bases: `GriffeError`

```

              flowchart TD
              griffe.UnhandledEditableModuleError[UnhandledEditableModuleError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.UnhandledEditableModuleError
                


              click griffe.UnhandledEditableModuleError href "" "griffe.UnhandledEditableModuleError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception for unhandled editables modules, when searching modules.

## UnimportableModuleError

Bases: `GriffeError`

```

              flowchart TD
              griffe.UnimportableModuleError[UnimportableModuleError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.UnimportableModuleError
                


              click griffe.UnimportableModuleError href "" "griffe.UnimportableModuleError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception for modules that cannot be imported.

## AliasResolutionError

```
AliasResolutionError(alias: Alias)

```

Bases: `GriffeError`

```

              flowchart TD
              griffe.AliasResolutionError[AliasResolutionError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.AliasResolutionError
                


              click griffe.AliasResolutionError href "" "griffe.AliasResolutionError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception for alias that cannot be resolved.

Parameters:

- ### **`alias`**

  (`Alias`) – The alias that could not be resolved.

Attributes:

- **`alias`** (`Alias`) – The alias that triggered the error.

### alias

```
alias: Alias = alias

```

The alias that triggered the error.

## CyclicAliasError

```
CyclicAliasError(chain: list[str])

```

Bases: `GriffeError`

```

              flowchart TD
              griffe.CyclicAliasError[CyclicAliasError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.CyclicAliasError
                


              click griffe.CyclicAliasError href "" "griffe.CyclicAliasError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised when a cycle is detected in aliases.

Parameters:

- ### **`chain`**

  (`list[str]`) – The cyclic chain of items (such as target path).

Attributes:

- **`chain`** (`list[str]`) – The chain of aliases that created the cycle.

### chain

```
chain: list[str] = chain

```

The chain of aliases that created the cycle.

## LastNodeError

Bases: `GriffeError`

```

              flowchart TD
              griffe.LastNodeError[LastNodeError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.LastNodeError
                


              click griffe.LastNodeError href "" "griffe.LastNodeError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised when trying to access a next or previous node.

## RootNodeError

Bases: `GriffeError`

```

              flowchart TD
              griffe.RootNodeError[RootNodeError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.RootNodeError
                


              click griffe.RootNodeError href "" "griffe.RootNodeError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised when trying to use siblings properties on a root node.

## BuiltinModuleError

Bases: `GriffeError`

```

              flowchart TD
              griffe.BuiltinModuleError[BuiltinModuleError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.BuiltinModuleError
                


              click griffe.BuiltinModuleError href "" "griffe.BuiltinModuleError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised when trying to access the filepath of a builtin module.

## ExtensionError

Bases: `GriffeError`

```

              flowchart TD
              griffe.ExtensionError[ExtensionError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.ExtensionError
                


              click griffe.ExtensionError href "" "griffe.ExtensionError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Base class for errors raised by extensions.

## ExtensionNotLoadedError

Bases: `ExtensionError`

```

              flowchart TD
              griffe.ExtensionNotLoadedError[ExtensionNotLoadedError]
              _griffe.exceptions.ExtensionError[ExtensionError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.ExtensionError --> griffe.ExtensionNotLoadedError
                                _griffe.exceptions.GriffeError --> _griffe.exceptions.ExtensionError
                



              click griffe.ExtensionNotLoadedError href "" "griffe.ExtensionNotLoadedError"
              click _griffe.exceptions.ExtensionError href "" "_griffe.exceptions.ExtensionError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised when an extension could not be loaded.

## GitError

Bases: `GriffeError`

```

              flowchart TD
              griffe.GitError[GitError]
              _griffe.exceptions.GriffeError[GriffeError]

                              _griffe.exceptions.GriffeError --> griffe.GitError
                


              click griffe.GitError href "" "griffe.GitError"
              click _griffe.exceptions.GriffeError href "" "_griffe.exceptions.GriffeError"
            
```

Exception raised for errors related to Git.

# Expressions

## **Helpers**

## get_annotation

```
get_annotation = partial(get_expression, parse_strings=None)

```

## get_base_class

```
get_base_class = partial(
    get_expression, parse_strings=False
)

```

## get_condition

```
get_condition = partial(get_expression, parse_strings=False)

```

## get_expression

```
get_expression(
    node: AST | None,
    parent: Module | Class,
    *,
    parse_strings: bool | None = None,
) -> Expr | None

```

Build an expression from an AST.

Parameters:

- ### **`node`**

  (`AST | None`) – The annotation node.

- ### **`parent`**

  (`Module | Class`) – The parent used to resolve the name.

- ### **`parse_strings`**

  (`bool | None`, default: `None` ) – Whether to try and parse strings as type annotations.

Returns:

- `Expr | None` – A string or resovable name or expression.

## safe_get_annotation

```
safe_get_annotation = partial(
    safe_get_expression,
    parse_strings=None,
    msg_format=_msg_format % "annotation",
)

```

## safe_get_base_class

```
safe_get_base_class = partial(
    safe_get_expression,
    parse_strings=False,
    msg_format=_msg_format % "base class",
)

```

## safe_get_condition

```
safe_get_condition = partial(
    safe_get_expression,
    parse_strings=False,
    msg_format=_msg_format % "condition",
)

```

## safe_get_expression

```
safe_get_expression(
    node: AST | None,
    parent: Module | Class,
    *,
    parse_strings: bool | None = None,
    log_level: LogLevel | None = error,
    msg_format: str = "{path}:{lineno}: Failed to get expression from {node_class}: {error}",
) -> Expr | None

```

Safely (no exception) build a resolvable annotation.

Parameters:

- ### **`node`**

  (`AST | None`) – The annotation node.

- ### **`parent`**

  (`Module | Class`) – The parent used to resolve the name.

- ### **`parse_strings`**

  (`bool | None`, default: `None` ) – Whether to try and parse strings as type annotations.

- ### **`log_level`**

  (`LogLevel | None`, default: `error` ) – Log level to use to log a message. None to disable logging.

- ### **`msg_format`**

  (`str`, default: `'{path}:{lineno}: Failed to get expression from {node_class}: {error}'` ) – A format string for the log message. Available placeholders: path, lineno, node, error.

Returns:

- `Expr | None` – A string or resovable name or expression.

## **Expression nodes**

## Expr

```
Expr()

```

Base class for expressions.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprAttribute

```
ExprAttribute(values: list[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprAttribute[ExprAttribute]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprAttribute
                


              click griffe.ExprAttribute href "" "griffe.ExprAttribute"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Attributes like `a.b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`append`** – Append a name to this attribute.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – The canonical path of this attribute.
- **`classname`** (`str`) – The expression class name.
- **`first`** (`str | Expr`) – The first part of this attribute (on the left).
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`last`** (`ExprName`) – The last part of this attribute (on the right).
- **`path`** (`str`) – The path of this attribute.
- **`values`** (`list[str | Expr]`) – The different parts of the dotted chain.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

The canonical path of this attribute.

### classname

```
classname: str

```

The expression class name.

### first

```
first: str | Expr

```

The first part of this attribute (on the left).

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### last

```
last: ExprName

```

The last part of this attribute (on the right).

### path

```
path: str

```

The path of this attribute.

### values

```
values: list[str | Expr]

```

The different parts of the dotted chain.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### append

```
append(value: ExprName) -> None

```

Append a name to this attribute.

Parameters:

- #### **`value`**

  (`ExprName`) – The expression name to append.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> ExprName | ExprAttribute

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprBinOp

```
ExprBinOp(
    left: str | Expr, operator: str, right: str | Expr
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprBinOp[ExprBinOp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprBinOp
                


              click griffe.ExprBinOp href "" "griffe.ExprBinOp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Binary operations like `a + b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`left`** (`str | Expr`) – Left part.
- **`operator`** (`str`) – Binary operator.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`right`** (`str | Expr`) – Right part.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### left

```
left: str | Expr

```

Left part.

### operator

```
operator: str

```

Binary operator.

### path

```
path: str

```

Path of the expressed name/attribute.

### right

```
right: str | Expr

```

Right part.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprBoolOp

```
ExprBoolOp(operator: str, values: Sequence[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprBoolOp[ExprBoolOp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprBoolOp
                


              click griffe.ExprBoolOp href "" "griffe.ExprBoolOp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Boolean operations like `a or b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`operator`** (`str`) – Boolean operator.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`values`** (`Sequence[str | Expr]`) – Operands.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### operator

```
operator: str

```

Boolean operator.

### path

```
path: str

```

Path of the expressed name/attribute.

### values

```
values: Sequence[str | Expr]

```

Operands.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprCall

```
ExprCall(function: Expr, arguments: Sequence[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprCall[ExprCall]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprCall
                


              click griffe.ExprCall href "" "griffe.ExprCall"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Calls like `f()`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`arguments`** (`Sequence[str | Expr]`) – Passed arguments.
- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – The canonical path of this subscript's left part.
- **`classname`** (`str`) – The expression class name.
- **`function`** (`Expr`) – Function called.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### arguments

```
arguments: Sequence[str | Expr]

```

Passed arguments.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

The canonical path of this subscript's left part.

### classname

```
classname: str

```

The expression class name.

### function

```
function: Expr

```

Function called.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprCompare

```
ExprCompare(
    left: str | Expr,
    operators: Sequence[str],
    comparators: Sequence[str | Expr],
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprCompare[ExprCompare]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprCompare
                


              click griffe.ExprCompare href "" "griffe.ExprCompare"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Comparisons like `a > b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`comparators`** (`Sequence[str | Expr]`) – Things compared.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`left`** (`str | Expr`) – Left part.
- **`operators`** (`Sequence[str]`) – Comparison operators.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### comparators

```
comparators: Sequence[str | Expr]

```

Things compared.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### left

```
left: str | Expr

```

Left part.

### operators

```
operators: Sequence[str]

```

Comparison operators.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprComprehension

```
ExprComprehension(
    target: str | Expr,
    iterable: str | Expr,
    conditions: Sequence[str | Expr],
    is_async: bool = False,
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprComprehension[ExprComprehension]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprComprehension
                


              click griffe.ExprComprehension href "" "griffe.ExprComprehension"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Comprehensions like `a for b in c if d`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`conditions`** (`Sequence[str | Expr]`) – Conditions to include the target in the result.
- **`is_async`** (`bool`) – Async comprehension or not.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`iterable`** (`str | Expr`) – Value iterated on.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`target`** (`str | Expr`) – Comprehension target (value added to the result).

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### conditions

```
conditions: Sequence[str | Expr]

```

Conditions to include the target in the result.

### is_async

```
is_async: bool = False

```

Async comprehension or not.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### iterable

```
iterable: str | Expr

```

Value iterated on.

### path

```
path: str

```

Path of the expressed name/attribute.

### target

```
target: str | Expr

```

Comprehension target (value added to the result).

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprConstant

```
ExprConstant(value: str)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprConstant[ExprConstant]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprConstant
                


              click griffe.ExprConstant href "" "griffe.ExprConstant"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Constants like `"a"` or `1`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str`) – Constant value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str

```

Constant value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprDict

```
ExprDict(
    keys: Sequence[str | Expr | None],
    values: Sequence[str | Expr],
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprDict[ExprDict]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprDict
                


              click griffe.ExprDict href "" "griffe.ExprDict"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Dictionaries like `{"a": 0}`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`keys`** (`Sequence[str | Expr | None]`) – Dict keys.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`values`** (`Sequence[str | Expr]`) – Dict values.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### keys

```
keys: Sequence[str | Expr | None]

```

Dict keys.

### path

```
path: str

```

Path of the expressed name/attribute.

### values

```
values: Sequence[str | Expr]

```

Dict values.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprDictComp

```
ExprDictComp(
    key: str | Expr,
    value: str | Expr,
    generators: Sequence[Expr],
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprDictComp[ExprDictComp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprDictComp
                


              click griffe.ExprDictComp href "" "griffe.ExprDictComp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Dict comprehensions like `{k: v for k, v in a}`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`generators`** (`Sequence[Expr]`) – Generators iterated on.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`key`** (`str | Expr`) – Target key.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr`) – Target value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### generators

```
generators: Sequence[Expr]

```

Generators iterated on.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### key

```
key: str | Expr

```

Target key.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr

```

Target value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprExtSlice

```
ExprExtSlice(dims: Sequence[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprExtSlice[ExprExtSlice]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprExtSlice
                


              click griffe.ExprExtSlice href "" "griffe.ExprExtSlice"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Extended slice like `a[x:y, z]`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`dims`** (`Sequence[str | Expr]`) – Dims.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### dims

```
dims: Sequence[str | Expr]

```

Dims.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprFormatted

```
ExprFormatted(value: str | Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprFormatted[ExprFormatted]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprFormatted
                


              click griffe.ExprFormatted href "" "griffe.ExprFormatted"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Formatted string like `{1 + 1}`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr`) – Formatted value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr

```

Formatted value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprGeneratorExp

```
ExprGeneratorExp(
    element: str | Expr, generators: Sequence[Expr]
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprGeneratorExp[ExprGeneratorExp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprGeneratorExp
                


              click griffe.ExprGeneratorExp href "" "griffe.ExprGeneratorExp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Generator expressions like `a for b in c for d in e`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`element`** (`str | Expr`) – Yielded element.
- **`generators`** (`Sequence[Expr]`) – Generators iterated on.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### element

```
element: str | Expr

```

Yielded element.

### generators

```
generators: Sequence[Expr]

```

Generators iterated on.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprIfExp

```
ExprIfExp(
    body: str | Expr, test: str | Expr, orelse: str | Expr
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprIfExp[ExprIfExp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprIfExp
                


              click griffe.ExprIfExp href "" "griffe.ExprIfExp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Conditions like `a if b else c`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`body`** (`str | Expr`) – Value if test.
- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`orelse`** (`str | Expr`) – Other expression.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`test`** (`str | Expr`) – Condition.

### body

```
body: str | Expr

```

Value if test.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### orelse

```
orelse: str | Expr

```

Other expression.

### path

```
path: str

```

Path of the expressed name/attribute.

### test

```
test: str | Expr

```

Condition.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprJoinedStr

```
ExprJoinedStr(values: Sequence[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprJoinedStr[ExprJoinedStr]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprJoinedStr
                


              click griffe.ExprJoinedStr href "" "griffe.ExprJoinedStr"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Joined strings like `f"a {b} c"`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`values`** (`Sequence[str | Expr]`) – Joined values.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### values

```
values: Sequence[str | Expr]

```

Joined values.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprKeyword

```
ExprKeyword(
    name: str,
    value: str | Expr,
    function: Expr | None = None,
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprKeyword[ExprKeyword]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprKeyword
                


              click griffe.ExprKeyword href "" "griffe.ExprKeyword"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Keyword arguments like `a=b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed keyword.
- **`classname`** (`str`) – The expression class name.
- **`function`** (`Expr | None`) – Expression referencing the function called with this parameter.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`name`** (`str`) – Name.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr`) – Value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed keyword.

### classname

```
classname: str

```

The expression class name.

### function

```
function: Expr | None = None

```

Expression referencing the function called with this parameter.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### name

```
name: str

```

Name.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr

```

Value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprVarPositional

```
ExprVarPositional(value: Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprVarPositional[ExprVarPositional]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprVarPositional
                


              click griffe.ExprVarPositional href "" "griffe.ExprVarPositional"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Variadic positional parameters like `*args`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`Expr`) – Starred value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: Expr

```

Starred value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprVarKeyword

```
ExprVarKeyword(value: Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprVarKeyword[ExprVarKeyword]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprVarKeyword
                


              click griffe.ExprVarKeyword href "" "griffe.ExprVarKeyword"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Variadic keyword parameters like `**kwargs`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`Expr`) – Double-starred value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: Expr

```

Double-starred value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprLambda

```
ExprLambda(
    parameters: Sequence[ExprParameter], body: str | Expr
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprLambda[ExprLambda]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprLambda
                


              click griffe.ExprLambda href "" "griffe.ExprLambda"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Lambda expressions like `lambda a: a.b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`body`** (`str | Expr`) – Lambda's body.
- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`parameters`** (`Sequence[ExprParameter]`) – Lambda's parameters.
- **`path`** (`str`) – Path of the expressed name/attribute.

### body

```
body: str | Expr

```

Lambda's body.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### parameters

```
parameters: Sequence[ExprParameter]

```

Lambda's parameters.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprList

```
ExprList(elements: Sequence[Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprList[ExprList]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprList
                


              click griffe.ExprList href "" "griffe.ExprList"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Lists like `[0, 1, 2]`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`elements`** (`Sequence[Expr]`) – List elements.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### elements

```
elements: Sequence[Expr]

```

List elements.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprListComp

```
ExprListComp(
    element: str | Expr, generators: Sequence[Expr]
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprListComp[ExprListComp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprListComp
                


              click griffe.ExprListComp href "" "griffe.ExprListComp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

List comprehensions like `[a for b in c]`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`element`** (`str | Expr`) – Target value.
- **`generators`** (`Sequence[Expr]`) – Generators iterated on.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### element

```
element: str | Expr

```

Target value.

### generators

```
generators: Sequence[Expr]

```

Generators iterated on.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprName

```
ExprName(
    name: str,
    parent: str | ExprName | Module | Class | None = None,
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprName[ExprName]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprName
                


              click griffe.ExprName href "" "griffe.ExprName"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

This class represents a Python object identified by a name in a given scope.

Methods:

- **`__eq__`** – Two name expressions are equal if they have the same name value (parent is ignored).
- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – The canonical name (resolved one, not alias name).
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_enum_class`** (`bool`) – Whether this name resolves to an enumeration class.
- **`is_enum_instance`** (`bool`) – Whether this name resolves to an enumeration instance.
- **`is_enum_value`** (`bool`) – Whether this name resolves to an enumeration value.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`name`** (`str`) – Actual name.
- **`parent`** (`str | ExprName | Module | Class | None`) – Parent (for resolution in its scope).
- **`path`** (`str`) – The full, resolved name.
- **`resolved`** (`Module | Class | None`) – The resolved object this name refers to.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

The canonical name (resolved one, not alias name).

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_enum_class

```
is_enum_class: bool

```

Whether this name resolves to an enumeration class.

### is_enum_instance

```
is_enum_instance: bool

```

Whether this name resolves to an enumeration instance.

### is_enum_value

```
is_enum_value: bool

```

Whether this name resolves to an enumeration value.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### name

```
name: str

```

Actual name.

### parent

```
parent: str | ExprName | Module | Class | None = None

```

Parent (for resolution in its scope).

### path

```
path: str

```

The full, resolved name.

If it was given when creating the name, return that. If a callable was given, call it and return its result. It the name cannot be resolved, return the source.

### resolved

```
resolved: Module | Class | None

```

The resolved object this name refers to.

### __eq__

```
__eq__(other: object) -> bool

```

Two name expressions are equal if they have the same `name` value (`parent` is ignored).

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[ExprName]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> ExprName

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprNamedExpr

```
ExprNamedExpr(target: Expr, value: str | Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprNamedExpr[ExprNamedExpr]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprNamedExpr
                


              click griffe.ExprNamedExpr href "" "griffe.ExprNamedExpr"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Named/assignment expressions like `a := b`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`target`** (`Expr`) – Target name.
- **`value`** (`str | Expr`) – Value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### target

```
target: Expr

```

Target name.

### value

```
value: str | Expr

```

Value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprParameter

```
ExprParameter(
    name: str,
    kind: ParameterKind = positional_or_keyword,
    annotation: Expr | None = None,
    default: str | Expr | None = None,
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprParameter[ExprParameter]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprParameter
                


              click griffe.ExprParameter href "" "griffe.ExprParameter"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Parameters in function signatures like `a: int = 0`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`annotation`** (`Expr | None`) – Parameter type.
- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`default`** (`str | Expr | None`) – Parameter default.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`kind`** (`ParameterKind`) – Parameter kind.
- **`name`** (`str`) – Parameter name.
- **`path`** (`str`) – Path of the expressed name/attribute.

### annotation

```
annotation: Expr | None = None

```

Parameter type.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### default

```
default: str | Expr | None = None

```

Parameter default.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### kind

```
kind: ParameterKind = positional_or_keyword

```

Parameter kind.

### name

```
name: str

```

Parameter name.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprSet

```
ExprSet(elements: Sequence[str | Expr])

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprSet[ExprSet]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprSet
                


              click griffe.ExprSet href "" "griffe.ExprSet"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Sets like `{0, 1, 2}`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`elements`** (`Sequence[str | Expr]`) – Set elements.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### elements

```
elements: Sequence[str | Expr]

```

Set elements.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprSetComp

```
ExprSetComp(
    element: str | Expr, generators: Sequence[Expr]
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprSetComp[ExprSetComp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprSetComp
                


              click griffe.ExprSetComp href "" "griffe.ExprSetComp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Set comprehensions like `{a for b in c}`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`element`** (`str | Expr`) – Target value.
- **`generators`** (`Sequence[Expr]`) – Generators iterated on.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### element

```
element: str | Expr

```

Target value.

### generators

```
generators: Sequence[Expr]

```

Generators iterated on.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprSlice

```
ExprSlice(
    lower: str | Expr | None = None,
    upper: str | Expr | None = None,
    step: str | Expr | None = None,
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprSlice[ExprSlice]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprSlice
                


              click griffe.ExprSlice href "" "griffe.ExprSlice"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Slices like `[a:b:c]`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`lower`** (`str | Expr | None`) – Lower bound.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`step`** (`str | Expr | None`) – Iteration step.
- **`upper`** (`str | Expr | None`) – Upper bound.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### lower

```
lower: str | Expr | None = None

```

Lower bound.

### path

```
path: str

```

Path of the expressed name/attribute.

### step

```
step: str | Expr | None = None

```

Iteration step.

### upper

```
upper: str | Expr | None = None

```

Upper bound.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprSubscript

```
ExprSubscript(left: str | Expr, slice: str | Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprSubscript[ExprSubscript]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprSubscript
                


              click griffe.ExprSubscript href "" "griffe.ExprSubscript"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Subscripts like `a[b]`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – The canonical path of this subscript's left part.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`left`** (`str | Expr`) – Left part.
- **`path`** (`str`) – The path of this subscript's left part.
- **`slice`** (`str | Expr`) – Slice part.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

The canonical path of this subscript's left part.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### left

```
left: str | Expr

```

Left part.

### path

```
path: str

```

The path of this subscript's left part.

### slice

```
slice: str | Expr

```

Slice part.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> ExprBinOp | ExprSubscript

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprTuple

```
ExprTuple(
    elements: Sequence[str | Expr], implicit: bool = False
)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprTuple[ExprTuple]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprTuple
                


              click griffe.ExprTuple href "" "griffe.ExprTuple"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Tuples like `(0, 1, 2)`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`elements`** (`Sequence[str | Expr]`) – Tuple elements.
- **`implicit`** (`bool`) – Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### elements

```
elements: Sequence[str | Expr]

```

Tuple elements.

### implicit

```
implicit: bool = False

```

Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> ExprTuple

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprUnaryOp

```
ExprUnaryOp(operator: str, value: str | Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprUnaryOp[ExprUnaryOp]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprUnaryOp
                


              click griffe.ExprUnaryOp href "" "griffe.ExprUnaryOp"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Unary operations like `-1`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`operator`** (`str`) – Unary operator.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr`) – Value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### operator

```
operator: str

```

Unary operator.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr

```

Value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprYield

```
ExprYield(value: str | Expr | None = None)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprYield[ExprYield]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprYield
                


              click griffe.ExprYield href "" "griffe.ExprYield"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Yield statements like `yield a`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr | None`) – Yielded value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr | None = None

```

Yielded value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

## ExprYieldFrom

```
ExprYieldFrom(value: str | Expr)

```

Bases: `Expr`

```

              flowchart TD
              griffe.ExprYieldFrom[ExprYieldFrom]
              _griffe.expressions.Expr[Expr]

                              _griffe.expressions.Expr --> griffe.ExprYieldFrom
                


              click griffe.ExprYieldFrom href "" "griffe.ExprYieldFrom"
              click _griffe.expressions.Expr href "" "_griffe.expressions.Expr"
            
```

Yield statements like `yield from a`.

Methods:

- **`__iter__`** – Iterate on the expression syntax and elements.
- **`as_dict`** – Return the expression as a dictionary.
- **`iterate`** – Iterate on the expression elements.
- **`modernize`** – Modernize the expression.

Attributes:

- **`canonical_name`** (`str`) – Name of the expressed name/attribute/parameter.
- **`canonical_path`** (`str`) – Path of the expressed name/attribute.
- **`classname`** (`str`) – The expression class name.
- **`is_classvar`** (`bool`) – Whether this attribute is annotated with ClassVar.
- **`is_generator`** (`bool`) – Whether this expression is a generator.
- **`is_iterator`** (`bool`) – Whether this expression is an iterator.
- **`is_tuple`** (`bool`) – Whether this expression is a tuple.
- **`path`** (`str`) – Path of the expressed name/attribute.
- **`value`** (`str | Expr`) – Yielded-from value.

### canonical_name

```
canonical_name: str

```

Name of the expressed name/attribute/parameter.

### canonical_path

```
canonical_path: str

```

Path of the expressed name/attribute.

### classname

```
classname: str

```

The expression class name.

### is_classvar

```
is_classvar: bool

```

Whether this attribute is annotated with `ClassVar`.

### is_generator

```
is_generator: bool

```

Whether this expression is a generator.

### is_iterator

```
is_iterator: bool

```

Whether this expression is an iterator.

### is_tuple

```
is_tuple: bool

```

Whether this expression is a tuple.

### path

```
path: str

```

Path of the expressed name/attribute.

### value

```
value: str | Expr

```

Yielded-from value.

### __iter__

```
__iter__() -> Iterator[str | Expr]

```

Iterate on the expression syntax and elements.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return the expression as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Configuration options (none available yet).

Returns:

- `dict[str, Any]` – A dictionary.

### iterate

```
iterate(*, flat: bool = True) -> Iterator[str | Expr]

```

Iterate on the expression elements.

Parameters:

- #### **`flat`**

  (`bool`, default: `True` ) – Expressions are trees. When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings. On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.

Yields:

- `str | Expr` – Strings and names when flat, strings and expressions otherwise.

### modernize

```
modernize() -> Expr

```

Modernize the expression.

For example, use PEP 604 type unions `|` instead of `typing.Union`.

Returns:

- `Expr` – A modernized expression.

# Extensions

## **Main API**

## load_extensions

```
load_extensions(*exts: LoadableExtensionType) -> Extensions

```

Load configured extensions.

Parameters:

- ### **`exts`**

  (`LoadableExtensionType`, default: `()` ) – Extensions with potential configuration options.

Returns:

- `Extensions` – An extensions container.

## Extension

Base class for Griffe extensions.

Methods:

- **`generic_inspect`** – Extend the base generic inspection with extensions.
- **`generic_visit`** – Visit children nodes.
- **`inspect`** – Inspect a node.
- **`on_alias`** – Run when an Alias has been created.
- **`on_attribute_instance`** – Run when an Attribute has been created.
- **`on_attribute_node`** – Run when visiting a new attribute node during static/dynamic analysis.
- **`on_class_instance`** – Run when a Class has been created.
- **`on_class_members`** – Run when members of a Class have been loaded.
- **`on_class_node`** – Run when visiting a new class node during static/dynamic analysis.
- **`on_function_instance`** – Run when a Function has been created.
- **`on_function_node`** – Run when visiting a new function node during static/dynamic analysis.
- **`on_instance`** – Run when an Object has been created.
- **`on_members`** – Run when members of an Object have been loaded.
- **`on_module_instance`** – Run when a Module has been created.
- **`on_module_members`** – Run when members of a Module have been loaded.
- **`on_module_node`** – Run when visiting a new module node during static/dynamic analysis.
- **`on_node`** – Run when visiting a new node during static/dynamic analysis.
- **`on_package_loaded`** – Run when a package has been completely loaded.
- **`on_wildcard_expansion`** – Run when wildcard imports are expanded into aliases.
- **`visit`** – Visit a node.

### generic_inspect

```
generic_inspect(node: ObjectNode) -> None

```

Extend the base generic inspection with extensions.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### generic_visit

```
generic_visit(node: AST) -> None

```

Visit children nodes.

Parameters:

- #### **`node`**

  (`AST`) – The node to visit the children of.

### inspect

```
inspect(node: ObjectNode) -> None

```

Inspect a node.

Parameters:

- #### **`node`**

  (`ObjectNode`) – The node to inspect.

### on_alias

```
on_alias(
    *,
    node: AST | ObjectNode,
    alias: Alias,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when an Alias has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`alias`**

  (`Alias`) – The alias instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_attribute_instance

```
on_attribute_instance(
    *,
    node: AST | ObjectNode,
    attr: Attribute,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when an Attribute has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`attr`**

  (`Attribute`) – The attribute instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_attribute_node

```
on_attribute_node(
    *,
    node: AST | ObjectNode,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when visiting a new attribute node during static/dynamic analysis.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_class_instance

```
on_class_instance(
    *,
    node: AST | ObjectNode,
    cls: Class,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when a Class has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`cls`**

  (`Class`) – The class instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_class_members

```
on_class_members(
    *,
    node: AST | ObjectNode,
    cls: Class,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when members of a Class have been loaded.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`cls`**

  (`Class`) – The class instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_class_node

```
on_class_node(
    *,
    node: AST | ObjectNode,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when visiting a new class node during static/dynamic analysis.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_function_instance

```
on_function_instance(
    *,
    node: AST | ObjectNode,
    func: Function,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when a Function has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`func`**

  (`Function`) – The function instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_function_node

```
on_function_node(
    *,
    node: AST | ObjectNode,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when visiting a new function node during static/dynamic analysis.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_instance

```
on_instance(
    *,
    node: AST | ObjectNode,
    obj: Object,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when an Object has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`obj`**

  (`Object`) – The object instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_members

```
on_members(
    *,
    node: AST | ObjectNode,
    obj: Object,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when members of an Object have been loaded.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`obj`**

  (`Object`) – The object instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_module_instance

```
on_module_instance(
    *,
    node: AST | ObjectNode,
    mod: Module,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when a Module has been created.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`mod`**

  (`Module`) – The module instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_module_members

```
on_module_members(
    *,
    node: AST | ObjectNode,
    mod: Module,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when members of a Module have been loaded.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`mod`**

  (`Module`) – The module instance.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_module_node

```
on_module_node(
    *,
    node: AST | ObjectNode,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when visiting a new module node during static/dynamic analysis.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

- #### **`agent`**

  (`Visitor | Inspector`) – The analysis agent currently running.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_node

```
on_node(
    *,
    node: AST | ObjectNode,
    agent: Visitor | Inspector,
    **kwargs: Any,
) -> None

```

Run when visiting a new node during static/dynamic analysis.

Parameters:

- #### **`node`**

  (`AST | ObjectNode`) – The currently visited node.

### on_package_loaded

```
on_package_loaded(
    *, pkg: Module, loader: GriffeLoader, **kwargs: Any
) -> None

```

Run when a package has been completely loaded.

Parameters:

- #### **`pkg`**

  (`Module`) – The package (Module) instance.

- #### **`loader`**

  (`GriffeLoader`) – The loader currently in use.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### on_wildcard_expansion

```
on_wildcard_expansion(
    *, alias: Alias, loader: GriffeLoader, **kwargs: Any
) -> None

```

Run when wildcard imports are expanded into aliases.

Parameters:

- #### **`alias`**

  (`Alias`) – The alias instance.

- #### **`loader`**

  (`GriffeLoader`) – The loader currently in use.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – For forward-compatibility.

### visit

```
visit(node: AST) -> None

```

Visit a node.

Parameters:

- #### **`node`**

  (`AST`) – The node to visit.

## **Advanced API**

## Extensions

```
Extensions(*extensions: Extension)

```

This class helps iterating on extensions that should run at different times.

Parameters:

- ### **`*extensions`**

  (`Extension`, default: `()` ) – The extensions to add.

Methods:

- **`add`** – Add extensions to this container.
- **`call`** – Call the extension hook for the given event.

### add

```
add(*extensions: Extension) -> None

```

Add extensions to this container.

Parameters:

- #### **`*extensions`**

  (`Extension`, default: `()` ) – The extensions to add.

### call

```
call(event: str, **kwargs: Any) -> None

```

Call the extension hook for the given event.

Parameters:

- #### **`event`**

  (`str`) – The triggered event.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Arguments passed to the hook.

## **Types**

## LoadableExtensionType

```
LoadableExtensionType = Union[
    str, dict[str, Any], Extension, type[Extension]
]

```

All the types that can be passed to `load_extensions`.

## **Builtin extensions**

## builtin_extensions

```
builtin_extensions: set[str] = {'dataclasses'}

```

The names of built-in Griffe extensions.

## DataclassesExtension

Bases: `Extension`

```

              flowchart TD
              griffe.DataclassesExtension[DataclassesExtension]
              _griffe.extensions.base.Extension[Extension]

                              _griffe.extensions.base.Extension --> griffe.DataclassesExtension
                


              click griffe.DataclassesExtension href "" "griffe.DataclassesExtension"
              click _griffe.extensions.base.Extension href "" "_griffe.extensions.base.Extension"
            
```

Built-in extension adding support for dataclasses.

This extension creates `__init__` methods of dataclasses if they don't already exist.

Methods:

- **`on_package_loaded`** – Hook for loaded packages.

### on_package_loaded

```
on_package_loaded(*, pkg: Module, **kwargs: Any) -> None

```

Hook for loaded packages.

Parameters:

- #### **`pkg`**

  (`Module`) – The loaded package.

# Finder

## **Advanced API**

## ModuleFinder

```
ModuleFinder(
    search_paths: Sequence[str | Path] | None = None,
)

```

The Griffe finder, allowing to find modules on the file system.

The module finder is generally not used directly. Each GriffeLoader instance creates its own module finder instance. The finder can be configured when instantiating the loader thanks to the loader's `search_paths` parameter.

Parameters:

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – Optional paths to search into.

Methods:

- **`append_search_path`** – Append a search path.
- **`find_package`** – Find a package or namespace package.
- **`find_spec`** – Find the top-level parent module of a module.
- **`insert_search_path`** – Insert a search path at the given position.
- **`iter_submodules`** – Iterate on a module's submodules, if any.
- **`submodules`** – Return the list of a module's submodules.

Attributes:

- **`accepted_py_module_extensions`** (`list[str]`) – List of extensions supported by the finder.
- **`extensions_set`** (`set[str]`) – Set of extensions supported by the finder.
- **`search_paths`** (`list[Path]`) – The finder search paths.

### accepted_py_module_extensions

```
accepted_py_module_extensions: list[str] = [
    ".py",
    ".pyc",
    ".pyo",
    ".pyd",
    ".pyi",
    ".so",
]

```

List of extensions supported by the finder.

### extensions_set

```
extensions_set: set[str] = set(
    accepted_py_module_extensions
)

```

Set of extensions supported by the finder.

### search_paths

```
search_paths: list[Path] = []

```

The finder search paths.

### append_search_path

```
append_search_path(path: Path) -> None

```

Append a search path.

The path will be resolved (absolute, normalized). The path won't be appended if it is already in the search paths list.

Parameters:

- #### **`path`**

  (`Path`) – The path to append.

### find_package

```
find_package(
    module_name: str,
) -> Package | NamespacePackage

```

Find a package or namespace package.

Parameters:

- #### **`module_name`**

  (`str`) – The module name.

Raises:

- `ModuleNotFoundError` – When the module cannot be found.

Returns:

- `Package | NamespacePackage` – A package or namespace package wrapper.

### find_spec

```
find_spec(
    module: str | Path,
    *,
    try_relative_path: bool = True,
    find_stubs_package: bool = False,
) -> tuple[str, Package | NamespacePackage]

```

Find the top-level parent module of a module.

If a Path is passed, only try to find the module as a file path. If a string is passed, first try to find the module as a file path, then look into the search paths.

Parameters:

- #### **`module`**

  (`str | Path`) – The module name or path.

- #### **`try_relative_path`**

  (`bool`, default: `True` ) – Whether to try finding the module as a relative path, when the given module is not already a path.

- #### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

Raises:

- `FileNotFoundError` – When a Path was passed and the module could not be found: the directory has no __init__.py file in it the path does not exist
- `ModuleNotFoundError` – When a string was passed and the module could not be found: no module/__init__.py no module.py no module.pth no module directory (namespace packages) or unsupported .pth file

Returns:

- `tuple[str, Package | NamespacePackage]` – The name of the module, and an instance representing its (namespace) package.

### insert_search_path

```
insert_search_path(position: int, path: Path) -> None

```

Insert a search path at the given position.

The path will be resolved (absolute, normalized). The path won't be inserted if it is already in the search paths list.

Parameters:

- #### **`position`**

  (`int`) – The insert position in the list.

- #### **`path`**

  (`Path`) – The path to insert.

### iter_submodules

```
iter_submodules(
    path: Path | list[Path], seen: set | None = None
) -> Iterator[NamePartsAndPathType]

```

Iterate on a module's submodules, if any.

Parameters:

- #### **`path`**

  (`Path | list[Path]`) – The module path.

- #### **`seen`**

  (`set | None`, default: `None` ) – If not none, this set is used to skip some files. The goal is to replicate the behavior of Python by only using the first packages (with __init__ modules) of the same name found in different namespace packages. As soon as we find an __init__ module, we add its parent path to the seen set, which will be reused when scanning the next namespace packages.

Yields:

- **`name_parts`** ( `tuple[str, ...]` ) – The parts of a submodule name.
- **`filepath`** ( `Path` ) – A submodule filepath.

### submodules

```
submodules(module: Module) -> list[NamePartsAndPathType]

```

Return the list of a module's submodules.

Parameters:

- #### **`module`**

  (`Module`) – The parent module.

Returns:

- `list[NamePartsAndPathType]` – A list of tuples containing the parts of the submodule name and its path.

## Package

```
Package(name: str, path: Path, stubs: Path | None = None)

```

This class is a simple placeholder used during the process of finding packages.

Parameters:

- ### **`name`**

  (`str`) – The package name.

- ### **`path`**

  (`Path`) – The package path(s).

- ### **`stubs`**

  (`Path | None`, default: `None` ) – An optional path to the related stubs file (.pyi).

Attributes:

- **`name`** (`str`) – Package name.
- **`path`** (`Path`) – Package folder path.
- **`stubs`** (`Path | None`) – Package stubs file.

### name

```
name: str

```

Package name.

### path

```
path: Path

```

Package folder path.

### stubs

```
stubs: Path | None = None

```

Package stubs file.

## NamespacePackage

```
NamespacePackage(name: str, path: list[Path])

```

This class is a simple placeholder used during the process of finding packages.

Parameters:

- ### **`name`**

  (`str`) – The package name.

- ### **`path`**

  (`list[Path]`) – The package paths.

Attributes:

- **`name`** (`str`) – Namespace package name.
- **`path`** (`list[Path]`) – Namespace package folder paths.

### name

```
name: str

```

Namespace package name.

### path

```
path: list[Path]

```

Namespace package folder paths.

## **Types**

## NamePartsType

```
NamePartsType = tuple[str, ...]

```

Type alias for the parts of a module name.

## NamePartsAndPathType

```
NamePartsAndPathType = tuple[NamePartsType, Path]

```

Type alias for the parts of a module name and its path.

# Git utilities

## assert_git_repo

```
assert_git_repo(path: str | Path) -> None

```

Assert that a directory is a Git repository.

Parameters:

- ### **`path`**

  (`str | Path`) – Path to a directory.

Raises:

- `OSError` – When the directory is not a Git repository.

## get_latest_tag

```
get_latest_tag(repo: str | Path) -> str

```

Get latest tag of a Git repository.

Parameters:

- ### **`repo`**

  (`str | Path`) – The path to Git repository.

Returns:

- `str` – The latest tag.

## get_repo_root

```
get_repo_root(repo: str | Path) -> str

```

Get the root of a Git repository.

Parameters:

- ### **`repo`**

  (`str | Path`) – The path to a Git repository.

Returns:

- `str` – The root of the repository.

## tmp_worktree

```
tmp_worktree(
    repo: str | Path = ".", ref: str = "HEAD"
) -> Iterator[Path]

```

Context manager that checks out the given reference in the given repository to a temporary worktree.

Parameters:

- ### **`repo`**

  (`str | Path`, default: `'.'` ) – Path to the repository (i.e. the directory containing the .git directory)

- ### **`ref`**

  (`str`, default: `'HEAD'` ) – A Git reference such as a commit, tag or branch.

Yields:

- `Path` – The path to the temporary worktree.

Raises:

- `OSError` – If repo is not a valid .git repository
- `RuntimeError` – If the git executable is unavailable, or if it cannot create a worktree

# Helpers

## TmpPackage

```
TmpPackage(tmpdir: Path, name: str, path: Path)

```

A temporary package.

The `tmpdir` and `path` parameters can be passed as relative path. They will be resolved to absolute paths after initialization.

Attributes:

- **`name`** (`str`) – The package name, as to dynamically import it.
- **`path`** (`Path`) – The package path.
- **`tmpdir`** (`Path`) – The temporary directory containing the package.

### name

```
name: str

```

The package name, as to dynamically import it.

### path

```
path: Path

```

The package path.

### tmpdir

```
tmpdir: Path

```

The temporary directory containing the package.

## temporary_pyfile

```
temporary_pyfile(
    code: str, *, module_name: str = "module"
) -> Iterator[tuple[str, Path]]

```

Create a Python file containing the given code in a temporary directory.

Parameters:

- ### **`code`**

  (`str`) – The code to write to the temporary file.

- ### **`module_name`**

  (`str`, default: `'module'` ) – The name of the temporary module.

Yields:

- **`module_name`** ( `str` ) – The module name, as to dynamically import it.
- **`module_path`** ( `Path` ) – The module path.

## temporary_pypackage

```
temporary_pypackage(
    package: str,
    modules: Sequence[str]
    | Mapping[str, str]
    | None = None,
    *,
    init: bool = True,
    inits: bool = True,
) -> Iterator[TmpPackage]

```

Create a package containing the given modules in a temporary directory.

Parameters:

- ### **`package`**

  (`str`) – The package name. Example: "a" gives a package named a, while "a/b" gives a namespace package named a with a package inside named b. If init is false, then b is also a namespace package.

- ### **`modules`**

  (`Sequence[str] | Mapping[str, str] | None`, default: `None` ) – Additional modules to create in the package. If a list, simply touch the files: ["b.py", "c/d.py", "e/f"]. If a dict, keys are the file names and values their contents: {"b.py": "b = 1", "c/d.py": "print('hey from c')"}.

- ### **`init`**

  (`bool`, default: `True` ) – Whether to create an __init__ module in the top package.

- ### **`inits`**

  (`bool`, default: `True` ) – Whether to create __init__ modules in subpackages.

Yields:

- `TmpPackage` – A temporary package.

## temporary_visited_module

```
temporary_visited_module(
    code: str,
    *,
    module_name: str = "module",
    extensions: Extensions | None = None,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
) -> Iterator[Module]

```

Create and visit a temporary module with the given code.

Parameters:

- ### **`code`**

  (`str`) – The code of the module.

- ### **`module_name`**

  (`str`, default: `'module'` ) – The name of the temporary module.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use when visiting the AST.

- ### **`parent`**

  (`Module | None`, default: `None` ) – The optional parent of this module.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Yields:

- `Module` – The visited module.

## temporary_visited_package

```
temporary_visited_package(
    package: str,
    modules: Sequence[str]
    | Mapping[str, str]
    | None = None,
    *,
    init: bool = True,
    inits: bool = True,
    extensions: Extensions | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = False,
    store_source: bool = True,
    resolve_aliases: bool = False,
    resolve_external: bool | None = None,
    resolve_implicit: bool = False,
) -> Iterator[Module]

```

Create and visit a temporary package.

Parameters:

- ### **`package`**

  (`str`) – The package name. Example: "a" gives a package named a, while "a/b" gives a namespace package named a with a package inside named b. If init is false, then b is also a namespace package.

- ### **`modules`**

  (`Sequence[str] | Mapping[str, str] | None`, default: `None` ) – Additional modules to create in the package. If a list, simply touch the files: ["b.py", "c/d.py", "e/f"]. If a dict, keys are the file names and values their contents: {"b.py": "b = 1", "c/d.py": "print('hey from c')"}.

- ### **`init`**

  (`bool`, default: `True` ) – Whether to create an __init__ module in the top package.

- ### **`inits`**

  (`bool`, default: `True` ) – Whether to create __init__ modules in subpackages.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `False` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`store_source`**

  (`bool`, default: `True` ) – Whether to store code source in the lines collection.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to try to load unspecified modules to resolve aliases. Default value (None) means to load external modules only if they are the private sibling or the origin module (for example when ast imports from \_ast).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

Yields:

- `Module` – A module.

## temporary_inspected_module

```
temporary_inspected_module(
    code: str,
    *,
    module_name: str = "module",
    import_paths: list[Path] | None = None,
    extensions: Extensions | None = None,
    parent: Module | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
) -> Iterator[Module]

```

Create and inspect a temporary module with the given code.

Parameters:

- ### **`code`**

  (`str`) – The code of the module.

- ### **`module_name`**

  (`str`, default: `'module'` ) – The name of the temporary module.

- ### **`import_paths`**

  (`list[Path] | None`, default: `None` ) – Paths to import the module from.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use when visiting the AST.

- ### **`parent`**

  (`Module | None`, default: `None` ) – The optional parent of this module.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Yields:

- `Module` – The inspected module.

## temporary_inspected_package

```
temporary_inspected_package(
    package: str,
    modules: Sequence[str]
    | Mapping[str, str]
    | None = None,
    *,
    init: bool = True,
    inits: bool = True,
    extensions: Extensions | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = True,
    store_source: bool = True,
    resolve_aliases: bool = False,
    resolve_external: bool | None = None,
    resolve_implicit: bool = False,
) -> Iterator[Module]

```

Create and inspect a temporary package.

Parameters:

- ### **`package`**

  (`str`) – The package name. Example: "a" gives a package named a, while "a/b" gives a namespace package named a with a package inside named b. If init is false, then b is also a namespace package.

- ### **`modules`**

  (`Sequence[str] | Mapping[str, str] | None`, default: `None` ) – Additional modules to create in the package. If a list, simply touch the files: ["b.py", "c/d.py", "e/f"]. If a dict, keys are the file names and values their contents: {"b.py": "b = 1", "c/d.py": "print('hey from c')"}.

- ### **`init`**

  (`bool`, default: `True` ) – Whether to create an __init__ module in the top package.

- ### **`inits`**

  (`bool`, default: `True` ) – Whether to create __init__ modules in subpackages.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules.

- ### **`store_source`**

  (`bool`, default: `True` ) – Whether to store code source in the lines collection.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to try to load unspecified modules to resolve aliases. Default value (None) means to load external modules only if they are the private sibling or the origin module (for example when ast imports from \_ast).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

Yields:

- `Module` – A module.

## vtree

```
vtree(
    *objects: Object, return_leaf: bool = False
) -> Object

```

Link objects together, vertically.

Parameters:

- ### **`*objects`**

  (`Object`, default: `()` ) – A sequence of objects. The first one is at the top of the tree.

- ### **`return_leaf`**

  (`bool`, default: `False` ) – Whether to return the leaf instead of the root.

Raises:

- `ValueError` – When no objects are provided.

Returns:

- `Object` – The top or leaf object.

## htree

```
htree(*objects: Object) -> Object

```

Link objects together, horizontally.

Parameters:

- ### **`*objects`**

  (`Object`, default: `()` ) – A sequence of objects. All objects starting at the second become members of the first.

Raises:

- `ValueError` – When no objects are provided.

Returns:

- `Object` – The first given object, with all the other objects as members of it.

## module_vtree

```
module_vtree(
    path: str,
    *,
    leaf_package: bool = True,
    return_leaf: bool = False,
) -> Module

```

Link objects together, vertically.

Parameters:

- ### **`path`**

  (`str`) – The complete module path, like "a.b.c.d".

- ### **`leaf_package`**

  (`bool`, default: `True` ) – Whether the deepest module should also be a package.

- ### **`return_leaf`**

  (`bool`, default: `False` ) – Whether to return the leaf instead of the root.

Raises:

- `ValueError` – When no objects are provided.

Returns:

- `Module` – The top or leaf module.

# Loaders

## **Main API**

## load

```
load(
    objspec: str | Path | None = None,
    /,
    *,
    submodules: bool = True,
    try_relative_path: bool = True,
    extensions: Extensions | None = None,
    search_paths: Sequence[str | Path] | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    store_source: bool = True,
    find_stubs_package: bool = False,
    resolve_aliases: bool = False,
    resolve_external: bool | None = None,
    resolve_implicit: bool = False,
) -> Object | Alias

```

Load and return a Griffe object.

In Griffe's context, loading means:

- searching for a package, and finding it on the file system or as a builtin module (see the ModuleFinder class for more information)
- extracting information from each of its (sub)modules, by either parsing the source code (see the visit function) or inspecting the module at runtime (see the inspect function)

The extracted information is stored in a collection of modules, which can be queried later. Each collected module is a tree of objects, representing the structure of the module. See the Module, Class, Function, and Attribute classes for more information.

The main class used to load modules is GriffeLoader. Convenience functions like this one and load_git are also available.

Example

```
import griffe

module = griffe.load(...)

```

This is a shortcut for:

```
from griffe import GriffeLoader

loader = GriffeLoader(...)
module = loader.load(...)

```

See the documentation for the loader: GriffeLoader.

Parameters:

- ### **`objspec`**

  (`str | Path | None`, default: `None` ) – The Python path of an object, or file path to a module.

- ### **`submodules`**

  (`bool`, default: `True` ) – Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).

- ### **`try_relative_path`**

  (`bool`, default: `True` ) – Whether to try finding the module as a relative path.

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`force_inspection`**

  (`bool`, default: `False` ) – Whether to force using dynamic analysis when loading data.

- ### **`store_source`**

  (`bool`, default: `True` ) – Whether to store code source in the lines collection.

- ### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to try to load unspecified modules to resolve aliases. Default value (None) means to load external modules only if they are the private sibling or the origin module (for example when ast imports from \_ast).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

Returns:

- `Object | Alias` – A Griffe object.

## load_git

```
load_git(
    objspec: str | Path | None = None,
    /,
    *,
    ref: str = "HEAD",
    repo: str | Path = ".",
    submodules: bool = True,
    extensions: Extensions | None = None,
    search_paths: Sequence[str | Path] | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    find_stubs_package: bool = False,
    resolve_aliases: bool = False,
    resolve_external: bool | None = None,
    resolve_implicit: bool = False,
) -> Object | Alias

```

Load and return a module from a specific Git reference.

This function will create a temporary [git worktree](https://git-scm.com/docs/git-worktree) at the requested reference before loading `module` with griffe.load.

This function requires that the `git` executable is installed.

Examples:

```
from griffe import load_git

old_api = load_git("my_module", ref="v0.1.0", repo="path/to/repo")

```

Parameters:

- ### **`objspec`**

  (`str | Path | None`, default: `None` ) – The Python path of an object, or file path to a module.

- ### **`ref`**

  (`str`, default: `'HEAD'` ) – A Git reference such as a commit, tag or branch.

- ### **`repo`**

  (`str | Path`, default: `'.'` ) – Path to the repository (i.e. the directory containing the .git directory)

- ### **`submodules`**

  (`bool`, default: `True` ) – Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into (relative to the repository root).

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`force_inspection`**

  (`bool`, default: `False` ) – Whether to force using dynamic analysis when loading data.

- ### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to try to load unspecified modules to resolve aliases. Default value (None) means to load external modules only if they are the private sibling or the origin module (for example when ast imports from \_ast).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

Returns:

- `Object | Alias` – A Griffe object.

## load_pypi

```
load_pypi(
    package: str,
    distribution: str,
    version_spec: str,
    *,
    submodules: bool = True,
    extensions: Extensions | None = None,
    search_paths: Sequence[str | Path] | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    find_stubs_package: bool = False,
    resolve_aliases: bool = False,
    resolve_external: bool | None = None,
    resolve_implicit: bool = False,
) -> Object | Alias

```

Load and return a module from a specific package version downloaded using pip.

[Sponsors only](../../../insiders/) — [Insiders 1.1.0](../../../insiders/changelog/#1.1.0).

Parameters:

- ### **`package`**

  (`str`) – The package import name.

- ### **`distribution`**

  (`str`) – The distribution name.

- ### **`version_spec`**

  (`str`) – The version specifier to use when installing with pip.

- ### **`submodules`**

  (`bool`, default: `True` ) – Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into (relative to the repository root).

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`force_inspection`**

  (`bool`, default: `False` ) – Whether to force using dynamic analysis when loading data.

- ### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

- ### **`resolve_aliases`**

  (`bool`, default: `False` ) – Whether to resolve aliases.

- ### **`resolve_external`**

  (`bool | None`, default: `None` ) – Whether to try to load unspecified modules to resolve aliases. Default value (None) means to load external modules only if they are the private sibling or the origin module (for example when ast imports from \_ast).

- ### **`resolve_implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

## **Advanced API**

## GriffeLoader

```
GriffeLoader(
    *,
    extensions: Extensions | None = None,
    search_paths: Sequence[str | Path] | None = None,
    docstring_parser: DocstringStyle | Parser | None = None,
    docstring_options: dict[str, Any] | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
    allow_inspection: bool = True,
    force_inspection: bool = False,
    store_source: bool = True,
)

```

The Griffe loader, allowing to load data from modules.

Parameters:

- ### **`extensions`**

  (`Extensions | None`, default: `None` ) – The extensions to use.

- ### **`search_paths`**

  (`Sequence[str | Path] | None`, default: `None` ) – The paths to search into.

- ### **`docstring_parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`docstring_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

- ### **`allow_inspection`**

  (`bool`, default: `True` ) – Whether to allow inspecting modules when visiting them is not possible.

- ### **`store_source`**

  (`bool`, default: `True` ) – Whether to store code source in the lines collection.

Methods:

- **`expand_exports`** – Expand exports: try to recursively expand all module exports (__all__ values).
- **`expand_wildcards`** – Expand wildcards: try to recursively expand all found wildcards.
- **`load`** – Load an object as a Griffe object, given its Python or file path.
- **`resolve_aliases`** – Resolve aliases.
- **`resolve_module_aliases`** – Follow aliases: try to recursively resolve all found aliases.
- **`stats`** – Compute some statistics.

Attributes:

- **`allow_inspection`** (`bool`) – Whether to allow inspecting (importing) modules for which we can't find sources.
- **`docstring_options`** (`dict[str, Any]`) – Configured parsing options.
- **`docstring_parser`** (`DocstringStyle | Parser | None`) – Selected docstring parser.
- **`extensions`** (`Extensions`) – Loaded Griffe extensions.
- **`finder`** (`ModuleFinder`) – The module source finder.
- **`force_inspection`** (`bool`) – Whether to force inspecting (importing) modules, even when sources were found.
- **`ignored_modules`** (`set[str]`) – Special modules to ignore when loading.
- **`lines_collection`** (`LinesCollection`) – Collection of source code lines.
- **`modules_collection`** (`ModulesCollection`) – Collection of modules.
- **`store_source`** (`bool`) – Whether to store source code in the lines collection.

### allow_inspection

```
allow_inspection: bool = allow_inspection

```

Whether to allow inspecting (importing) modules for which we can't find sources.

### docstring_options

```
docstring_options: dict[str, Any] = docstring_options or {}

```

Configured parsing options.

### docstring_parser

```
docstring_parser: DocstringStyle | Parser | None = (
    docstring_parser
)

```

Selected docstring parser.

### extensions

```
extensions: Extensions = extensions or load_extensions()

```

Loaded Griffe extensions.

### finder

```
finder: ModuleFinder = ModuleFinder(search_paths)

```

The module source finder.

### force_inspection

```
force_inspection: bool = force_inspection

```

Whether to force inspecting (importing) modules, even when sources were found.

### ignored_modules

```
ignored_modules: set[str] = {'debugpy', '_pydev'}

```

Special modules to ignore when loading.

For example, `debugpy` and `_pydev` are used when debugging with VSCode and should generally never be loaded.

### lines_collection

```
lines_collection: LinesCollection = (
    lines_collection or LinesCollection()
)

```

Collection of source code lines.

### modules_collection

```
modules_collection: ModulesCollection = (
    modules_collection or ModulesCollection()
)

```

Collection of modules.

### store_source

```
store_source: bool = store_source

```

Whether to store source code in the lines collection.

### expand_exports

```
expand_exports(
    module: Module, seen: set | None = None
) -> None

```

Expand exports: try to recursively expand all module exports (`__all__` values).

See also: Module.exports.

Parameters:

- #### **`module`**

  (`Module`) – The module to recurse on.

- #### **`seen`**

  (`set | None`, default: `None` ) – Used to avoid infinite recursion.

### expand_wildcards

```
expand_wildcards(
    obj: Object,
    *,
    external: bool | None = None,
    seen: set | None = None,
) -> None

```

Expand wildcards: try to recursively expand all found wildcards.

See also: Alias.wildcard.

Parameters:

- #### **`obj`**

  (`Object`) – The object and its members to recurse on.

- #### **`external`**

  (`bool | None`, default: `None` ) – When true, try to load unspecified modules to expand wildcards.

- #### **`seen`**

  (`set | None`, default: `None` ) – Used to avoid infinite recursion.

### load

```
load(
    objspec: str | Path | None = None,
    /,
    *,
    submodules: bool = True,
    try_relative_path: bool = True,
    find_stubs_package: bool = False,
) -> Object | Alias

```

Load an object as a Griffe object, given its Python or file path.

Note that this will load the whole object's package, and return only the specified object. The rest of the package can be accessed from the returned object with regular methods and properties (`parent`, `members`, etc.).

Examples:

```
>>> loader.load("griffe.Module")
Alias("Module", "_griffe.models.Module")

```

Parameters:

- #### **`objspec`**

  (`str | Path | None`, default: `None` ) – The Python path of an object, or file path to a module.

- #### **`submodules`**

  (`bool`, default: `True` ) – Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).

- #### **`try_relative_path`**

  (`bool`, default: `True` ) – Whether to try finding the module as a relative path.

- #### **`find_stubs_package`**

  (`bool`, default: `False` ) – Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.

Raises:

- `LoadingError` – When loading a module failed for various reasons.
- `ModuleNotFoundError` – When a module was not found and inspection is disallowed.

Returns:

- `Object | Alias` – A Griffe object.

### resolve_aliases

```
resolve_aliases(
    *,
    implicit: bool = False,
    external: bool | None = None,
    max_iterations: int | None = None,
) -> tuple[set[str], int]

```

Resolve aliases.

Parameters:

- #### **`implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

- #### **`external`**

  (`bool | None`, default: `None` ) – When false, don't try to load unspecified modules to resolve aliases.

- #### **`max_iterations`**

  (`int | None`, default: `None` ) – Maximum number of iterations on the loader modules collection.

Returns:

- `tuple[set[str], int]` – The unresolved aliases and the number of iterations done.

### resolve_module_aliases

```
resolve_module_aliases(
    obj: Object | Alias,
    *,
    implicit: bool = False,
    external: bool | None = None,
    seen: set[str] | None = None,
    load_failures: set[str] | None = None,
) -> tuple[set[str], set[str]]

```

Follow aliases: try to recursively resolve all found aliases.

Parameters:

- #### **`obj`**

  (`Object | Alias`) – The object and its members to recurse on.

- #### **`implicit`**

  (`bool`, default: `False` ) – When false, only try to resolve an alias if it is explicitly exported.

- #### **`external`**

  (`bool | None`, default: `None` ) – When false, don't try to load unspecified modules to resolve aliases.

- #### **`seen`**

  (`set[str] | None`, default: `None` ) – Used to avoid infinite recursion.

- #### **`load_failures`**

  (`set[str] | None`, default: `None` ) – Set of external packages we failed to load (to prevent retries).

Returns:

- `tuple[set[str], set[str]]` – Both sets of resolved and unresolved aliases.

### stats

```
stats() -> Stats

```

Compute some statistics.

Returns:

- `Stats` – Some statistics.

## ModulesCollection

```
ModulesCollection()

```

Bases: `GetMembersMixin`, `SetMembersMixin`, `DelMembersMixin`

```

              flowchart TD
              griffe.ModulesCollection[ModulesCollection]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]

                              _griffe.mixins.GetMembersMixin --> griffe.ModulesCollection
                
                _griffe.mixins.SetMembersMixin --> griffe.ModulesCollection
                
                _griffe.mixins.DelMembersMixin --> griffe.ModulesCollection
                


              click griffe.ModulesCollection href "" "griffe.ModulesCollection"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
            
```

A collection of modules, allowing easy access to members.

Initialize the collection.

Methods:

- **`__bool__`** – A modules collection is always true-ish.
- **`__contains__`** – Check if a module is in the collection.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__setitem__`** – Set a member with its name or path.
- **`del_member`** – Delete a member with its name or path.
- **`get_member`** – Get a member with its name or path.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`all_members`** (`dict[str, Module]`) – Members of the collection.
- **`is_collection`** – Marked as collection to distinguish from objects.
- **`members`** (`dict[str, Module]`) – Members (modules) of the collection.

### all_members

```
all_members: dict[str, Module]

```

Members of the collection.

This property is overwritten to simply return `self.members`, as `all_members` does not make sense for a modules collection.

### is_collection

```
is_collection = True

```

Marked as collection to distinguish from objects.

### members

```
members: dict[str, Module] = {}

```

Members (modules) of the collection.

### __bool__

```
__bool__() -> bool

```

A modules collection is always true-ish.

### __contains__

```
__contains__(item: Any) -> bool

```

Check if a module is in the collection.

### __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

### __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

### __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

### del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

### get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

### set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

## LinesCollection

```
LinesCollection()

```

A simple dictionary containing the modules source code lines.

Initialize the collection.

Methods:

- **`__bool__`** – A lines collection is always true-ish.
- **`__contains__`** – Check if a file path is in the collection.
- **`__getitem__`** – Get the lines of a file path.
- **`__setitem__`** – Set the lines of a file path.
- **`items`** – Return the collection items.
- **`keys`** – Return the collection keys.
- **`values`** – Return the collection values.

### __bool__

```
__bool__() -> bool

```

A lines collection is always true-ish.

### __contains__

```
__contains__(item: Path) -> bool

```

Check if a file path is in the collection.

### __getitem__

```
__getitem__(key: Path) -> list[str]

```

Get the lines of a file path.

### __setitem__

```
__setitem__(key: Path, value: list[str]) -> None

```

Set the lines of a file path.

### items

```
items() -> ItemsView

```

Return the collection items.

Returns:

- `ItemsView` – The collection items.

### keys

```
keys() -> KeysView

```

Return the collection keys.

Returns:

- `KeysView` – The collection keys.

### values

```
values() -> ValuesView

```

Return the collection values.

Returns:

- `ValuesView` – The collection values.

## **Additional API**

## Stats

```
Stats(loader: GriffeLoader)

```

Load statistics for a Griffe loader.

Parameters:

- ### **`loader`**

  (`GriffeLoader`) – The loader to compute stats for.

Methods:

- **`as_text`** – Format the statistics as text.

Attributes:

- **`by_kind`** – Number of objects by kind.
- **`lines`** – Total number of lines.
- **`loader`** – The loader to compute stats for.
- **`modules_by_extension`** – Number of modules by extension.
- **`packages`** – Number of packages.
- **`time_spent_inspecting`** – Time spent inspecting modules.
- **`time_spent_serializing`** – Time spent serializing objects.
- **`time_spent_visiting`** – Time spent visiting modules.

### by_kind

```
by_kind = {MODULE: 0, CLASS: 0, FUNCTION: 0, ATTRIBUTE: 0}

```

Number of objects by kind.

### lines

```
lines = sum(len(lines) for lines in values())

```

Total number of lines.

### loader

```
loader = loader

```

The loader to compute stats for.

### modules_by_extension

```
modules_by_extension = modules_by_extension

```

Number of modules by extension.

### packages

```
packages = len(top_modules)

```

Number of packages.

### time_spent_inspecting

```
time_spent_inspecting = 0

```

Time spent inspecting modules.

### time_spent_serializing

```
time_spent_serializing = 0

```

Time spent serializing objects.

### time_spent_visiting

```
time_spent_visiting = 0

```

Time spent visiting modules.

### as_text

```
as_text() -> str

```

Format the statistics as text.

Returns:

- `str` – Text stats.

## merge_stubs

```
merge_stubs(mod1: Module, mod2: Module) -> Module

```

Merge stubs into a module.

Parameters:

- ### **`mod1`**

  (`Module`) – A regular module or stubs module.

- ### **`mod2`**

  (`Module`) – A regular module or stubs module.

Raises:

- `ValueError` – When both modules are regular modules (no stubs is passed).

Returns:

- `Module` – The regular module.

# Loggers

## **Main API**

## logger

```
logger: Logger = _get()

```

Our global logger, used throughout the library.

Griffe's output and error messages are logging messages.

Griffe provides the patch_loggers function so dependent libraries can patch Griffe loggers as they see fit.

For example, to fit in the MkDocs logging configuration and prefix each log message with the module name:

```
import logging
from griffe import patch_loggers


class LoggerAdapter(logging.LoggerAdapter):
    def __init__(self, prefix, logger):
        super().__init__(logger, {})
        self.prefix = prefix

    def process(self, msg, kwargs):
        return f"{self.prefix}: {msg}", kwargs


def get_logger(name):
    logger = logging.getLogger(f"mkdocs.plugins.{name}")
    return LoggerAdapter(name, logger)


patch_loggers(get_logger)

```

## get_logger

```
get_logger(name: str = 'griffe') -> Logger

```

Create and return a new logger instance.

Parameters:

- ### **`name`**

  (`str`, default: `'griffe'` ) – The logger name.

Returns:

- `Logger` – The logger.

## Logger

```
Logger(name: str)

```

Methods:

- **`disable`** – Temporarily disable logging.

### disable

```
disable() -> Iterator[None]

```

Temporarily disable logging.

## LogLevel

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.LogLevel[LogLevel]

              

              click griffe.LogLevel href "" "griffe.LogLevel"
            
```

Enumeration of available log levels.

Attributes:

- **`critical`** – The CRITICAL log level.
- **`debug`** – The DEBUG log level.
- **`error`** – The ERROR log level.
- **`info`** – The INFO log level.
- **`success`** – The SUCCESS log level.
- **`trace`** – The TRACE log level.
- **`warning`** – The WARNING log level.

### critical

```
critical = 'critical'

```

The CRITICAL log level.

### debug

```
debug = 'debug'

```

The DEBUG log level.

### error

```
error = 'error'

```

The ERROR log level.

### info

```
info = 'info'

```

The INFO log level.

### success

```
success = 'success'

```

The SUCCESS log level.

### trace

```
trace = 'trace'

```

The TRACE log level.

### warning

```
warning = 'warning'

```

The WARNING log level.

## DEFAULT_LOG_LEVEL

```
DEFAULT_LOG_LEVEL = os.getenv(
    "GRIFFE_LOG_LEVEL", "INFO"
).upper()

```

The default log level for the CLI.

This can be overridden by the `GRIFFE_LOG_LEVEL` environment variable.

## **Advanced API**

## patch_loggers

```
patch_loggers(
    get_logger_func: Callable[[str], Any],
) -> None

```

Patch Griffe logger and Griffe extensions' loggers.

Parameters:

- ### **`get_logger_func`**

  (`Callable[[str], Any]`) – A function accepting a name as parameter and returning a logger.

# Models

Griffe stores information extracted from Python source code into data models.

These models represent trees of objects, starting with modules, and containing classes, functions, and attributes.

Modules can have submodules, classes, functions and attributes. Classes can have nested classes, methods and attributes. Functions and attributes do not have any members.

Indirections to objects declared in other modules are represented as "aliases". An alias therefore represents an imported object, and behaves almost exactly like the object it points to: it is a light wrapper around the object, with special methods and properties that allow to access the target's data transparently.

The 5 models:

- Module
- Class
- Function
- Attribute
- Alias

## **Model kind enumeration**

## Kind

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.Kind[Kind]

              

              click griffe.Kind href "" "griffe.Kind"
            
```

Enumeration of the different object kinds.

Attributes:

- **`ALIAS`** – Aliases (imported objects).
- **`ATTRIBUTE`** – Attributes and properties.
- **`CLASS`** – Classes.
- **`FUNCTION`** – Functions and methods.
- **`MODULE`** – Modules.

### ALIAS

```
ALIAS = 'alias'

```

Aliases (imported objects).

### ATTRIBUTE

```
ATTRIBUTE = 'attribute'

```

Attributes and properties.

### CLASS

```
CLASS = 'class'

```

Classes.

### FUNCTION

```
FUNCTION = 'function'

```

Functions and methods.

### MODULE

```
MODULE = 'module'

```

Modules.

## **Models base classes**

## GetMembersMixin

Mixin class to share methods for accessing members.

Methods:

- **`get_member`** – Get a member with its name or path.
- **`__getitem__`** – Same as get_member, with the item syntax [].

### __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

### get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## SetMembersMixin

Mixin class to share methods for setting members.

Methods:

- **`set_member`** – Set a member with its name or path.
- **`__setitem__`** – Same as set_member, with the item syntax [].

### __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

### set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

## DelMembersMixin

Mixin class to share methods for deleting members.

Methods:

- **`del_member`** – Delete a member with its name or path.
- **`__delitem__`** – Same as del_member, with the item syntax [].

### __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

### del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## SerializationMixin

Mixin class to share methods for de/serializing objects.

Methods:

- **`as_json`** – Return this object's data as a JSON string.
- **`from_json`** – Create an instance of this class from a JSON string.

### as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

### from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- #### **`json_string`**

  (`str`) – JSON to decode into Object.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## ObjectAliasMixin

Bases: `GetMembersMixin`, `SetMembersMixin`, `DelMembersMixin`, `SerializationMixin`

```

              flowchart TD
              griffe.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.mixins.GetMembersMixin --> griffe.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> griffe.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> griffe.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> griffe.ObjectAliasMixin
                


              click griffe.ObjectAliasMixin href "" "griffe.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

Mixin class to share methods that appear both in objects and aliases, unchanged.

Attributes:

- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`modules`** (`dict[str, Module]`) – The module members.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.

Methods:

- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__setitem__`** – Set a member with its name or path.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`set_member`** – Set a member with its name or path.

### all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

### attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

### classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

### functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

### is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

### is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

### is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

### is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

### is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

### is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

### is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

### is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

### modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

### __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

### __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

### __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

### as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

### del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

### from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- #### **`json_string`**

  (`str`) – JSON to decode into Object.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

### get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

### set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

## Object

```
Object(
    name: str,
    *,
    lineno: int | None = None,
    endlineno: int | None = None,
    runtime: bool = True,
    docstring: Docstring | None = None,
    parent: Module | Class | None = None,
    lines_collection: LinesCollection | None = None,
    modules_collection: ModulesCollection | None = None,
)

```

Bases: `ObjectAliasMixin`

```

              flowchart TD
              griffe.Object[Object]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.mixins.ObjectAliasMixin --> griffe.Object
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                



              click griffe.Object href "" "griffe.Object"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

An abstract class representing a Python object.

Parameters:

- ### **`name`**

  (`str`) – The object name, as declared in the code.

- ### **`lineno`**

  (`int | None`, default: `None` ) – The object starting line, or None for modules. Lines start at 1.

- ### **`endlineno`**

  (`int | None`, default: `None` ) – The object ending line (inclusive), or None for modules.

- ### **`runtime`**

  (`bool`, default: `True` ) – Whether this object is present at runtime or not.

- ### **`docstring`**

  (`Docstring | None`, default: `None` ) – The object docstring.

- ### **`parent`**

  (`Module | Class | None`, default: `None` ) – The object parent.

- ### **`lines_collection`**

  (`LinesCollection | None`, default: `None` ) – A collection of source code lines.

- ### **`modules_collection`**

  (`ModulesCollection | None`, default: `None` ) – A collection of modules.

Methods:

- **`__bool__`** – An object is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The number of members in this object, recursively.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this object's data as a dictionary.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`deprecated`** (`bool | str | None`) – Whether this object is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The object docstring.
- **`endlineno`** (`int | None`) – The ending line number of the object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict[str, dict[str, Any]]`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path (or directory list for namespace packages) where this object was defined.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this object has a docstring (empty or not).
- **`has_docstrings`** (`bool`) – Whether this object or any of its members has a docstring (empty or not).
- **`imports`** (`dict[str, str]`) – The other objects imported by this object.
- **`inherited`** (`bool`) – Always false for objects.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always false for objects.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for objects.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this object is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this object is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this object is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this object is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this object is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** (`Kind`) – The object kind.
- **`labels`** (`set[str]`) – The object labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The object members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to this object or its parents.
- **`name`** (`str`) – The object name.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parent`** (`Module | Class | None`) – The parent of the object (none if top module).
- **`path`** (`str`) – The dotted path of this object.
- **`public`** (`bool | None`) – Whether this object is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`runtime`** (`bool`) – Whether this object is available at runtime.
- **`source`** (`str`) – The source code of this object.

### aliases

```
aliases: dict[str, Alias] = {}

```

The aliases pointing to this object.

### all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

### attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

### canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

### classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

### deprecated

```
deprecated: bool | str | None = None

```

Whether this object is deprecated (boolean or deprecation message).

### docstring

```
docstring: Docstring | None = docstring

```

The object docstring.

See also: has_docstring, has_docstrings.

### endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the object.

See also: lineno.

### exports

```
exports: list[str | ExprName] | None = None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

### extra

```
extra: dict[str, dict[str, Any]] = defaultdict(dict)

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

### filepath

```
filepath: Path | list[Path]

```

The file path (or directory list for namespace packages) where this object was defined.

See also: relative_filepath, relative_package_filepath.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown.filepath
PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')

```

### functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

### has_docstring

```
has_docstring: bool

```

Whether this object has a docstring (empty or not).

See also: docstring, has_docstrings.

### has_docstrings

```
has_docstrings: bool

```

Whether this object or any of its members has a docstring (empty or not).

Inherited members are not considered. Imported members are not considered, unless they are also public.

See also: docstring, has_docstring.

### imports

```
imports: dict[str, str] = {}

```

The other objects imported by this object.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

### inherited

```
inherited: bool = False

```

Always false for objects.

Only aliases can be marked as inherited.

### inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

### is_alias

```
is_alias: bool = False

```

Always false for objects.

### is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module. is_class, is_function, is_alias, is_kind.

### is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module. is_function, is_attribute, is_alias, is_kind.

### is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

### is_collection

```
is_collection: bool = False

```

Always false for objects.

### is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

### is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

### is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module. is_class, is_attribute, is_alias, is_kind.

### is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

### is_init_module

```
is_init_module: bool

```

Whether this object is an `__init__.py` module.

See also: is_module.

### is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

### is_namespace_package

```
is_namespace_package: bool

```

Whether this object is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

### is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this object is a namespace subpackage.

See also: is_namespace_package.

### is_package

```
is_package: bool

```

Whether this object is a package (top module).

See also: is_subpackage.

### is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

### is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

### is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

### is_subpackage

```
is_subpackage: bool

```

Whether this object is a subpackage.

See also: is_package.

### is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

### kind

```
kind: Kind

```

The object kind.

### labels

```
labels: set[str] = set()

```

The object labels (`property`, `dataclass`, etc.).

See also: has_labels.

### lineno

```
lineno: int | None = lineno

```

The starting line number of the object.

See also: endlineno.

### lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: lines_collection, source.

### lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

### members

```
members: dict[str, Object | Alias] = {}

```

The object members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

### module

```
module: Module

```

The parent module of this object.

See also: package.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))
>>> # The `module` of a module is itself.
>>> markdown["core"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))

```

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

### modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

### modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to this object or its parents.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

### name

```
name: str = name

```

The object name.

### package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].package
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))

```

### parent

```
parent: Module | Class | None = parent

```

The parent of the object (none if top module).

### path

```
path: str

```

The dotted path of this object.

On regular objects (not aliases), the path is the canonical path.

See also: canonical_path.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].path
'markdown.core.Markdown.references'

```

### public

```
public: bool | None = None

```

Whether this object is public.

### relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

### relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

### runtime

```
runtime: bool = runtime

```

Whether this object is available at runtime.

Typically, type-guarded objects (under an `if TYPE_CHECKING` condition) are not available at runtime.

### source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

### __bool__

```
__bool__() -> bool

```

An object is always true-ish.

### __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

### __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

### __len__

```
__len__() -> int

```

The number of members in this object, recursively.

### __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this object's data as a dictionary.

See also: as_json.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

### del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

### filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members.

Parameters:

- #### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

### from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- #### **`json_string`**

  (`str`) – JSON to decode into Object.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

### get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

### has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- #### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

### is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- #### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

### resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- #### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

### set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- #### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- #### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

# Serializers

## **Main API**

See the as_json() and from_json() methods of objects.

## **Advanced API**

## JSONEncoder

```
JSONEncoder(*args: Any, full: bool = False, **kwargs: Any)

```

Bases: `JSONEncoder`

```

              flowchart TD
              griffe.JSONEncoder[JSONEncoder]

              

              click griffe.JSONEncoder href "" "griffe.JSONEncoder"
            
```

JSON encoder.

JSON encoders can be used directly, or through the json.dump or json.dumps methods.

Examples:

```
>>> from griffe import JSONEncoder
>>> JSONEncoder(full=True).encode(..., **kwargs)

```

```
>>> import json
>>> from griffe import JSONEncoder
>>> json.dumps(..., cls=JSONEncoder, full=True, **kwargs)

```

Parameters:

- ### **`*args`**

  (`Any`, default: `()` ) – See json.JSONEncoder.

- ### **`full`**

  (`bool`, default: `False` ) – Whether to dump full data or base data. If you plan to reload the data in Python memory using the json_decoder, you don't need the full data as it can be inferred again using the base data. If you want to feed a non-Python tool instead, dump the full data.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – See json.JSONEncoder.

Methods:

- **`default`** – Return a serializable representation of the given object.

Attributes:

- **`full`** (`bool`) – Whether to dump full data or base data.

### full

```
full: bool = full

```

Whether to dump full data or base data.

### default

```
default(obj: Any) -> Any

```

Return a serializable representation of the given object.

Parameters:

- #### **`obj`**

  (`Any`) – The object to serialize.

Returns:

- `Any` – A serializable representation.

## json_decoder

```
json_decoder(
    obj_dict: dict[str, Any],
) -> (
    dict[str, Any] | Object | Alias | Parameter | str | Expr
)

```

Decode dictionaries as data classes.

The json.loads method walks the tree from bottom to top.

Examples:

```
>>> import json
>>> from griffe import json_decoder
>>> json.loads(..., object_hook=json_decoder)

```

Parameters:

- ### **`obj_dict`**

  (`dict[str, Any]`) – The dictionary to decode.

Returns:

- `dict[str, Any] | Object | Alias | Parameter | str | Expr` – An instance of a data class.

# Docstring models

## **Main API**

## Docstring

```
Docstring(
    value: str,
    *,
    lineno: int | None = None,
    endlineno: int | None = None,
    parent: Object | None = None,
    parser: DocstringStyle | Parser | None = None,
    parser_options: dict[str, Any] | None = None,
)

```

This class represents docstrings.

Parameters:

- ### **`value`**

  (`str`) – The docstring value.

- ### **`lineno`**

  (`int | None`, default: `None` ) – The starting line number.

- ### **`endlineno`**

  (`int | None`, default: `None` ) – The ending line number.

- ### **`parent`**

  (`Object | None`, default: `None` ) – The parent object on which this docstring is attached.

- ### **`parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. By default, no parsing is done.

- ### **`parser_options`**

  (`dict[str, Any] | None`, default: `None` ) – Additional docstring parsing options.

Methods:

- **`as_dict`** – Return this docstring's data as a dictionary.
- **`parse`** – Parse the docstring into structured data.

Attributes:

- **`endlineno`** (`int | None`) – The ending line number of the docstring.
- **`lineno`** (`int | None`) – The starting line number of the docstring.
- **`lines`** (`list[str]`) – The lines of the docstring.
- **`parent`** (`Object | None`) – The object this docstring is attached to.
- **`parsed`** (`list[DocstringSection]`) – The docstring sections, parsed into structured data.
- **`parser`** (`DocstringStyle | Parser | None`) – The selected docstring parser.
- **`parser_options`** (`dict[str, Any]`) – The configured parsing options.
- **`source`** (`str`) – The original, uncleaned value of the docstring as written in the source.
- **`value`** (`str`) – The original value of the docstring, cleaned by inspect.cleandoc.

### endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the docstring.

See also: lineno.

### lineno

```
lineno: int | None = lineno

```

The starting line number of the docstring.

See also: endlineno.

### lines

```
lines: list[str]

```

The lines of the docstring.

See also: source.

### parent

```
parent: Object | None = parent

```

The object this docstring is attached to.

### parsed

```
parsed: list[DocstringSection]

```

The docstring sections, parsed into structured data.

### parser

```
parser: DocstringStyle | Parser | None = parser

```

The selected docstring parser.

See also: parser_options, parse.

### parser_options

```
parser_options: dict[str, Any] = parser_options or {}

```

The configured parsing options.

See also: parser, parse.

### source

```
source: str

```

The original, uncleaned value of the docstring as written in the source.

See also: value.

### value

```
value: str = cleandoc(rstrip())

```

The original value of the docstring, cleaned by `inspect.cleandoc`.

See also: source.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this docstring's data as a dictionary.

Parameters:

- #### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

### parse

```
parse(
    parser: DocstringStyle | Parser | None = None,
    **options: Any,
) -> list[DocstringSection]

```

Parse the docstring into structured data.

See also: parser, parser_options.

Parameters:

- #### **`parser`**

  (`DocstringStyle | Parser | None`, default: `None` ) – The docstring parser to use. In order: use the given parser, or the self parser, or no parser (return a single text section).

- #### **`**options`**

  (`Any`, default: `{}` ) – Additional docstring parsing options.

Returns:

- `list[DocstringSection]` – The parsed docstring as a list of sections.

## **Advanced API: Sections**

## DocstringSectionKind

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.DocstringSectionKind[DocstringSectionKind]

              

              click griffe.DocstringSectionKind href "" "griffe.DocstringSectionKind"
            
```

Enumeration of the possible docstring section kinds.

Attributes:

- **`admonition`** – Admonition block.
- **`attributes`** – Attributes section.
- **`classes`** – Classes section.
- **`deprecated`** – Deprecation section.
- **`examples`** – Examples section.
- **`functions`** – Functions section.
- **`modules`** – Modules section.
- **`other_parameters`** – Other parameters (keyword arguments) section.
- **`parameters`** – Parameters section.
- **`raises`** – Raises (exceptions) section.
- **`receives`** – Received value(s) (generators) section.
- **`returns`** – Returned value(s) section.
- **`text`** – Text section.
- **`warns`** – Warnings section.
- **`yields`** – Yielded value(s) (generators) section.

### admonition

```
admonition = 'admonition'

```

Admonition block.

### attributes

```
attributes = 'attributes'

```

Attributes section.

### classes

```
classes = 'classes'

```

Classes section.

### deprecated

```
deprecated = 'deprecated'

```

Deprecation section.

### examples

```
examples = 'examples'

```

Examples section.

### functions

```
functions = 'functions'

```

Functions section.

### modules

```
modules = 'modules'

```

Modules section.

### other_parameters

```
other_parameters = 'other parameters'

```

Other parameters (keyword arguments) section.

### parameters

```
parameters = 'parameters'

```

Parameters section.

### raises

```
raises = 'raises'

```

Raises (exceptions) section.

### receives

```
receives = 'receives'

```

Received value(s) (generators) section.

### returns

```
returns = 'returns'

```

Returned value(s) section.

### text

```
text = 'text'

```

Text section.

### warns

```
warns = 'warns'

```

Warnings section.

### yields

```
yields = 'yields'

```

Yielded value(s) (generators) section.

## DocstringSectionText

```
DocstringSectionText(value: str, title: str | None = None)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionText[DocstringSectionText]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionText
                


              click griffe.DocstringSectionText href "" "griffe.DocstringSectionText"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a text section.

Parameters:

- ### **`value`**

  (`str`) – The section text.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`str`) – The section value.

### kind

```
kind: DocstringSectionKind = text

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: str = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionParameters

```
DocstringSectionParameters(
    value: list[DocstringParameter],
    title: str | None = None,
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionParameters[DocstringSectionParameters]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionParameters
                


              click griffe.DocstringSectionParameters href "" "griffe.DocstringSectionParameters"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a parameters section.

Parameters:

- ### **`value`**

  (`list[DocstringParameter]`) – The section parameters.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringParameter]`) – The section value.

### kind

```
kind: DocstringSectionKind = parameters

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringParameter] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionOtherParameters

```
DocstringSectionOtherParameters(
    value: list[DocstringParameter],
    title: str | None = None,
)

```

Bases: `DocstringSectionParameters`

```

              flowchart TD
              griffe.DocstringSectionOtherParameters[DocstringSectionOtherParameters]
              _griffe.docstrings.models.DocstringSectionParameters[DocstringSectionParameters]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSectionParameters --> griffe.DocstringSectionOtherParameters
                                _griffe.docstrings.models.DocstringSection --> _griffe.docstrings.models.DocstringSectionParameters
                



              click griffe.DocstringSectionOtherParameters href "" "griffe.DocstringSectionOtherParameters"
              click _griffe.docstrings.models.DocstringSectionParameters href "" "_griffe.docstrings.models.DocstringSectionParameters"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents an other parameters section.

Parameters:

- ### **`value`**

  (`list[DocstringParameter]`) – The section parameters.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringParameter]`) – The section value.

### kind

```
kind: DocstringSectionKind = other_parameters

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringParameter] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionRaises

```
DocstringSectionRaises(
    value: list[DocstringRaise], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionRaises[DocstringSectionRaises]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionRaises
                


              click griffe.DocstringSectionRaises href "" "griffe.DocstringSectionRaises"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a raises section.

Parameters:

- ### **`value`**

  (`list[DocstringRaise]`) – The section exceptions.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringRaise]`) – The section value.

### kind

```
kind: DocstringSectionKind = raises

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringRaise] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionWarns

```
DocstringSectionWarns(
    value: list[DocstringWarn], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionWarns[DocstringSectionWarns]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionWarns
                


              click griffe.DocstringSectionWarns href "" "griffe.DocstringSectionWarns"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a warns section.

Parameters:

- ### **`value`**

  (`list[DocstringWarn]`) – The section warnings.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringWarn]`) – The section value.

### kind

```
kind: DocstringSectionKind = warns

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringWarn] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionReturns

```
DocstringSectionReturns(
    value: list[DocstringReturn], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionReturns[DocstringSectionReturns]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionReturns
                


              click griffe.DocstringSectionReturns href "" "griffe.DocstringSectionReturns"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a returns section.

Parameters:

- ### **`value`**

  (`list[DocstringReturn]`) – The section returned items.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringReturn]`) – The section value.

### kind

```
kind: DocstringSectionKind = returns

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringReturn] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionYields

```
DocstringSectionYields(
    value: list[DocstringYield], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionYields[DocstringSectionYields]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionYields
                


              click griffe.DocstringSectionYields href "" "griffe.DocstringSectionYields"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a yields section.

Parameters:

- ### **`value`**

  (`list[DocstringYield]`) – The section yielded items.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringYield]`) – The section value.

### kind

```
kind: DocstringSectionKind = yields

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringYield] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionReceives

```
DocstringSectionReceives(
    value: list[DocstringReceive], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionReceives[DocstringSectionReceives]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionReceives
                


              click griffe.DocstringSectionReceives href "" "griffe.DocstringSectionReceives"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a receives section.

Parameters:

- ### **`value`**

  (`list[DocstringReceive]`) – The section received items.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringReceive]`) – The section value.

### kind

```
kind: DocstringSectionKind = receives

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringReceive] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionExamples

```
DocstringSectionExamples(
    value: list[tuple[Literal[text, examples], str]],
    title: str | None = None,
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionExamples[DocstringSectionExamples]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionExamples
                


              click griffe.DocstringSectionExamples href "" "griffe.DocstringSectionExamples"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents an examples section.

Parameters:

- ### **`value`**

  (`list[tuple[Literal[text, examples], str]]`) – The section examples.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[tuple[Literal[text, examples], str]]`) – The section value.

### kind

```
kind: DocstringSectionKind = examples

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[tuple[Literal[text, examples], str]] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionAttributes

```
DocstringSectionAttributes(
    value: list[DocstringAttribute],
    title: str | None = None,
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionAttributes[DocstringSectionAttributes]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionAttributes
                


              click griffe.DocstringSectionAttributes href "" "griffe.DocstringSectionAttributes"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents an attributes section.

Parameters:

- ### **`value`**

  (`list[DocstringAttribute]`) – The section attributes.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringAttribute]`) – The section value.

### kind

```
kind: DocstringSectionKind = attributes

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringAttribute] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionFunctions

```
DocstringSectionFunctions(
    value: list[DocstringFunction], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionFunctions[DocstringSectionFunctions]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionFunctions
                


              click griffe.DocstringSectionFunctions href "" "griffe.DocstringSectionFunctions"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a functions/methods section.

Parameters:

- ### **`value`**

  (`list[DocstringFunction]`) – The section functions.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringFunction]`) – The section value.

### kind

```
kind: DocstringSectionKind = functions

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringFunction] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionClasses

```
DocstringSectionClasses(
    value: list[DocstringClass], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionClasses[DocstringSectionClasses]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionClasses
                


              click griffe.DocstringSectionClasses href "" "griffe.DocstringSectionClasses"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a classes section.

Parameters:

- ### **`value`**

  (`list[DocstringClass]`) – The section classes.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringClass]`) – The section value.

### kind

```
kind: DocstringSectionKind = classes

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringClass] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionModules

```
DocstringSectionModules(
    value: list[DocstringModule], title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionModules[DocstringSectionModules]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionModules
                


              click griffe.DocstringSectionModules href "" "griffe.DocstringSectionModules"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a modules section.

Parameters:

- ### **`value`**

  (`list[DocstringModule]`) – The section modules.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`list[DocstringModule]`) – The section value.

### kind

```
kind: DocstringSectionKind = modules

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: list[DocstringModule] = value

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionDeprecated

```
DocstringSectionDeprecated(
    version: str, text: str, title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionDeprecated[DocstringSectionDeprecated]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionDeprecated
                


              click griffe.DocstringSectionDeprecated href "" "griffe.DocstringSectionDeprecated"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents a deprecated section.

Parameters:

- ### **`version`**

  (`str`) – The deprecation version.

- ### **`text`**

  (`str`) – The deprecation text.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`DocstringDeprecated`) – The section value.

### kind

```
kind: DocstringSectionKind = deprecated

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: DocstringDeprecated = DocstringDeprecated(
    annotation=version, description=text
)

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSectionAdmonition

```
DocstringSectionAdmonition(
    kind: str, text: str, title: str | None = None
)

```

Bases: `DocstringSection`

```

              flowchart TD
              griffe.DocstringSectionAdmonition[DocstringSectionAdmonition]
              _griffe.docstrings.models.DocstringSection[DocstringSection]

                              _griffe.docstrings.models.DocstringSection --> griffe.DocstringSectionAdmonition
                


              click griffe.DocstringSectionAdmonition href "" "griffe.DocstringSectionAdmonition"
              click _griffe.docstrings.models.DocstringSection href "" "_griffe.docstrings.models.DocstringSection"
            
```

This class represents an admonition section.

Parameters:

- ### **`kind`**

  (`str`) – The admonition kind.

- ### **`text`**

  (`str`) – The admonition text.

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`DocstringAdmonition`) – The section value.

### kind

```
kind: DocstringSectionKind = admonition

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: DocstringAdmonition = DocstringAdmonition(
    annotation=kind, description=text
)

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## **Advanced API: Section items**

## DocstringAdmonition

```
DocstringAdmonition(
    *,
    description: str,
    annotation: str | Expr | None = None,
)

```

Bases: `DocstringElement`

```

              flowchart TD
              griffe.DocstringAdmonition[DocstringAdmonition]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringElement --> griffe.DocstringAdmonition
                


              click griffe.DocstringAdmonition href "" "griffe.DocstringAdmonition"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents an admonition.

Parameters:

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`description`**

  (`str`) – The element description.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`contents`** (`str`) – The contents of this admonition.
- **`description`** (`str`) – The element description.
- **`kind`** (`str | Expr | None`) – The kind of this admonition.

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### contents

```
contents: str

```

The contents of this admonition.

### description

```
description: str = description

```

The element description.

### kind

```
kind: str | Expr | None

```

The kind of this admonition.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringDeprecated

```
DocstringDeprecated(
    *,
    description: str,
    annotation: str | Expr | None = None,
)

```

Bases: `DocstringElement`

```

              flowchart TD
              griffe.DocstringDeprecated[DocstringDeprecated]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringElement --> griffe.DocstringDeprecated
                


              click griffe.DocstringDeprecated href "" "griffe.DocstringDeprecated"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented deprecated item.

Parameters:

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`description`**

  (`str`) – The element description.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`version`** (`str`) – The version of this deprecation.

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### version

```
version: str

```

The version of this deprecation.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringRaise

```
DocstringRaise(
    *,
    description: str,
    annotation: str | Expr | None = None,
)

```

Bases: `DocstringElement`

```

              flowchart TD
              griffe.DocstringRaise[DocstringRaise]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringElement --> griffe.DocstringRaise
                


              click griffe.DocstringRaise href "" "griffe.DocstringRaise"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented raise value.

Parameters:

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`description`**

  (`str`) – The element description.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringWarn

```
DocstringWarn(
    *,
    description: str,
    annotation: str | Expr | None = None,
)

```

Bases: `DocstringElement`

```

              flowchart TD
              griffe.DocstringWarn[DocstringWarn]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringElement --> griffe.DocstringWarn
                


              click griffe.DocstringWarn href "" "griffe.DocstringWarn"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented warn value.

Parameters:

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`description`**

  (`str`) – The element description.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringReturn

```
DocstringReturn(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringReturn[DocstringReturn]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringReturn
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringReturn href "" "griffe.DocstringReturn"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented return value.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringYield

```
DocstringYield(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringYield[DocstringYield]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringYield
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringYield href "" "griffe.DocstringYield"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented yield value.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringReceive

```
DocstringReceive(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringReceive[DocstringReceive]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringReceive
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringReceive href "" "griffe.DocstringReceive"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented receive value.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringParameter

```
DocstringParameter(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringParameter[DocstringParameter]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringParameter
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringParameter href "" "griffe.DocstringParameter"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represent a documented function parameter.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`default`** (`str | None`) – The default value of this parameter.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### default

```
default: str | None

```

The default value of this parameter.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringAttribute

```
DocstringAttribute(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringAttribute[DocstringAttribute]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringAttribute
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringAttribute href "" "griffe.DocstringAttribute"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented module/class attribute.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringFunction

```
DocstringFunction(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringFunction[DocstringFunction]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringFunction
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringFunction href "" "griffe.DocstringFunction"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented function.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`signature`** (`str | Expr | None`) – The function signature.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### signature

```
signature: str | Expr | None

```

The function signature.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringClass

```
DocstringClass(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringClass[DocstringClass]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringClass
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringClass href "" "griffe.DocstringClass"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented class.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`signature`** (`str | Expr | None`) – The class signature.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### signature

```
signature: str | Expr | None

```

The class signature.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringModule

```
DocstringModule(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringNamedElement`

```

              flowchart TD
              griffe.DocstringModule[DocstringModule]
              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringNamedElement --> griffe.DocstringModule
                                _griffe.docstrings.models.DocstringElement --> _griffe.docstrings.models.DocstringNamedElement
                



              click griffe.DocstringModule href "" "griffe.DocstringModule"
              click _griffe.docstrings.models.DocstringNamedElement href "" "_griffe.docstrings.models.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This class represents a documented module.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## **Models base classes**

## DocstringElement

```
DocstringElement(
    *,
    description: str,
    annotation: str | Expr | None = None,
)

```

This base class represents annotated, nameless elements.

Parameters:

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`description`**

  (`str`) – The element description.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringNamedElement

```
DocstringNamedElement(
    name: str,
    *,
    description: str,
    annotation: str | Expr | None = None,
    value: str | None = None,
)

```

Bases: `DocstringElement`

```

              flowchart TD
              griffe.DocstringNamedElement[DocstringNamedElement]
              _griffe.docstrings.models.DocstringElement[DocstringElement]

                              _griffe.docstrings.models.DocstringElement --> griffe.DocstringNamedElement
                


              click griffe.DocstringNamedElement href "" "griffe.DocstringNamedElement"
              click _griffe.docstrings.models.DocstringElement href "" "_griffe.docstrings.models.DocstringElement"
            
```

This base class represents annotated, named elements.

Parameters:

- ### **`name`**

  (`str`) – The element name.

- ### **`description`**

  (`str`) – The element description.

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The element annotation, if any.

- ### **`value`**

  (`str | None`, default: `None` ) – The element value, as a string.

Methods:

- **`as_dict`** – Return this element's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The element annotation.
- **`description`** (`str`) – The element description.
- **`name`** (`str`) – The element name.
- **`value`** (`str | None`) – The element value, if any

### annotation

```
annotation: str | Expr | None = annotation

```

The element annotation.

### description

```
description: str = description

```

The element description.

### name

```
name: str = name

```

The element name.

### value

```
value: str | None = value

```

The element value, if any

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this element's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## DocstringSection

```
DocstringSection(title: str | None = None)

```

This class represents a docstring section.

Parameters:

- ### **`title`**

  (`str | None`, default: `None` ) – An optional title.

Methods:

- **`__bool__`** – Whether this section has a true-ish value.
- **`as_dict`** – Return this section's data as a dictionary.

Attributes:

- **`kind`** (`DocstringSectionKind`) – The section kind.
- **`title`** (`str | None`) – The section title.
- **`value`** (`Any`) – The section value.

### kind

```
kind: DocstringSectionKind

```

The section kind.

### title

```
title: str | None = title

```

The section title.

### value

```
value: Any = None

```

The section value.

### __bool__

```
__bool__() -> bool

```

Whether this section has a true-ish value.

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this section's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

# Docstring parsers

## **Main API**

## parse

```
parse(
    docstring: Docstring,
    parser: DocstringStyle | Parser | None,
    **options: Any,
) -> list[DocstringSection]

```

Parse the docstring.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`parser`**

  (`DocstringStyle | Parser | None`) – The docstring parser to use. If None, return a single text section.

- ### **`**options`**

  (`Any`, default: `{}` ) – The options accepted by the parser.

Returns:

- `list[DocstringSection]` – A list of docstring sections.

## parse_auto

```
parse_auto(
    docstring: Docstring,
    *,
    method: DocstringDetectionMethod = "heuristics",
    style_order: list[Parser]
    | list[DocstringStyle]
    | None = None,
    default: Parser | DocstringStyle | None = None,
    per_style_options: dict[
        Parser | DocstringStyle, dict[str, Any]
    ]
    | None = None,
    **options: Any,
) -> list[DocstringSection]

```

Parse a docstring by automatically detecting the style it uses.

[Sponsors only](../../../../insiders/) — [Insiders 1.3.0](../../../../insiders/changelog/#1.3.0).

See infer_docstring_style for more information on the available parameters.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`method`**

  (`DocstringDetectionMethod`, default: `'heuristics'` ) – The method to use to infer the parser.

- ### **`style_order`**

  (`list[Parser] | list[DocstringStyle] | None`, default: `None` ) – The order of the styles to try when inferring the parser.

- ### **`default`**

  (`Parser | DocstringStyle | None`, default: `None` ) – The default parser to use if the inference fails.

- ### **`per_style_options`**

  (`dict[Parser | DocstringStyle, dict[str, Any]] | None`, default: `None` ) – Additional parsing options per style.

- ### **`**options`**

  (`Any`, default: `{}` ) – Deprecated. Use per_style_options instead.

Returns:

- `list[DocstringSection]` – A list of docstring sections.

## parse_google

```
parse_google(
    docstring: Docstring,
    *,
    ignore_init_summary: bool = False,
    trim_doctest_flags: bool = True,
    returns_multiple_items: bool = True,
    returns_named_value: bool = True,
    returns_type_in_property_summary: bool = False,
    receives_multiple_items: bool = True,
    receives_named_value: bool = True,
    warn_unknown_params: bool = True,
    **options: Any,
) -> list[DocstringSection]

```

Parse a Google-style docstring.

This function iterates on lines of a docstring to build sections. It then returns this list of sections.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`ignore_init_summary`**

  (`bool`, default: `False` ) – Whether to ignore the summary in __init__ methods' docstrings.

- ### **`trim_doctest_flags`**

  (`bool`, default: `True` ) – Whether to remove doctest flags from Python example blocks.

- ### **`returns_multiple_items`**

  (`bool`, default: `True` ) – Whether to parse multiple items in Yields and Returns sections. When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.

- ### **`returns_named_value`**

  (`bool`, default: `True` ) – Whether to parse Yields and Returns section items as name and description, rather than type and description. When true, type must be wrapped in parentheses: (int): Description.. Names are optional: name (int): Description.. When false, parentheses are optional but the items cannot be named: int: Description.

- ### **`receives_multiple_items`**

  (`bool`, default: `True` ) – Whether to parse multiple items in Receives sections. When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.

- ### **`receives_named_value`**

  (`bool`, default: `True` ) – Whether to parse Receives section items as name and description, rather than type and description. When true, type must be wrapped in parentheses: (int): Description.. Names are optional: name (int): Description.. When false, parentheses are optional but the items cannot be named: int: Description.

- ### **`returns_type_in_property_summary`**

  (`bool`, default: `False` ) – Whether to parse the return type of properties at the beginning of their summary: str: Summary of the property.

- ### **`warn_unknown_params`**

  (`bool`, default: `True` ) – Warn about documented parameters not appearing in the signature.

- ### **`**options`**

  (`Any`, default: `{}` ) – Additional parsing options.

Returns:

- `list[DocstringSection]` – A list of docstring sections.

## parse_numpy

```
parse_numpy(
    docstring: Docstring,
    *,
    ignore_init_summary: bool = False,
    trim_doctest_flags: bool = True,
    warn_unknown_params: bool = True,
    **options: Any,
) -> list[DocstringSection]

```

Parse a Numpydoc-style docstring.

This function iterates on lines of a docstring to build sections. It then returns this list of sections.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`ignore_init_summary`**

  (`bool`, default: `False` ) – Whether to ignore the summary in __init__ methods' docstrings.

- ### **`trim_doctest_flags`**

  (`bool`, default: `True` ) – Whether to remove doctest flags from Python example blocks.

- ### **`warn_unknown_params`**

  (`bool`, default: `True` ) – Warn about documented parameters not appearing in the signature.

- ### **`**options`**

  (`Any`, default: `{}` ) – Additional parsing options.

Returns:

- `list[DocstringSection]` – A list of docstring sections.

## parse_sphinx

```
parse_sphinx(
    docstring: Docstring,
    *,
    warn_unknown_params: bool = True,
    **options: Any,
) -> list[DocstringSection]

```

Parse a Sphinx-style docstring.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`warn_unknown_params`**

  (`bool`, default: `True` ) – Warn about documented parameters not appearing in the signature.

- ### **`**options`**

  (`Any`, default: `{}` ) – Additional parsing options.

Returns:

- `list[DocstringSection]` – A list of docstring sections.

## DocstringStyle

```
DocstringStyle = Literal[
    "google", "numpy", "sphinx", "auto"
]

```

The supported docstring styles (literal values of the Parser enumeration).

## **Advanced API**

## Parser

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.Parser[Parser]

              

              click griffe.Parser href "" "griffe.Parser"
            
```

Enumeration of the different docstring parsers.

Attributes:

- **`auto`** – Infer docstring parser.
- **`google`** – Google-style docstrings parser.
- **`numpy`** – Numpydoc-style docstrings parser.
- **`sphinx`** – Sphinx-style docstrings parser.

### auto

```
auto = 'auto'

```

Infer docstring parser.

[Sponsors only](../../../../insiders/) — [Insiders 1.3.0](../../../../insiders/changelog/#1.3.0).

### google

```
google = 'google'

```

Google-style docstrings parser.

### numpy

```
numpy = 'numpy'

```

Numpydoc-style docstrings parser.

### sphinx

```
sphinx = 'sphinx'

```

Sphinx-style docstrings parser.

## parsers

```
parsers: dict[
    Parser, Callable[[Docstring], list[DocstringSection]]
] = {
    auto: parse_auto,
    google: parse_google,
    sphinx: parse_sphinx,
    numpy: parse_numpy,
}

```

## parse_docstring_annotation

```
parse_docstring_annotation(
    annotation: str,
    docstring: Docstring,
    log_level: LogLevel = error,
) -> str | Expr

```

Parse a string into a true name or expression that can be resolved later.

Parameters:

- ### **`annotation`**

  (`str`) – The annotation to parse.

- ### **`docstring`**

  (`Docstring`) – The docstring in which the annotation appears. The docstring's parent is accessed to bind a resolver to the resulting name/expression.

- ### **`log_level`**

  (`LogLevel`, default: `error` ) – Log level to use to log a message.

Returns:

- `str | Expr` – The string unchanged, or a new name or expression.

## docstring_warning

```
docstring_warning(
    docstring: Docstring,
    offset: int,
    message: str,
    log_level: LogLevel = warning,
) -> None

```

Log a warning when parsing a docstring.

This function logs a warning message by prefixing it with the filepath and line number.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring object.

- ### **`offset`**

  (`int`) – The offset in the docstring lines.

- ### **`message`**

  (`str`) – The message to log.

Returns:

- `None` – A function used to log parsing warnings if name was passed, else none.

## DocstringDetectionMethod

```
DocstringDetectionMethod = Literal[
    "heuristics", "max_sections"
]

```

The supported methods to infer docstring styles.

## infer_docstring_style

```
infer_docstring_style(
    docstring: Docstring,
    *,
    method: DocstringDetectionMethod = "heuristics",
    style_order: list[Parser]
    | list[DocstringStyle]
    | None = None,
    default: Parser | DocstringStyle | None = None,
    per_style_options: dict[
        Parser | DocstringStyle, dict[str, Any]
    ]
    | None = None,
    **options: Any,
) -> tuple[Parser | None, list[DocstringSection] | None]

```

Infer the parser to use for the docstring.

[Sponsors only](../../../../insiders/) — [Insiders 1.3.0](../../../../insiders/changelog/#1.3.0).

The 'heuristics' method uses regular expressions. The 'max_sections' method parses the docstring with all parsers specified in `style_order` and returns the one who parsed the most sections.

If heuristics fail, the `default` parser is returned. If multiple parsers parsed the same number of sections, `style_order` is used to decide which one to return. The `default` parser is never used with the 'max_sections' method.

For non-Insiders versions, `default` is returned if specified, else the first parser in `style_order` is returned. If `style_order` is not specified, `None` is returned.

Additional options are parsed to the detected parser, if any.

Parameters:

- ### **`docstring`**

  (`Docstring`) – The docstring to parse.

- ### **`method`**

  (`DocstringDetectionMethod`, default: `'heuristics'` ) – The method to use to infer the parser.

- ### **`style_order`**

  (`list[Parser] | list[DocstringStyle] | None`, default: `None` ) – The order of the styles to try when inferring the parser.

- ### **`default`**

  (`Parser | DocstringStyle | None`, default: `None` ) – The default parser to use if the inference fails.

- ### **`per_style_options`**

  (`dict[Parser | DocstringStyle, dict[str, Any]] | None`, default: `None` ) – Additional parsing options per style.

- ### **`**options`**

  (`Any`, default: `{}` ) – Deprecated. Use per_style_options instead.

Returns:

- `tuple[Parser | None, list[DocstringSection] | None]` – The inferred parser, and optionally parsed sections (when method is 'max_sections').

# Alias

```
Alias(
    name: str,
    target: str | Object | Alias,
    *,
    lineno: int | None = None,
    endlineno: int | None = None,
    runtime: bool = True,
    parent: Module | Class | Alias | None = None,
    inherited: bool = False,
)

```

Bases: `ObjectAliasMixin`

```

              flowchart TD
              griffe.Alias[Alias]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.mixins.ObjectAliasMixin --> griffe.Alias
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                



              click griffe.Alias href "" "griffe.Alias"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

This class represents an alias, or indirection, to an object declared in another module.

Aliases represent objects that are in the scope of a module or class, but were imported from another module.

They behave almost exactly like regular objects, to a few exceptions:

- line numbers are those of the alias, not the target
- the path is the alias path, not the canonical one
- the name can be different from the target's
- if the target can be resolved, the kind is the target's kind
- if the target cannot be resolved, the kind becomes Kind.ALIAS

Parameters:

- ## **`name`**

  (`str`) – The alias name.

- ## **`target`**

  (`str | Object | Alias`) – If it's a string, the target resolution is delayed until accessing the target property. If it's an object, or even another alias, the target is immediately set.

- ## **`lineno`**

  (`int | None`, default: `None` ) – The alias starting line number.

- ## **`endlineno`**

  (`int | None`, default: `None` ) – The alias ending line number.

- ## **`runtime`**

  (`bool`, default: `True` ) – Whether this alias is present at runtime or not.

- ## **`parent`**

  (`Module | Class | Alias | None`, default: `None` ) – The alias parent.

- ## **`inherited`**

  (`bool`, default: `False` ) – Whether this alias wraps an inherited member.

Methods:

- **`__bool__`** – An alias is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The length of an alias is always 1.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this alias' data as a dictionary.
- **`as_json`** – Return this target's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`mro`** – Return a list of classes in order corresponding to Python's MRO.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`resolve_target`** – Resolve the target.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`alias_endlineno`** (`int | None`) – The ending line number of the alias.
- **`alias_lineno`** (`int | None`) – The starting line number of the alias.
- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`annotation`** (`str | Expr | None`) – The attribute type annotation.
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`bases`** (`list[Expr | str]`) – The class bases.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`decorators`** (`list[Decorator]`) – The class/function decorators.
- **`deleter`** (`Function | None`) – The deleter linked to this function (property).
- **`deprecated`** (`str | bool | None`) – Whether this alias is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The target docstring.
- **`endlineno`** (`int | None`) – The ending line number of the target object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path (or directory list for namespace packages) where this object was defined.
- **`final_target`** (`Object`) – The final, resolved target, if possible.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this alias' target has a non-empty docstring.
- **`has_docstrings`** (`bool`) – Whether this alias' target or any of its members has a non-empty docstring.
- **`imports`** (`dict[str, str]`) – The other objects imported by this alias' target.
- **`imports_future_annotations`** (`bool`) – Whether this module import future annotations.
- **`inherited`** (`bool`) – Whether this alias represents an inherited member.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always true for aliases.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for aliases.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this module is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this module is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this module is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this module is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this module is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** (`Kind`) – The target's kind, or Kind.ALIAS if the target cannot be resolved.
- **`labels`** (`set[str]`) – The target labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the target object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The target's members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to the alias parents.
- **`name`** (`str`) – The alias name.
- **`overloads`** (`dict[str, list[Function]] | list[Function] | None`) – The overloaded signatures declared in this class/module or for this function.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parameters`** (`Parameters`) – The parameters of the current function or __init__ method for classes.
- **`parent`** (`Module | Class | Alias | None`) – The parent of this alias.
- **`path`** (`str`) – The dotted path / import path of this object.
- **`public`** (`bool | None`) – Whether this alias is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`resolved`** (`bool`) – Whether this alias' target is resolved.
- **`resolved_bases`** (`list[Object]`) – Resolved class bases.
- **`returns`** (`str | Expr | None`) – The function return type annotation.
- **`runtime`** (`bool`) – Whether this alias is available at runtime.
- **`setter`** (`Function | None`) – The setter linked to this function (property).
- **`source`** (`str`) – The source code of this object.
- **`target`** (`Object | Alias`) – The resolved target (actual object), if possible.
- **`target_path`** (`str`) – The path of this alias' target.
- **`value`** (`str | Expr | None`) – The attribute value.
- **`wildcard`** (`str | None`) – The module on which the wildcard import is performed (if any).

## alias_endlineno

```
alias_endlineno: int | None = endlineno

```

The ending line number of the alias.

## alias_lineno

```
alias_lineno: int | None = lineno

```

The starting line number of the alias.

## aliases

```
aliases: dict[str, Alias]

```

The aliases pointing to this object.

## all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

## annotation

```
annotation: str | Expr | None

```

The attribute type annotation.

## attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

## bases

```
bases: list[Expr | str]

```

The class bases.

See also: Class, resolved_bases, mro.

## canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

## classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

## decorators

```
decorators: list[Decorator]

```

The class/function decorators.

See also: Function, Class.

## deleter

```
deleter: Function | None

```

The deleter linked to this function (property).

## deprecated

```
deprecated: str | bool | None = None

```

Whether this alias is deprecated (boolean or deprecation message).

## docstring

```
docstring: Docstring | None

```

The target docstring.

See also: has_docstring, has_docstrings.

## endlineno

```
endlineno: int | None

```

The ending line number of the target object.

See also: lineno.

## exports

```
exports: list[str | ExprName] | None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

## extra

```
extra: dict

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

## filepath

```
filepath: Path | list[Path]

```

The file path (or directory list for namespace packages) where this object was defined.

See also: relative_filepath, relative_package_filepath.

## final_target

```
final_target: Object

```

The final, resolved target, if possible.

This will iterate through the targets until a non-alias object is found.

See also: target, resolve_target, resolved.

## functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

## has_docstring

```
has_docstring: bool

```

Whether this alias' target has a non-empty docstring.

See also: has_docstrings, docstring.

## has_docstrings

```
has_docstrings: bool

```

Whether this alias' target or any of its members has a non-empty docstring.

See also: has_docstring, docstring.

## imports

```
imports: dict[str, str]

```

The other objects imported by this alias' target.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

See also: is_imported.

## imports_future_annotations

```
imports_future_annotations: bool

```

Whether this module import future annotations.

## inherited

```
inherited: bool = inherited

```

Whether this alias represents an inherited member.

## inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

Each inherited member of the target will be wrapped in an alias, to preserve correct object access paths.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

## is_alias

```
is_alias: bool = True

```

Always true for aliases.

## is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module, is_class, is_function, is_alias, is_kind.

## is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module, is_function, is_attribute, is_alias, is_kind.

## is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

## is_collection

```
is_collection: bool = False

```

Always false for aliases.

See also: ModulesCollection.

## is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

## is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

## is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module, is_class, is_attribute, is_alias, is_kind.

## is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

## is_init_module

```
is_init_module: bool

```

Whether this module is an `__init__.py` module.

See also: is_module.

## is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

## is_namespace_package

```
is_namespace_package: bool

```

Whether this module is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

## is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this module is a namespace subpackage.

See also: is_namespace_package.

## is_package

```
is_package: bool

```

Whether this module is a package (top module).

See also: is_subpackage.

## is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

## is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

## is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

## is_subpackage

```
is_subpackage: bool

```

Whether this module is a subpackage.

See also: is_package.

## is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

## kind

```
kind: Kind

```

The target's kind, or `Kind.ALIAS` if the target cannot be resolved.

See also: is_kind.

## labels

```
labels: set[str]

```

The target labels (`property`, `dataclass`, etc.).

See also: has_labels.

## lineno

```
lineno: int | None

```

The starting line number of the target object.

See also: endlineno.

## lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: source, lines_collection.

## lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## members

```
members: dict[str, Object | Alias]

```

The target's members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

## module

```
module: Module

```

The parent module of this object.

See also: package.

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

## modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

## modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to the alias parents.

## name

```
name: str = name

```

The alias name.

## overloads

```
overloads: dict[str, list[Function]] | list[Function] | None

```

The overloaded signatures declared in this class/module or for this function.

## package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

## parameters

```
parameters: Parameters

```

The parameters of the current function or `__init__` method for classes.

This property can fetch inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!

## parent

```
parent: Module | Class | Alias | None

```

The parent of this alias.

## path

```
path: str

```

The dotted path / import path of this object.

See also: canonical_path.

## public

```
public: bool | None = None

```

Whether this alias is public.

## relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## resolved

```
resolved: bool

```

Whether this alias' target is resolved.

## resolved_bases

```
resolved_bases: list[Object]

```

Resolved class bases.

This method is part of the consumer API: do not use when producing Griffe trees!

## returns

```
returns: str | Expr | None

```

The function return type annotation.

## runtime

```
runtime: bool = runtime

```

Whether this alias is available at runtime.

## setter

```
setter: Function | None

```

The setter linked to this function (property).

## source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

## target

```
target: Object | Alias

```

The resolved target (actual object), if possible.

Upon accessing this property, if the target is not already resolved, a lookup is done using the modules collection to find the target.

See also: final_target, resolve_target, resolved.

## target_path

```
target_path: str

```

The path of this alias' target.

## value

```
value: str | Expr | None

```

The attribute value.

## wildcard

```
wildcard: str | None

```

The module on which the wildcard import is performed (if any).

See also: GriffeLoader.expand_wildcards.

## __bool__

```
__bool__() -> bool

```

An alias is always true-ish.

## __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

## __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

## __len__

```
__len__() -> int

```

The length of an alias is always 1.

## __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

## as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this alias' data as a dictionary.

See also: as_json.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this target's data as a JSON string.

See also: as_dict.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

## del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members, get_member, set_member.

Parameters:

- ### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

## from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- ### **`json_string`**

  (`str`) – JSON to decode into Object.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- ### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

## is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- ### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

## mro

```
mro() -> list[Class]

```

Return a list of classes in order corresponding to Python's MRO.

## resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- ### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

## resolve_target

```
resolve_target() -> None

```

Resolve the target.

See also: target, final_target, resolved.

Raises:

- `AliasResolutionError` – When the target cannot be resolved. It happens when the target does not exist, or could not be loaded (unhandled dynamic object?), or when the target is from a module that was not loaded and added to the collection.
- `CyclicAliasError` – When the resolved target is the alias itself.

## set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

# Attribute

```
Attribute(
    *args: Any,
    value: str | Expr | None = None,
    annotation: str | Expr | None = None,
    **kwargs: Any,
)

```

Bases: `Object`

```

              flowchart TD
              griffe.Attribute[Attribute]
              _griffe.models.Object[Object]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.models.Object --> griffe.Attribute
                                _griffe.mixins.ObjectAliasMixin --> _griffe.models.Object
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                




              click griffe.Attribute href "" "griffe.Attribute"
              click _griffe.models.Object href "" "_griffe.models.Object"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

The class representing a Python module/class/instance attribute.

Parameters:

- ## **`*args`**

  (`Any`, default: `()` ) – See griffe.Object.

- ## **`value`**

  (`str | Expr | None`, default: `None` ) – The attribute value, if any.

- ## **`annotation`**

  (`str | Expr | None`, default: `None` ) – The attribute annotation, if any.

- ## **`**kwargs`**

  (`Any`, default: `{}` ) – See griffe.Object.

Methods:

- **`__bool__`** – An object is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The number of members in this object, recursively.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this function's data as a dictionary.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`annotation`** (`str | Expr | None`) – The attribute type annotation.
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`deleter`** (`Function | None`) – The deleter linked to this property.
- **`deprecated`** (`bool | str | None`) – Whether this object is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The object docstring.
- **`endlineno`** (`int | None`) – The ending line number of the object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict[str, dict[str, Any]]`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path (or directory list for namespace packages) where this object was defined.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this object has a docstring (empty or not).
- **`has_docstrings`** (`bool`) – Whether this object or any of its members has a docstring (empty or not).
- **`imports`** (`dict[str, str]`) – The other objects imported by this object.
- **`inherited`** (`bool`) – Always false for objects.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always false for objects.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for objects.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this object is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this object is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this object is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this object is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this object is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** – The object kind.
- **`labels`** (`set[str]`) – The object labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The object members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to this object or its parents.
- **`name`** (`str`) – The object name.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parent`** (`Module | Class | None`) – The parent of the object (none if top module).
- **`path`** (`str`) – The dotted path of this object.
- **`public`** (`bool | None`) – Whether this object is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`runtime`** (`bool`) – Whether this object is available at runtime.
- **`setter`** (`Function | None`) – The setter linked to this property.
- **`source`** (`str`) – The source code of this object.
- **`value`** (`str | Expr | None`) – The attribute value.

## aliases

```
aliases: dict[str, Alias] = {}

```

The aliases pointing to this object.

## all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

## annotation

```
annotation: str | Expr | None = annotation

```

The attribute type annotation.

## attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

## canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

## classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

## deleter

```
deleter: Function | None = None

```

The deleter linked to this property.

## deprecated

```
deprecated: bool | str | None = None

```

Whether this object is deprecated (boolean or deprecation message).

## docstring

```
docstring: Docstring | None = docstring

```

The object docstring.

See also: has_docstring, has_docstrings.

## endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the object.

See also: lineno.

## exports

```
exports: list[str | ExprName] | None = None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

## extra

```
extra: dict[str, dict[str, Any]] = defaultdict(dict)

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

## filepath

```
filepath: Path | list[Path]

```

The file path (or directory list for namespace packages) where this object was defined.

See also: relative_filepath, relative_package_filepath.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown.filepath
PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')

```

## functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

## has_docstring

```
has_docstring: bool

```

Whether this object has a docstring (empty or not).

See also: docstring, has_docstrings.

## has_docstrings

```
has_docstrings: bool

```

Whether this object or any of its members has a docstring (empty or not).

Inherited members are not considered. Imported members are not considered, unless they are also public.

See also: docstring, has_docstring.

## imports

```
imports: dict[str, str] = {}

```

The other objects imported by this object.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

## inherited

```
inherited: bool = False

```

Always false for objects.

Only aliases can be marked as inherited.

## inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

## is_alias

```
is_alias: bool = False

```

Always false for objects.

## is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module. is_class, is_function, is_alias, is_kind.

## is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module. is_function, is_attribute, is_alias, is_kind.

## is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

## is_collection

```
is_collection: bool = False

```

Always false for objects.

## is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

## is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

## is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module. is_class, is_attribute, is_alias, is_kind.

## is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

## is_init_module

```
is_init_module: bool

```

Whether this object is an `__init__.py` module.

See also: is_module.

## is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

## is_namespace_package

```
is_namespace_package: bool

```

Whether this object is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

## is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this object is a namespace subpackage.

See also: is_namespace_package.

## is_package

```
is_package: bool

```

Whether this object is a package (top module).

See also: is_subpackage.

## is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

## is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

## is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

## is_subpackage

```
is_subpackage: bool

```

Whether this object is a subpackage.

See also: is_package.

## is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

## kind

```
kind = ATTRIBUTE

```

The object kind.

## labels

```
labels: set[str] = set()

```

The object labels (`property`, `dataclass`, etc.).

See also: has_labels.

## lineno

```
lineno: int | None = lineno

```

The starting line number of the object.

See also: endlineno.

## lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: lines_collection, source.

## lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## members

```
members: dict[str, Object | Alias] = {}

```

The object members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

## module

```
module: Module

```

The parent module of this object.

See also: package.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))
>>> # The `module` of a module is itself.
>>> markdown["core"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))

```

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

## modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

## modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to this object or its parents.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## name

```
name: str = name

```

The object name.

## package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].package
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))

```

## parent

```
parent: Module | Class | None = parent

```

The parent of the object (none if top module).

## path

```
path: str

```

The dotted path of this object.

On regular objects (not aliases), the path is the canonical path.

See also: canonical_path.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].path
'markdown.core.Markdown.references'

```

## public

```
public: bool | None = None

```

Whether this object is public.

## relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## runtime

```
runtime: bool = runtime

```

Whether this object is available at runtime.

Typically, type-guarded objects (under an `if TYPE_CHECKING` condition) are not available at runtime.

## setter

```
setter: Function | None = None

```

The setter linked to this property.

## source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

## value

```
value: str | Expr | None = value

```

The attribute value.

## __bool__

```
__bool__() -> bool

```

An object is always true-ish.

## __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

## __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

## __len__

```
__len__() -> int

```

The number of members in this object, recursively.

## __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

## as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this function's data as a dictionary.

See also: as_json.

Parameters:

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

## del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members.

Parameters:

- ### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

## from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- ### **`json_string`**

  (`str`) – JSON to decode into Object.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- ### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

## is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- ### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

## resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- ### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

## set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

# Class

```
Class(
    *args: Any,
    bases: Sequence[Expr | str] | None = None,
    decorators: list[Decorator] | None = None,
    **kwargs: Any,
)

```

Bases: `Object`

```

              flowchart TD
              griffe.Class[Class]
              _griffe.models.Object[Object]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.models.Object --> griffe.Class
                                _griffe.mixins.ObjectAliasMixin --> _griffe.models.Object
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                




              click griffe.Class href "" "griffe.Class"
              click _griffe.models.Object href "" "_griffe.models.Object"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

The class representing a Python class.

Parameters:

- ## **`*args`**

  (`Any`, default: `()` ) – See griffe.Object.

- ## **`bases`**

  (`Sequence[Expr | str] | None`, default: `None` ) – The list of base classes, if any.

- ## **`decorators`**

  (`list[Decorator] | None`, default: `None` ) – The class decorators, if any.

- ## **`**kwargs`**

  (`Any`, default: `{}` ) – See griffe.Object.

Methods:

- **`__bool__`** – An object is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The number of members in this object, recursively.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this class' data as a dictionary.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`mro`** – Return a list of classes in order corresponding to Python's MRO.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`bases`** (`list[Expr | str]`) – The class bases.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`decorators`** (`list[Decorator]`) – The class decorators.
- **`deprecated`** (`bool | str | None`) – Whether this object is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The object docstring.
- **`endlineno`** (`int | None`) – The ending line number of the object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict[str, dict[str, Any]]`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path (or directory list for namespace packages) where this object was defined.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this object has a docstring (empty or not).
- **`has_docstrings`** (`bool`) – Whether this object or any of its members has a docstring (empty or not).
- **`imports`** (`dict[str, str]`) – The other objects imported by this object.
- **`inherited`** (`bool`) – Always false for objects.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always false for objects.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for objects.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this object is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this object is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this object is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this object is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this object is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** – The object kind.
- **`labels`** (`set[str]`) – The object labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The object members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to this object or its parents.
- **`name`** (`str`) – The object name.
- **`overloads`** (`dict[str, list[Function]]`) – The overloaded signatures declared in this class.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parameters`** (`Parameters`) – The parameters of this class' __init__ method, if any.
- **`parent`** (`Module | Class | None`) – The parent of the object (none if top module).
- **`path`** (`str`) – The dotted path of this object.
- **`public`** (`bool | None`) – Whether this object is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`resolved_bases`** (`list[Object]`) – Resolved class bases.
- **`runtime`** (`bool`) – Whether this object is available at runtime.
- **`source`** (`str`) – The source code of this object.

## aliases

```
aliases: dict[str, Alias] = {}

```

The aliases pointing to this object.

## all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

## attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

## bases

```
bases: list[Expr | str] = list(bases) if bases else []

```

The class bases.

See also: resolved_bases, mro.

## canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

## classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

## decorators

```
decorators: list[Decorator] = decorators or []

```

The class decorators.

## deprecated

```
deprecated: bool | str | None = None

```

Whether this object is deprecated (boolean or deprecation message).

## docstring

```
docstring: Docstring | None = docstring

```

The object docstring.

See also: has_docstring, has_docstrings.

## endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the object.

See also: lineno.

## exports

```
exports: list[str | ExprName] | None = None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

## extra

```
extra: dict[str, dict[str, Any]] = defaultdict(dict)

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

## filepath

```
filepath: Path | list[Path]

```

The file path (or directory list for namespace packages) where this object was defined.

See also: relative_filepath, relative_package_filepath.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown.filepath
PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')

```

## functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

## has_docstring

```
has_docstring: bool

```

Whether this object has a docstring (empty or not).

See also: docstring, has_docstrings.

## has_docstrings

```
has_docstrings: bool

```

Whether this object or any of its members has a docstring (empty or not).

Inherited members are not considered. Imported members are not considered, unless they are also public.

See also: docstring, has_docstring.

## imports

```
imports: dict[str, str] = {}

```

The other objects imported by this object.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

## inherited

```
inherited: bool = False

```

Always false for objects.

Only aliases can be marked as inherited.

## inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

## is_alias

```
is_alias: bool = False

```

Always false for objects.

## is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module. is_class, is_function, is_alias, is_kind.

## is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module. is_function, is_attribute, is_alias, is_kind.

## is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

## is_collection

```
is_collection: bool = False

```

Always false for objects.

## is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

## is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

## is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module. is_class, is_attribute, is_alias, is_kind.

## is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

## is_init_module

```
is_init_module: bool

```

Whether this object is an `__init__.py` module.

See also: is_module.

## is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

## is_namespace_package

```
is_namespace_package: bool

```

Whether this object is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

## is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this object is a namespace subpackage.

See also: is_namespace_package.

## is_package

```
is_package: bool

```

Whether this object is a package (top module).

See also: is_subpackage.

## is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

## is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

## is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

## is_subpackage

```
is_subpackage: bool

```

Whether this object is a subpackage.

See also: is_package.

## is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

## kind

```
kind = CLASS

```

The object kind.

## labels

```
labels: set[str] = set()

```

The object labels (`property`, `dataclass`, etc.).

See also: has_labels.

## lineno

```
lineno: int | None = lineno

```

The starting line number of the object.

See also: endlineno.

## lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: lines_collection, source.

## lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## members

```
members: dict[str, Object | Alias] = {}

```

The object members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

## module

```
module: Module

```

The parent module of this object.

See also: package.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))
>>> # The `module` of a module is itself.
>>> markdown["core"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))

```

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

## modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

## modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to this object or its parents.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## name

```
name: str = name

```

The object name.

## overloads

```
overloads: dict[str, list[Function]] = defaultdict(list)

```

The overloaded signatures declared in this class.

## package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].package
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))

```

## parameters

```
parameters: Parameters

```

The parameters of this class' `__init__` method, if any.

This property fetches inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!

## parent

```
parent: Module | Class | None = parent

```

The parent of the object (none if top module).

## path

```
path: str

```

The dotted path of this object.

On regular objects (not aliases), the path is the canonical path.

See also: canonical_path.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].path
'markdown.core.Markdown.references'

```

## public

```
public: bool | None = None

```

Whether this object is public.

## relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## resolved_bases

```
resolved_bases: list[Object]

```

Resolved class bases.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: bases, mro.

## runtime

```
runtime: bool = runtime

```

Whether this object is available at runtime.

Typically, type-guarded objects (under an `if TYPE_CHECKING` condition) are not available at runtime.

## source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

## __bool__

```
__bool__() -> bool

```

An object is always true-ish.

## __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

## __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

## __len__

```
__len__() -> int

```

The number of members in this object, recursively.

## __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

## as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this class' data as a dictionary.

See also: as_json.

Parameters:

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

## del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members.

Parameters:

- ### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

## from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- ### **`json_string`**

  (`str`) – JSON to decode into Object.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- ### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

## is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- ### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

## mro

```
mro() -> list[Class]

```

Return a list of classes in order corresponding to Python's MRO.

See also: bases, resolved_bases.

## resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- ### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

## set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

## **Utilities**

## c3linear_merge

```
c3linear_merge(*lists: list[_T]) -> list[_T]

```

Merge lists of lists in the order defined by the C3Linear algorithm.

Parameters:

- ### **`*lists`**

  (`list[_T]`, default: `()` ) – Lists of items.

Returns:

- `list[_T]` – The merged list of items.

# Function

```
Function(
    *args: Any,
    parameters: Parameters | None = None,
    returns: str | Expr | None = None,
    decorators: list[Decorator] | None = None,
    **kwargs: Any,
)

```

Bases: `Object`

```

              flowchart TD
              griffe.Function[Function]
              _griffe.models.Object[Object]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.models.Object --> griffe.Function
                                _griffe.mixins.ObjectAliasMixin --> _griffe.models.Object
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                




              click griffe.Function href "" "griffe.Function"
              click _griffe.models.Object href "" "_griffe.models.Object"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

The class representing a Python function.

Parameters:

- ## **`*args`**

  (`Any`, default: `()` ) – See griffe.Object.

- ## **`parameters`**

  (`Parameters | None`, default: `None` ) – The function parameters.

- ## **`returns`**

  (`str | Expr | None`, default: `None` ) – The function return annotation.

- ## **`decorators`**

  (`list[Decorator] | None`, default: `None` ) – The function decorators, if any.

- ## **`**kwargs`**

  (`Any`, default: `{}` ) – See griffe.Object.

Methods:

- **`__bool__`** – An object is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The number of members in this object, recursively.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this function's data as a dictionary.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`annotation`** (`str | Expr | None`) – The type annotation of the returned value.
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`decorators`** (`list[Decorator]`) – The function decorators.
- **`deprecated`** (`bool | str | None`) – Whether this object is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The object docstring.
- **`endlineno`** (`int | None`) – The ending line number of the object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict[str, dict[str, Any]]`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path (or directory list for namespace packages) where this object was defined.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this object has a docstring (empty or not).
- **`has_docstrings`** (`bool`) – Whether this object or any of its members has a docstring (empty or not).
- **`imports`** (`dict[str, str]`) – The other objects imported by this object.
- **`inherited`** (`bool`) – Always false for objects.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always false for objects.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for objects.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this object is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this object is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this object is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this object is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this object is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** – The object kind.
- **`labels`** (`set[str]`) – The object labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The object members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to this object or its parents.
- **`name`** (`str`) – The object name.
- **`overloads`** (`list[Function] | None`) – The overloaded signatures of this function.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parameters`** (`Parameters`) – The function parameters.
- **`parent`** (`Module | Class | None`) – The parent of the object (none if top module).
- **`path`** (`str`) – The dotted path of this object.
- **`public`** (`bool | None`) – Whether this object is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`returns`** (`str | Expr | None`) – The function return type annotation.
- **`runtime`** (`bool`) – Whether this object is available at runtime.
- **`source`** (`str`) – The source code of this object.

## aliases

```
aliases: dict[str, Alias] = {}

```

The aliases pointing to this object.

## all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

## annotation

```
annotation: str | Expr | None

```

The type annotation of the returned value.

## attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

## canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

## classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

## decorators

```
decorators: list[Decorator] = decorators or []

```

The function decorators.

## deprecated

```
deprecated: bool | str | None = None

```

Whether this object is deprecated (boolean or deprecation message).

## docstring

```
docstring: Docstring | None = docstring

```

The object docstring.

See also: has_docstring, has_docstrings.

## endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the object.

See also: lineno.

## exports

```
exports: list[str | ExprName] | None = None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

## extra

```
extra: dict[str, dict[str, Any]] = defaultdict(dict)

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

## filepath

```
filepath: Path | list[Path]

```

The file path (or directory list for namespace packages) where this object was defined.

See also: relative_filepath, relative_package_filepath.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown.filepath
PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')

```

## functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

## has_docstring

```
has_docstring: bool

```

Whether this object has a docstring (empty or not).

See also: docstring, has_docstrings.

## has_docstrings

```
has_docstrings: bool

```

Whether this object or any of its members has a docstring (empty or not).

Inherited members are not considered. Imported members are not considered, unless they are also public.

See also: docstring, has_docstring.

## imports

```
imports: dict[str, str] = {}

```

The other objects imported by this object.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

## inherited

```
inherited: bool = False

```

Always false for objects.

Only aliases can be marked as inherited.

## inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

## is_alias

```
is_alias: bool = False

```

Always false for objects.

## is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module. is_class, is_function, is_alias, is_kind.

## is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module. is_function, is_attribute, is_alias, is_kind.

## is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

## is_collection

```
is_collection: bool = False

```

Always false for objects.

## is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

## is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

## is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module. is_class, is_attribute, is_alias, is_kind.

## is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

## is_init_module

```
is_init_module: bool

```

Whether this object is an `__init__.py` module.

See also: is_module.

## is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

## is_namespace_package

```
is_namespace_package: bool

```

Whether this object is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

## is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this object is a namespace subpackage.

See also: is_namespace_package.

## is_package

```
is_package: bool

```

Whether this object is a package (top module).

See also: is_subpackage.

## is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

## is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

## is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

## is_subpackage

```
is_subpackage: bool

```

Whether this object is a subpackage.

See also: is_package.

## is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

## kind

```
kind = FUNCTION

```

The object kind.

## labels

```
labels: set[str] = set()

```

The object labels (`property`, `dataclass`, etc.).

See also: has_labels.

## lineno

```
lineno: int | None = lineno

```

The starting line number of the object.

See also: endlineno.

## lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: lines_collection, source.

## lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## members

```
members: dict[str, Object | Alias] = {}

```

The object members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

## module

```
module: Module

```

The parent module of this object.

See also: package.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))
>>> # The `module` of a module is itself.
>>> markdown["core"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))

```

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

## modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

## modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to this object or its parents.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## name

```
name: str = name

```

The object name.

## overloads

```
overloads: list[Function] | None = None

```

The overloaded signatures of this function.

## package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].package
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))

```

## parameters

```
parameters: Parameters = parameters or Parameters()

```

The function parameters.

## parent

```
parent: Module | Class | None = parent

```

The parent of the object (none if top module).

## path

```
path: str

```

The dotted path of this object.

On regular objects (not aliases), the path is the canonical path.

See also: canonical_path.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].path
'markdown.core.Markdown.references'

```

## public

```
public: bool | None = None

```

Whether this object is public.

## relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## returns

```
returns: str | Expr | None = returns

```

The function return type annotation.

## runtime

```
runtime: bool = runtime

```

Whether this object is available at runtime.

Typically, type-guarded objects (under an `if TYPE_CHECKING` condition) are not available at runtime.

## source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

## __bool__

```
__bool__() -> bool

```

An object is always true-ish.

## __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

## __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

## __len__

```
__len__() -> int

```

The number of members in this object, recursively.

## __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

## as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this function's data as a dictionary.

See also: as_json.

Parameters:

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

## del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members.

Parameters:

- ### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

## from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- ### **`json_string`**

  (`str`) – JSON to decode into Object.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- ### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

## is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- ### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

## resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- ### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

## set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```

## Parameters

```
Parameters(*parameters: Parameter)

```

This class is a container for parameters.

It allows to get parameters using their position (index) or their name:

```
>>> parameters = Parameters(Parameter("hello"))
>>> parameters[0] is parameters["hello"]
True

```

See also: Parameter.

Parameters:

- ### **`*parameters`**

  (`Parameter`, default: `()` ) – The initial parameters to add to the container.

Methods:

- **`__contains__`** – Whether a parameter with the given name is present.
- **`__delitem__`** – Delete a parameter by index or name.
- **`__getitem__`** – Get a parameter by index or name.
- **`__iter__`** – Iterate over the parameters, in order.
- **`__len__`** – The number of parameters.
- **`__setitem__`** – Set a parameter by index or name.
- **`add`** – Add a parameter to the container.

### __contains__

```
__contains__(param_name: str)

```

Whether a parameter with the given name is present.

### __delitem__

```
__delitem__(name_or_index: int | str) -> None

```

Delete a parameter by index or name.

### __getitem__

```
__getitem__(name_or_index: int | str) -> Parameter

```

Get a parameter by index or name.

### __iter__

```
__iter__()

```

Iterate over the parameters, in order.

### __len__

```
__len__()

```

The number of parameters.

### __setitem__

```
__setitem__(
    name_or_index: int | str, parameter: Parameter
) -> None

```

Set a parameter by index or name.

### add

```
add(parameter: Parameter) -> None

```

Add a parameter to the container.

Parameters:

- #### **`parameter`**

  (`Parameter`) – The function parameter to add.

Raises:

- `ValueError` – When a parameter with the same name is already present.

## Parameter

```
Parameter(
    name: str,
    *,
    annotation: str | Expr | None = None,
    kind: ParameterKind | None = None,
    default: str | Expr | None = None,
    docstring: Docstring | None = None,
)

```

This class represent a function parameter.

See also: Parameters.

Parameters:

- ### **`name`**

  (`str`) – The parameter name, without leading stars (\* or \*\*).

- ### **`annotation`**

  (`str | Expr | None`, default: `None` ) – The parameter annotation, if any.

- ### **`kind`**

  (`ParameterKind | None`, default: `None` ) – The parameter kind.

- ### **`default`**

  (`str | Expr | None`, default: `None` ) – The parameter default, if any.

- ### **`docstring`**

  (`Docstring | None`, default: `None` ) – The parameter docstring.

Methods:

- **`__eq__`** – Parameters are equal if all their attributes except docstring and function are equal.
- **`as_dict`** – Return this parameter's data as a dictionary.

Attributes:

- **`annotation`** (`str | Expr | None`) – The parameter type annotation.
- **`default`** (`str | Expr | None`) – The parameter default value.
- **`docstring`** (`Docstring | None`) – The parameter docstring.
- **`function`** (`Function | None`) – The parent function of the parameter.
- **`kind`** (`ParameterKind | None`) – The parameter kind.
- **`name`** (`str`) – The parameter name.
- **`required`** (`bool`) – Whether this parameter is required.

### annotation

```
annotation: str | Expr | None = annotation

```

The parameter type annotation.

### default

```
default: str | Expr | None = default

```

The parameter default value.

### docstring

```
docstring: Docstring | None = docstring

```

The parameter docstring.

### function

```
function: Function | None = None

```

The parent function of the parameter.

### kind

```
kind: ParameterKind | None = kind

```

The parameter kind.

### name

```
name: str = name

```

The parameter name.

### required

```
required: bool

```

Whether this parameter is required.

### __eq__

```
__eq__(value: object) -> bool

```

Parameters are equal if all their attributes except `docstring` and `function` are equal.

### as_dict

```
as_dict(
    *, full: bool = False, **kwargs: Any
) -> dict[str, Any]

```

Return this parameter's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## ParameterKind

Bases: `str`, `Enum`

```

              flowchart TD
              griffe.ParameterKind[ParameterKind]

              

              click griffe.ParameterKind href "" "griffe.ParameterKind"
            
```

Enumeration of the different parameter kinds.

Attributes:

- **`keyword_only`** – Keyword-only parameter.
- **`positional_only`** – Positional-only parameter.
- **`positional_or_keyword`** – Positional or keyword parameter.
- **`var_keyword`** – Variadic keyword parameter.
- **`var_positional`** – Variadic positional parameter.

### keyword_only

```
keyword_only = 'keyword-only'

```

Keyword-only parameter.

### positional_only

```
positional_only = 'positional-only'

```

Positional-only parameter.

### positional_or_keyword

```
positional_or_keyword = 'positional or keyword'

```

Positional or keyword parameter.

### var_keyword

```
var_keyword = 'variadic keyword'

```

Variadic keyword parameter.

### var_positional

```
var_positional = 'variadic positional'

```

Variadic positional parameter.

## ParametersType

```
ParametersType = list[
    tuple[
        str,
        Optional[AST],
        ParameterKind,
        Optional[Union[str, AST]],
    ]
]

```

Type alias for the list of parameters of a function.

## Decorator

```
Decorator(
    value: str | Expr,
    *,
    lineno: int | None,
    endlineno: int | None,
)

```

This class represents decorators.

Parameters:

- ### **`value`**

  (`str | Expr`) – The decorator code.

- ### **`lineno`**

  (`int | None`) – The starting line number.

- ### **`endlineno`**

  (`int | None`) – The ending line number.

Methods:

- **`as_dict`** – Return this decorator's data as a dictionary.

Attributes:

- **`callable_path`** (`str`) – The path of the callable used as decorator.
- **`endlineno`** (`int | None`) – The ending line number of the decorator.
- **`lineno`** (`int | None`) – The starting line number of the decorator.
- **`value`** (`str | Expr`) – The decorator value (as a Griffe expression or string).

### callable_path

```
callable_path: str

```

The path of the callable used as decorator.

### endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the decorator.

### lineno

```
lineno: int | None = lineno

```

The starting line number of the decorator.

### value

```
value: str | Expr = value

```

The decorator value (as a Griffe expression or string).

### as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this decorator's data as a dictionary.

Parameters:

- #### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

# Module

```
Module(
    *args: Any,
    filepath: Path | list[Path] | None = None,
    **kwargs: Any,
)

```

Bases: `Object`

```

              flowchart TD
              griffe.Module[Module]
              _griffe.models.Object[Object]
              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]
              _griffe.mixins.GetMembersMixin[GetMembersMixin]
              _griffe.mixins.SetMembersMixin[SetMembersMixin]
              _griffe.mixins.DelMembersMixin[DelMembersMixin]
              _griffe.mixins.SerializationMixin[SerializationMixin]

                              _griffe.models.Object --> griffe.Module
                                _griffe.mixins.ObjectAliasMixin --> _griffe.models.Object
                                _griffe.mixins.GetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SetMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.DelMembersMixin --> _griffe.mixins.ObjectAliasMixin
                
                _griffe.mixins.SerializationMixin --> _griffe.mixins.ObjectAliasMixin
                




              click griffe.Module href "" "griffe.Module"
              click _griffe.models.Object href "" "_griffe.models.Object"
              click _griffe.mixins.ObjectAliasMixin href "" "_griffe.mixins.ObjectAliasMixin"
              click _griffe.mixins.GetMembersMixin href "" "_griffe.mixins.GetMembersMixin"
              click _griffe.mixins.SetMembersMixin href "" "_griffe.mixins.SetMembersMixin"
              click _griffe.mixins.DelMembersMixin href "" "_griffe.mixins.DelMembersMixin"
              click _griffe.mixins.SerializationMixin href "" "_griffe.mixins.SerializationMixin"
            
```

The class representing a Python module.

Parameters:

- ## **`*args`**

  (`Any`, default: `()` ) – See griffe.Object.

- ## **`filepath`**

  (`Path | list[Path] | None`, default: `None` ) – The module file path (directory for namespace [sub]packages, none for builtin modules).

- ## **`**kwargs`**

  (`Any`, default: `{}` ) – See griffe.Object.

Methods:

- **`__bool__`** – An object is always true-ish.
- **`__delitem__`** – Delete a member with its name or path.
- **`__getitem__`** – Get a member with its name or path.
- **`__len__`** – The number of members in this object, recursively.
- **`__setitem__`** – Set a member with its name or path.
- **`as_dict`** – Return this module's data as a dictionary.
- **`as_json`** – Return this object's data as a JSON string.
- **`del_member`** – Delete a member with its name or path.
- **`filter_members`** – Filter and return members based on predicates.
- **`from_json`** – Create an instance of this class from a JSON string.
- **`get_member`** – Get a member with its name or path.
- **`has_labels`** – Tell if this object has all the given labels.
- **`is_kind`** – Tell if this object is of the given kind.
- **`resolve`** – Resolve a name within this object's and parents' scope.
- **`set_member`** – Set a member with its name or path.

Attributes:

- **`aliases`** (`dict[str, Alias]`) – The aliases pointing to this object.
- **`all_members`** (`dict[str, Object | Alias]`) – All members (declared and inherited).
- **`attributes`** (`dict[str, Attribute]`) – The attribute members.
- **`canonical_path`** (`str`) – The full dotted path of this object.
- **`classes`** (`dict[str, Class]`) – The class members.
- **`deprecated`** (`bool | str | None`) – Whether this object is deprecated (boolean or deprecation message).
- **`docstring`** (`Docstring | None`) – The object docstring.
- **`endlineno`** (`int | None`) – The ending line number of the object.
- **`exports`** (`list[str | ExprName] | None`) – The names of the objects exported by this (module) object through the __all__ variable.
- **`extra`** (`dict[str, dict[str, Any]]`) – Namespaced dictionaries storing extra metadata for this object, used by extensions.
- **`filepath`** (`Path | list[Path]`) – The file path of this module.
- **`functions`** (`dict[str, Function]`) – The function members.
- **`has_docstring`** (`bool`) – Whether this object has a docstring (empty or not).
- **`has_docstrings`** (`bool`) – Whether this object or any of its members has a docstring (empty or not).
- **`imports`** (`dict[str, str]`) – The other objects imported by this object.
- **`imports_future_annotations`** (`bool`) – Whether this module import future annotations.
- **`inherited`** (`bool`) – Always false for objects.
- **`inherited_members`** (`dict[str, Alias]`) – Members that are inherited from base classes.
- **`is_alias`** (`bool`) – Always false for objects.
- **`is_attribute`** (`bool`) – Whether this object is an attribute.
- **`is_class`** (`bool`) – Whether this object is a class.
- **`is_class_private`** (`bool`) – Whether this object/alias is class-private (starts with \_\_ and is a class member).
- **`is_collection`** (`bool`) – Always false for objects.
- **`is_deprecated`** (`bool`) – Whether this object is deprecated.
- **`is_exported`** (`bool`) – Whether this object/alias is exported (listed in __all__).
- **`is_function`** (`bool`) – Whether this object is a function.
- **`is_imported`** (`bool`) – Whether this object/alias was imported from another module.
- **`is_init_module`** (`bool`) – Whether this module is an __init__.py module.
- **`is_module`** (`bool`) – Whether this object is a module.
- **`is_namespace_package`** (`bool`) – Whether this module is a namespace package (top folder, no __init__.py).
- **`is_namespace_subpackage`** (`bool`) – Whether this module is a namespace subpackage.
- **`is_package`** (`bool`) – Whether this module is a package (top module).
- **`is_private`** (`bool`) – Whether this object/alias is private (starts with \_) but not special.
- **`is_public`** (`bool`) – Whether this object is considered public.
- **`is_special`** (`bool`) – Whether this object/alias is special ("dunder" attribute/method, starts and end with \_\_).
- **`is_subpackage`** (`bool`) – Whether this module is a subpackage.
- **`is_wildcard_exposed`** (`bool`) – Whether this object/alias is exposed to wildcard imports.
- **`kind`** – The object kind.
- **`labels`** (`set[str]`) – The object labels (property, dataclass, etc.).
- **`lineno`** (`int | None`) – The starting line number of the object.
- **`lines`** (`list[str]`) – The lines containing the source of this object.
- **`lines_collection`** (`LinesCollection`) – The lines collection attached to this object or its parents.
- **`members`** (`dict[str, Object | Alias]`) – The object members (modules, classes, functions, attributes).
- **`module`** (`Module`) – The parent module of this object.
- **`modules`** (`dict[str, Module]`) – The module members.
- **`modules_collection`** (`ModulesCollection`) – The modules collection attached to this object or its parents.
- **`name`** (`str`) – The object name.
- **`overloads`** (`dict[str, list[Function]]`) – The overloaded signatures declared in this module.
- **`package`** (`Module`) – The absolute top module (the package) of this object.
- **`parent`** (`Module | Class | None`) – The parent of the object (none if top module).
- **`path`** (`str`) – The dotted path of this object.
- **`public`** (`bool | None`) – Whether this object is public.
- **`relative_filepath`** (`Path`) – The file path where this object was defined, relative to the current working directory.
- **`relative_package_filepath`** (`Path`) – The file path where this object was defined, relative to the top module path.
- **`runtime`** (`bool`) – Whether this object is available at runtime.
- **`source`** (`str`) – The source code of this object.

## aliases

```
aliases: dict[str, Alias] = {}

```

The aliases pointing to this object.

## all_members

```
all_members: dict[str, Object | Alias]

```

All members (declared and inherited).

This method is part of the consumer API: do not use when producing Griffe trees!

## attributes

```
attributes: dict[str, Attribute]

```

The attribute members.

This method is part of the consumer API: do not use when producing Griffe trees!

## canonical_path

```
canonical_path: str

```

The full dotted path of this object.

The canonical path is the path where the object was defined (not imported).

See also: path.

## classes

```
classes: dict[str, Class]

```

The class members.

This method is part of the consumer API: do not use when producing Griffe trees!

## deprecated

```
deprecated: bool | str | None = None

```

Whether this object is deprecated (boolean or deprecation message).

## docstring

```
docstring: Docstring | None = docstring

```

The object docstring.

See also: has_docstring, has_docstrings.

## endlineno

```
endlineno: int | None = endlineno

```

The ending line number of the object.

See also: lineno.

## exports

```
exports: list[str | ExprName] | None = None

```

The names of the objects exported by this (module) object through the `__all__` variable.

Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:

```
from .submodule import __all__ as submodule_all

__all__ = ["hello", *submodule_all]

```

Exports get expanded by the loader before it expands wildcards and resolves aliases.

See also: GriffeLoader.expand_exports.

## extra

```
extra: dict[str, dict[str, Any]] = defaultdict(dict)

```

Namespaced dictionaries storing extra metadata for this object, used by extensions.

## filepath

```
filepath: Path | list[Path]

```

The file path of this module.

Raises:

- `BuiltinModuleError` – When the instance filepath is None.

## functions

```
functions: dict[str, Function]

```

The function members.

This method is part of the consumer API: do not use when producing Griffe trees!

## has_docstring

```
has_docstring: bool

```

Whether this object has a docstring (empty or not).

See also: docstring, has_docstrings.

## has_docstrings

```
has_docstrings: bool

```

Whether this object or any of its members has a docstring (empty or not).

Inherited members are not considered. Imported members are not considered, unless they are also public.

See also: docstring, has_docstring.

## imports

```
imports: dict[str, str] = {}

```

The other objects imported by this object.

Keys are the names within the object (`from ... import ... as AS_NAME`), while the values are the actual names of the objects (`from ... import REAL_NAME as ...`).

## imports_future_annotations

```
imports_future_annotations: bool

```

Whether this module import future annotations.

## inherited

```
inherited: bool = False

```

Always false for objects.

Only aliases can be marked as inherited.

## inherited_members

```
inherited_members: dict[str, Alias]

```

Members that are inherited from base classes.

This method is part of the consumer API: do not use when producing Griffe trees!

See also: members.

## is_alias

```
is_alias: bool = False

```

Always false for objects.

## is_attribute

```
is_attribute: bool

```

Whether this object is an attribute.

See also: is_module. is_class, is_function, is_alias, is_kind.

## is_class

```
is_class: bool

```

Whether this object is a class.

See also: is_module. is_function, is_attribute, is_alias, is_kind.

## is_class_private

```
is_class_private: bool

```

Whether this object/alias is class-private (starts with `__` and is a class member).

## is_collection

```
is_collection: bool = False

```

Always false for objects.

## is_deprecated

```
is_deprecated: bool

```

Whether this object is deprecated.

## is_exported

```
is_exported: bool

```

Whether this object/alias is exported (listed in `__all__`).

## is_function

```
is_function: bool

```

Whether this object is a function.

See also: is_module. is_class, is_attribute, is_alias, is_kind.

## is_imported

```
is_imported: bool

```

Whether this object/alias was imported from another module.

## is_init_module

```
is_init_module: bool

```

Whether this module is an `__init__.py` module.

See also: is_module.

## is_module

```
is_module: bool

```

Whether this object is a module.

See also: is_init_module. is_class, is_function, is_attribute, is_alias, is_kind.

## is_namespace_package

```
is_namespace_package: bool

```

Whether this module is a namespace package (top folder, no `__init__.py`).

See also: is_namespace_subpackage.

## is_namespace_subpackage

```
is_namespace_subpackage: bool

```

Whether this module is a namespace subpackage.

See also: is_namespace_package.

## is_package

```
is_package: bool

```

Whether this module is a package (top module).

See also: is_subpackage.

## is_private

```
is_private: bool

```

Whether this object/alias is private (starts with `_`) but not special.

## is_public

```
is_public: bool

```

Whether this object is considered public.

In modules, developers can mark objects as public thanks to the `__all__` variable. In classes however, there is no convention or standard to do so.

Therefore, to decide whether an object is public, we follow this algorithm:

- If the object's `public` attribute is set (boolean), return its value.
- If the object is listed in its parent's (a module) `__all__` attribute, it is public.
- If the parent (module) defines `__all__` and the object is not listed in, it is private.
- If the object has a private name, it is private.
- If the object was imported from another module, it is private.
- Otherwise, the object is public.

## is_special

```
is_special: bool

```

Whether this object/alias is special ("dunder" attribute/method, starts and end with `__`).

## is_subpackage

```
is_subpackage: bool

```

Whether this module is a subpackage.

See also: is_package.

## is_wildcard_exposed

```
is_wildcard_exposed: bool

```

Whether this object/alias is exposed to wildcard imports.

To be exposed to wildcard imports, an object/alias must:

- be available at runtime
- have a module as parent
- be listed in `__all__` if `__all__` is defined
- or not be private (having a name starting with an underscore)

Special case for Griffe trees: a submodule is only exposed if its parent imports it.

Returns:

- `bool` – True or False.

## kind

```
kind = MODULE

```

The object kind.

## labels

```
labels: set[str] = set()

```

The object labels (`property`, `dataclass`, etc.).

See also: has_labels.

## lineno

```
lineno: int | None = lineno

```

The starting line number of the object.

See also: endlineno.

## lines

```
lines: list[str]

```

The lines containing the source of this object.

See also: lines_collection, source.

## lines_collection

```
lines_collection: LinesCollection

```

The lines collection attached to this object or its parents.

See also: lines, source.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## members

```
members: dict[str, Object | Alias] = {}

```

The object members (modules, classes, functions, attributes).

See also: inherited_members, get_member, set_member, filter_members.

## module

```
module: Module

```

The parent module of this object.

See also: package.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))
>>> # The `module` of a module is itself.
>>> markdown["core"].module
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))

```

Raises:

- `ValueError` – When the object is not a module and does not have a parent.

## modules

```
modules: dict[str, Module]

```

The module members.

This method is part of the consumer API: do not use when producing Griffe trees!

## modules_collection

```
modules_collection: ModulesCollection

```

The modules collection attached to this object or its parents.

Raises:

- `ValueError` – When no modules collection can be found in the object or its parents.

## name

```
name: str = name

```

The object name.

## overloads

```
overloads: dict[str, list[Function]] = defaultdict(list)

```

The overloaded signatures declared in this module.

## package

```
package: Module

```

The absolute top module (the package) of this object.

See also: module.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].package
Module(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))

```

## parent

```
parent: Module | Class | None = parent

```

The parent of the object (none if top module).

## path

```
path: str

```

The dotted path of this object.

On regular objects (not aliases), the path is the canonical path.

See also: canonical_path.

Examples:

```
>>> import griffe
>>> markdown = griffe.load("markdown")
>>> markdown["core.Markdown.references"].path
'markdown.core.Markdown.references'

```

## public

```
public: bool | None = None

```

Whether this object is public.

## relative_filepath

```
relative_filepath: Path

```

The file path where this object was defined, relative to the current working directory.

If this object's file path is not relative to the current working directory, return its absolute path.

See also: filepath, relative_package_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## relative_package_filepath

```
relative_package_filepath: Path

```

The file path where this object was defined, relative to the top module path.

See also: filepath, relative_filepath.

Raises:

- `ValueError` – When the relative path could not be computed.

## runtime

```
runtime: bool = runtime

```

Whether this object is available at runtime.

Typically, type-guarded objects (under an `if TYPE_CHECKING` condition) are not available at runtime.

## source

```
source: str

```

The source code of this object.

See also: lines, lines_collection.

## __bool__

```
__bool__() -> bool

```

An object is always true-ish.

## __delitem__

```
__delitem__(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> del griffe_object["foo"]
>>> del griffe_object["path.to.bar"]
>>> del griffe_object[("path", "to", "qux")]

```

## __getitem__

```
__getitem__(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Members will be looked up in both declared members and inherited ones, triggering computation of the latter.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> qux = griffe_object[("path", "to", "qux")]

```

## __len__

```
__len__() -> int

```

The number of members in this object, recursively.

## __setitem__

```
__setitem__(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the consumer API: do not use when producing Griffe trees!

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object["foo"] = foo
>>> griffe_object["path.to.bar"] = bar
>>> griffe_object[("path", "to", "qux")] = qux

```

## as_dict

```
as_dict(**kwargs: Any) -> dict[str, Any]

```

Return this module's data as a dictionary.

See also: as_json.

Parameters:

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options.

Returns:

- `dict[str, Any]` – A dictionary.

## as_json

```
as_json(*, full: bool = False, **kwargs: Any) -> str

```

Return this object's data as a JSON string.

Parameters:

- ### **`full`**

  (`bool`, default: `False` ) – Whether to return full info, or just base info.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional serialization options passed to encoder.

Returns:

- `str` – A JSON string.

## del_member

```
del_member(key: str | Sequence[str]) -> None

```

Delete a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> griffe_object.del_member("foo")
>>> griffe_object.del_member("path.to.bar")
>>> griffe_object.del_member(("path", "to", "qux"))

```

## filter_members

```
filter_members(
    *predicates: Callable[[Object | Alias], bool],
) -> dict[str, Object | Alias]

```

Filter and return members based on predicates.

See also: members.

Parameters:

- ### **`*predicates`**

  (`Callable[[Object | Alias], bool]`, default: `()` ) – A list of predicates, i.e. callables accepting a member as argument and returning a boolean.

Returns:

- `dict[str, Object | Alias]` – A dictionary of members.

## from_json

```
from_json(json_string: str, **kwargs: Any) -> _ObjType

```

Create an instance of this class from a JSON string.

Parameters:

- ### **`json_string`**

  (`str`) – JSON to decode into Object.

- ### **`**kwargs`**

  (`Any`, default: `{}` ) – Additional options passed to decoder.

Returns:

- `_ObjType` – An Object instance.

Raises:

- `TypeError` – When the json_string does not represent and object of the class from which this classmethod has been called.

## get_member

```
get_member(key: str | Sequence[str]) -> Any

```

Get a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Members will be looked up in declared members only, not inherited ones.

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

Examples:

```
>>> foo = griffe_object["foo"]
>>> bar = griffe_object["path.to.bar"]
>>> bar = griffe_object[("path", "to", "bar")]

```

## has_labels

```
has_labels(*labels: str) -> bool

```

Tell if this object has all the given labels.

See also: labels.

Parameters:

- ### **`*labels`**

  (`str`, default: `()` ) – Labels that must be present.

Returns:

- `bool` – True or False.

## is_kind

```
is_kind(kind: str | Kind | set[str | Kind]) -> bool

```

Tell if this object is of the given kind.

See also: is_module, is_class, is_function, is_attribute, is_alias.

Parameters:

- ### **`kind`**

  (`str | Kind | set[str | Kind]`) – An instance or set of kinds (strings or enumerations).

Raises:

- `ValueError` – When an empty set is given as argument.

Returns:

- `bool` – True or False.

## resolve

```
resolve(name: str) -> str

```

Resolve a name within this object's and parents' scope.

Parameters:

- ### **`name`**

  (`str`) – The name to resolve.

Raises:

- `NameResolutionError` – When the name could not be resolved.

Returns:

- `str` – The resolved name.

## set_member

```
set_member(
    key: str | Sequence[str], value: Object | Alias
) -> None

```

Set a member with its name or path.

This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).

Parameters:

- ### **`key`**

  (`str | Sequence[str]`) – The name or path of the member.

- ### **`value`**

  (`Object | Alias`) – The member.

Examples:

```
>>> griffe_object.set_member("foo", foo)
>>> griffe_object.set_member("path.to.bar", bar)
>>> griffe_object.set_member(("path", "to", "qux"), qux)

```
