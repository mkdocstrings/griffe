{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome","text":"<p>Griffe, pronounced \"grif\" (<code>/\u0261\u0281if/</code>), is a french word that means \"claw\", but also \"signature\" in a familiar way. \"On reconna\u00eet bien l\u00e0 sa griffe.\"</p> <ul> <li> <p> Getting started</p> <p>Learn how to quickly install and use Griffe.</p> <p> Installation  Introduction</p> </li> <li> <p> Deep dive</p> <p>Learn everything you can do with Griffe.</p> <p> Guide  API reference</p> </li> </ul>"},{"location":"#what-is-griffe","title":"What is Griffe?","text":"<p>Griffe is a Python tool and library that gives you signatures for entire Python programs. It extracts the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.</p> <p>Griffe can be used as a Python library. For example, the Python handler of mkdocstrings uses Griffe to collect API data and render API documentation in HTML. Griffe can also be used on the command-line, to load and serialize your API data to JSON, or find breaking changes in your API since the previous version of your library.</p> Serializing as JSON<pre><code>$ griffe dump griffe -ssrc -r 2&gt;/dev/null | head -n29\n{\n  \"griffe\": {\n    \"docstring\": {\n      \"endlineno\": 161,\n      \"lineno\": 5,\n      \"value\": \"Griffe package.\\n\\nSignatures for entire Python programs.\\nExtract the structure, the frame, the skeleton of your project,\\nto generate API documentation or find breaking changes in your API.\\n\\nThe entirety of the public API is exposed here, in the top-level `griffe` module.\\n\\nAll messages written to standard output or error are logged using the `logging` module.\\nOur logger's name is set to `\\\"griffe\\\"` and is public (you can rely on it).\\nYou can obtain the logger from the standard `logging` module: `logging.getLogger(\\\"griffe\\\")`.\\nActual logging messages are not part of the public API (they might change without notice).\\n\\nRaised exceptions throughout the package are part of the public API (you can rely on them).\\nTheir actual messages are not part of the public API (they might change without notice).\\n\\nThe following paragraphs will help you discover the package's content.\\n\\n## CLI entrypoints\\n\\nGriffe provides a command-line interface (CLI) to interact with the package. The CLI entrypoints can be called from Python code.\\n\\n- [`griffe.main`][]: Run the main program.\\n- [`griffe.check`][]: Check for API breaking changes in two versions of the same package.\\n- [`griffe.dump`][]: Load packages data and dump it as JSON.\\n\\n## Loaders\\n\\nTo load API data, Griffe provides several high-level functions.\\n\\n- [`griffe.load`][]: Load and return a Griffe object.\\n- [`griffe.load_git`][]: Load and return a module from a specific Git reference.\\n- [`griffe.load_pypi`][]: Load and return a module from a specific package version downloaded using pip.\\n\\n## Models\\n\\nThe data loaded by Griffe is represented by several classes.\\n\\n- [`griffe.Module`][]: The class representing a Python module.\\n- [`griffe.Class`][]: The class representing a Python class.\\n- [`griffe.Function`][]: The class representing a Python function or method.\\n- [`griffe.Attribute`][]: The class representing a Python attribute.\\n- [`griffe.Alias`][]: This class represents an alias, or indirection, to an object declared in another module.\\n\\nAdditional classes are available to represent other concepts.\\n\\n- [`griffe.Decorator`][]: This class represents a decorator.\\n- [`griffe.Parameters`][]: This class is a container for parameters.\\n- [`griffe.Parameter`][]: This class represent a function parameter.\\n\\n## Agents\\n\\nGriffe is able to analyze code both statically and dynamically, using the following \\\"agents\\\".\\nHowever most of the time you will only need to use the loaders above.\\n\\n- [`griffe.visit`][]: Parse and visit a module file.\\n- [`griffe.inspect`][]: Inspect a module.\\n\\n## Serializers\\n\\nGriffe can serizalize data to dictionary and JSON.\\n\\n- [`griffe.Object.as_json`][griffe.Object.as_json]\\n- [`griffe.Object.from_json`][griffe.Object.from_json]\\n- [`griffe.JSONEncoder`][]: JSON encoder for Griffe objects.\\n- [`griffe.json_decoder`][]: JSON decoder for Griffe objects.\\n\\n## API checks\\n\\nGriffe can compare two versions of the same package to find breaking changes.\\n\\n- [`griffe.find_breaking_changes`][]: Find breaking changes between two versions of the same API.\\n- [`griffe.Breakage`][]: Breakage classes can explain what broke from a version to another.\\n\\n## Extensions\\n\\nGriffe supports extensions. You can create your own extension by subclassing the `griffe.Extension` class.\\n\\n- [`griffe.load_extensions`][]: Load configured extensions.\\n- [`griffe.Extension`][]: Base class for Griffe extensions.\\n\\n## Docstrings\\n\\nGriffe can parse docstrings into structured data.\\n\\nMain class:\\n\\n- [`griffe.Docstring`][]: This class represents docstrings.\\n\\nDocstring section and element classes all start with `Docstring`.\\n\\nDocstring parsers:\\n\\n- [`griffe.parse`][]: Parse the docstring.\\n- [`griffe.parse_auto`][]: Parse a docstring by automatically detecting the style it uses.\\n- [`griffe.parse_google`][]: Parse a Google-style docstring.\\n- [`griffe.parse_numpy`][]: Parse a Numpydoc-style docstring.\\n- [`griffe.parse_sphinx`][]: Parse a Sphinx-style docstring.\\n\\n## Exceptions\\n\\nGriffe uses several exceptions to signal errors.\\n\\n- [`griffe.GriffeError`][]: The base exception for all Griffe errors.\\n- [`griffe.LoadingError`][]: Exception for loading errors.\\n- [`griffe.NameResolutionError`][]: Exception for names that cannot be resolved in a object scope.\\n- [`griffe.UnhandledEditableModuleError`][]: Exception for unhandled editables modules, when searching modules.\\n- [`griffe.UnimportableModuleError`][]: Exception for modules that cannot be imported.\\n- [`griffe.AliasResolutionError`][]: Exception for aliases that cannot be resolved.\\n- [`griffe.CyclicAliasError`][]: Exception raised when a cycle is detected in aliases.\\n- [`griffe.LastNodeError`][]: Exception raised when trying to access a next or previous node.\\n- [`griffe.RootNodeError`][]: Exception raised when trying to use siblings properties on a root node.\\n- [`griffe.BuiltinModuleError`][]: Exception raised when trying to access the filepath of a builtin module.\\n- [`griffe.ExtensionError`][]: Base class for errors raised by extensions.\\n- [`griffe.ExtensionNotLoadedError`][]: Exception raised when an extension could not be loaded.\\n- [`griffe.GitError`][]: Exception raised for errors related to Git.\\n\\n# Expressions\\n\\nGriffe stores snippets of code (attribute values, decorators, base class, type annotations) as expressions.\\nExpressions are basically abstract syntax trees (AST) with a few differences compared to the nodes returned by [`ast`][].\\nGriffe provides a few helpers to extract expressions from regular AST nodes.\\n\\n- [`griffe.get_annotation`][]: Get a type annotation as expression.\\n- [`griffe.get_base_class`][]: Get a base class as expression.\\n- [`griffe.get_condition`][]: Get a condition as expression.\\n- [`griffe.get_expression`][]: Get an expression from an AST node.\\n- [`griffe.safe_get_annotation`][]: Get a type annotation as expression, safely (returns `None` on error).\\n- [`griffe.safe_get_base_class`][]: Get a base class as expression, safely (returns `None` on error).\\n- [`griffe.safe_get_condition`][]: Get a condition as expression, safely (returns `None` on error).\\n- [`griffe.safe_get_expression`][]: Get an expression from an AST node, safely (returns `None` on error).\\n\\nThe base class for expressions.\\n\\n- [`griffe.Expr`][]\\n\\nExpression classes all start with `Expr`.\\n\\n# Loggers\\n\\nIf you want to log messages from extensions, get a logger with `get_logger`.\\nThe `logger` attribute is used by Griffe itself. You can use it to temporarily disable Griffe logging.\\n\\n- [`griffe.logger`][]: Our global logger, used throughout the library.\\n- [`griffe.get_logger`][]: Create and return a new logger instance.\\n\\n# Helpers\\n\\nTo test your Griffe extensions, or to load API data from code in memory, Griffe provides the following helpers.\\n\\n- [`griffe.temporary_pyfile`][]: Create a Python file containing the given code in a temporary directory.\\n- [`griffe.temporary_pypackage`][]: Create a package containing the given modules in a temporary directory.\\n- [`griffe.temporary_visited_module`][]: Create and visit a temporary module with the given code.\\n- [`griffe.temporary_visited_package`][]: Create and visit a temporary package.\\n- [`griffe.temporary_inspected_module`][]: Create and inspect a temporary module with the given code.\\n- [`griffe.temporary_inspected_package`][]: Create and inspect a temporary package.\"\n    },\n    \"filepath\": \"/media/data/dev/insiders/griffe/src/griffe/__init__.py\",\n    \"kind\": \"module\",\n    \"labels\": [],\n    \"members\": {\n      \"Alias\": {\n        \"endlineno\": 350,\n        \"kind\": \"alias\",\n        \"lineno\": 339,\n        \"name\": \"Alias\",\n        \"target_path\": \"_griffe.models.Alias\"\n      },\n      \"AliasResolutionError\": {\n        \"endlineno\": 275,\n        \"kind\": \"alias\",\n        \"lineno\": 261,\n        \"name\": \"AliasResolutionError\",\n        \"target_path\": \"_griffe.exceptions.AliasResolutionError\"\n      },\n      \"Attribute\": {\n        \"endlineno\": 350,\n        \"kind\": \"alias\",\n        \"lineno\": 339,\n</code></pre> Checking for API breaking changes<pre><code>$ griffe check griffe -ssrc -b0.46.0.1.2.0 -a0.45.0.1.2.0 --verbose\nsrc/griffe/mixins.py:303: ObjectAliasMixin.is_exported:\nPublic object points to a different kind of object:\n  Old: function\n  New: attribute\n\nsrc/griffe/mixins.py:353: ObjectAliasMixin.is_public:\nPublic object points to a different kind of object:\n  Old: function\n  New: attribute\n\nsrc/griffe/dataclasses.py:520: Object.has_labels(labels):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n\nsrc/griffe/diff.py:571: find_breaking_changes(ignore_private):\nParameter default was changed:\n  Old: True\n  New: _sentinel\n\nsrc/griffe/extensions/base.py:463: load_extensions(exts):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n\nsrc/griffe/dataclasses.py:1073: Alias.has_labels(labels):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n</code></pre> <p> Playground  Join our Gitter channel</p>"},{"location":"alternatives/","title":"Alternatives","text":"<p>Similar projects exist in the ecosystem. They generally allow to extract API data from Python source, or to build a representation of the Python source or Python API. Some of them also allow to compare representations to find breaking changes.</p>"},{"location":"alternatives/#docspec","title":"Docspec","text":"<p>Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well.</p> <p>The repository contains two projects, docspec and docspec-python. docspec is the reference implementation for reading/writing the JSON format and API for representing API objects in memory. docspec-python is a parser for Python packages and modules based on lib2to3 producing docspec API object representations.</p>"},{"location":"alternatives/#frappucino","title":"Frappucino","text":"<p>Frappucino allows you to make sure you haven't broken your API, by first taking an imprint of your API at one point in time and then compare it to the current project state. The goal is to warn you when incompatible changes have been introduced, and to list these changes.</p>"},{"location":"alternatives/#other-related-projects","title":"Other related projects","text":"<p>The work of @tristanlatr is worth checking out, notably his ast-nodes and astuce projects, which aim at providing lower-level Python AST utilities to help implementing API data extraction with powerful inference. Tristan is advocating for more interoperability between Docspec, Griffe and his own projects.</p> <p>We should also mention our own simplified \"Griffe\" variants for other programming languages, such as Griffe TypeDoc, which extracts API data from TypeScript sources thanks to TypeDoc, and builds Python objects from it.</p> <p>The following projects are more than API data extraction tools, but deserve being mentioned.</p>"},{"location":"alternatives/#papyri","title":"Papyri","text":"<p>Papyri is a set of tools to build, publish (future functionality - to be done), install and render documentation within IPython and Jupyter.</p> <p>Papyri has considered using Griffe in the past , but eventually went with their own solution, trying to be compatible with Griffe serialization format.</p>"},{"location":"alternatives/#pdoc","title":"pdoc","text":"<p>pdoc is a documentation renderer for Python projects. pdoc's main feature is a focus on simplicity: pdoc aims to do one thing and do it well.</p>"},{"location":"alternatives/#sphinx-autoapi","title":"Sphinx AutoAPI","text":"<p>Sphinx AutoAPI is a new approach to API documentation in Sphinx. It is a Sphinx extension for generating complete API documentation without needing to load, run, or import the project being documented. In contrast to the traditional Sphinx autodoc, which requires manual authoring and uses code imports, AutoAPI finds and generates documentation by parsing source code.</p> <p>Sphinx AutoAPI is considering Griffe as a data extraction backend </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#173-2025-04-23","title":"1.7.3 - 2025-04-23","text":"<p>Compare with 1.7.2</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Don't output color codes with GitHub format (2666399 by Timoth\u00e9e Mazzucotelli). Issue-378</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Log a debug message when inspecting a module raises an error (4e73b3e by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings-753</li> </ul>"},{"location":"changelog/#172-2025-04-01","title":"1.7.2 - 2025-04-01","text":"<p>Compare with 1.7.1</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Override exports when merging module stubs (94f23e7 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings-751</li> <li>Override attribute values when merging stubs (b940c51 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings-751</li> </ul>"},{"location":"changelog/#171-2025-03-29","title":"1.7.1 - 2025-03-29","text":"<p>Compare with 1.7.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Never raise alias resolution error when resolving a name from an <code>__init__</code> method scope (949ff7d by Timoth\u00e9e Mazzucotelli). Issue-374</li> </ul>"},{"location":"changelog/#170-2025-03-27","title":"1.7.0 - 2025-03-27","text":"<p>Compare with 1.6.3</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Remove dependency to <code>astunparse</code> (Python 3.8-) (fd052b1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>warnings</code> parameter to docstring parsers, allowing to disable all warning logs when parsing docstrings (7ac01ba by Timoth\u00e9e Mazzucotelli). Issue-293</li> </ul>"},{"location":"changelog/#163-2025-03-26","title":"1.6.3 - 2025-03-26","text":"<p>Compare with 1.6.2</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Allow setting <code>lineno</code>, <code>endlineno</code> and <code>value</code> through aliases (d038eaa by Timoth\u00e9e Mazzucotelli). Issue-griffe-pydantic-29</li> <li>Don't resolve attribute values to attribute with same name (25cc58f by Timoth\u00e9e Mazzucotelli). Issue-367</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Improve objects conversion to annotation during dynamic analysis (716d27b by Timoth\u00e9e Mazzucotelli). Issue-369</li> </ul>"},{"location":"changelog/#162-2025-03-20","title":"1.6.2 - 2025-03-20","text":"<p>Compare with 1.6.1</p>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Maintain exports order (<code>__all__</code>) (ded36bf by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#161-2025-03-18","title":"1.6.1 - 2025-03-18","text":"<p>Compare with 1.6.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Extend exports from already expanded modules (7e708cf by Timoth\u00e9e Mazzucotelli). Issue-746</li> <li>Update imports when merging stubs (5a92379 by Timoth\u00e9e Mazzucotelli). Issue-746</li> <li>Don't alias attributes when inspecting (8063ba9 by Timoth\u00e9e Mazzucotelli). Issue-366</li> <li>Register top-module in collection earlier (2c389b5 by Timoth\u00e9e Mazzucotelli).</li> <li>Prevent recursion errors by not looking into inherited members when resolving base classes (87cbaf8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#160-2025-03-01","title":"1.6.0 - 2025-03-01","text":"<p>Compare with 1.5.7</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Allow passing literal docstring styles everywhere in the API, not just <code>Parser</code> enumeration values (053bf20 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Follow symlinks when finding modules (087832f by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings-python-258</li> </ul>"},{"location":"changelog/#157-2025-02-11","title":"1.5.7 - 2025-02-11","text":"<p>Compare with 1.5.6</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Don't conflate passed argument with class member (instance attribute) (4791b0b by Timoth\u00e9e Mazzucotelli). Issue-357</li> </ul>"},{"location":"changelog/#156-2025-01-30","title":"1.5.6 - 2025-01-30","text":"<p>Compare with 1.5.5</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Handle get/set descriptor objects as properties during dynamic analysis (bc3c75a by Timoth\u00e9e Mazzucotelli). Issue-354</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Remove Google parser support for Deprecated sections (previously never used) (425aece by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#155-2025-01-16","title":"1.5.5 - 2025-01-16","text":"<p>Compare with 1.5.4</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix check command's Markdown output format not displaying parameter names (5e7af22 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't output empty change for removed objects when using GitHub output format (check command) (6842372 by Timoth\u00e9e Mazzucotelli). Issue-349</li> </ul>"},{"location":"changelog/#154-2024-12-26","title":"1.5.4 - 2024-12-26","text":"<p>Compare with 1.5.3</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Append trailing comma to length-1 tuples (4fccca7 by Timoth\u00e9e Mazzucotelli). Issue-343</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Avoid dictionary creation when accessing members of non-classes with subscript syntax (0279998 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#153-2024-12-26","title":"1.5.3 - 2024-12-26","text":"<p>Compare with 1.5.2</p>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Stop caching objects' inherited members, aliases' members and inherited members, classes' resolved bases (e8db3a2 by Timoth\u00e9e Mazzucotelli). Issue-346</li> </ul>"},{"location":"changelog/#152-2024-12-26","title":"1.5.2 - 2024-12-26","text":"<p>Compare with 1.5.1</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Always resolve aliases when checking APIs (0b4f0da by Timoth\u00e9e Mazzucotelli).</li> <li>Don't use same branch name when creating a worktree (6d6c996 by Timoth\u00e9e Mazzucotelli). Issue-337</li> <li>Fetch attribute annotations from inherited members too when parsing docstrings (88fb6b6 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings/python#175</li> </ul>"},{"location":"changelog/#151-2024-10-18","title":"1.5.1 - 2024-10-18","text":"<p>Compare with 1.5.0</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Sort Git tags using <code>creatordate</code> field, which works with both lightweight and annotated tags (3bfa401 by Timoth\u00e9e Mazzucotelli). Issue-327</li> </ul>"},{"location":"changelog/#150-2024-10-18","title":"1.5.0 - 2024-10-18","text":"<p>Compare with 1.4.1</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow setting and deleting parameters within container (19f354d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#141-2024-10-12","title":"1.4.1 - 2024-10-12","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Drop support for Python 3.8 (f2d39b8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2024-10-11","title":"1.4.0 - 2024-10-11","text":"<p>Compare with 1.3.2</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add Markdown and GitHub output formats to the <code>griffe check</code> command (806805c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#132-2024-10-01","title":"1.3.2 - 2024-10-01","text":"<p>Compare with 1.3.1</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Normalize paths of temporary Git worktrees (0821e67 by Timoth\u00e9e Mazzucotelli). Issue-324</li> </ul>"},{"location":"changelog/#131-2024-09-12","title":"1.3.1 - 2024-09-12","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Refactor and fix logic again for fetching returns/yields/receives annotation from parents (a80bd3c by Timoth\u00e9e Mazzucotelli). Follow-up-of-PR-322</li> <li>Don't crash on invalid signature given \"Receives\" section (1cb8f51 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#130-2024-09-10","title":"1.3.0 - 2024-09-10","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Allow deselecting multiple or named items in Yields and Receives (344df50 by Marco Ricci). Issue-263</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Don't crash when trying to merge stubs into a compiled module that has no file path (e1f3ed9 by Timoth\u00e9e Mazzucotelli). Issue-323</li> <li>Fix identity checks in inspector when handling attributes (676cfb4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Extract common functionality in Returns, Yields and Receives parsing (c768356 by Marco Ricci). Issue-263</li> <li>Remove useless branch in <code>resolve</code> method, add tests for it (aa6c7e4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2024-08-23","title":"1.2.0 - 2024-08-23","text":"<p>Compare with 1.1.1</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Support attribute syntax in <code>__all__</code> values (ad99794 by Timoth\u00e9e Mazzucotelli). Issue-316</li> </ul>"},{"location":"changelog/#111-2024-08-20","title":"1.1.1 - 2024-08-20","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Preemptively expand <code>__all__</code> values and wildcard imports before firing the <code>on_package_loaded</code> event (21b3780 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2024-08-17","title":"1.1.0 - 2024-08-17","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add <code>on_wildcard_expansion</code> event (c6bc6fa by Timoth\u00e9e Mazzucotelli). Issue-282</li> <li>Add <code>on_alias</code> event (a760a8c by Timoth\u00e9e Mazzucotelli). Issue-282</li> <li>Pass <code>loader</code> to <code>on_package_loaded</code> hooks (7f82dc3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2024-08-15","title":"1.0.0 - 2024-08-15","text":"<p>Compare with 0.49.0</p> <p>V1! </p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<p>Highlights:</p> <ul> <li>Extensions inherit from <code>Extension</code>, (<code>VisitorExtension</code> and <code>InspectorExtension</code> are removed)</li> <li>Members are serialized (<code>as_dict</code>/JSON) as a dictionary instead of a list</li> <li>All objects are available in the top-level <code>griffe</code> module, nowhere else</li> </ul> <p>Removed objects:</p> <ul> <li>all modules under the <code>griffe</code> package</li> <li>the <code>griffe.DocstringWarningCallable</code> class</li> <li>the <code>griffe.When</code> class</li> <li>the <code>griffe.ExtensionType</code> type</li> <li>the <code>griffe.InspectorExtension</code> class</li> <li>the <code>griffe.VisitorExtension</code> class</li> <li>the <code>griffe.HybridExtension</code> extension</li> <li>the <code>griffe.patch_logger</code> function</li> <li>the <code>griffe.JSONEncoder.docstring_parser</code> attribute</li> <li>the <code>griffe.JSONEncoder.docstring_options</code> attribute</li> <li>the <code>griffe.Extensions.attach_visitor</code> method</li> <li>the <code>griffe.Extensions.attach_inspector</code> method</li> <li>the <code>griffe.Extensions.before_visit</code> method</li> <li>the <code>griffe.Extensions.before_children_visit</code> method</li> <li>the <code>griffe.Extensions.after_children_visit</code> method</li> <li>the <code>griffe.Extensions.after_visit</code> method</li> <li>the <code>griffe.Extensions.before_inspection</code> method</li> <li>the <code>griffe.Extensions.before_children_inspection</code> method</li> <li>the <code>griffe.Extensions.after_children_inspection</code> method</li> <li>the <code>griffe.Extensions.after_inspection</code> method</li> <li>the <code>griffe.GriffeLoader.load_module</code> method</li> <li>the <code>has_special_name</code> and <code>has_private_name</code> properties on objects</li> <li>the <code>is_explicitely_exported</code> and <code>is_implicitely_exported</code> properties on objects</li> <li>the <code>member_is_exported</code> method on objects</li> </ul> <p>Renamed/moved objects:</p> <ul> <li><code>griffe.Function.setter</code> -&gt; <code>griffe.Attribute.setter</code></li> <li><code>griffe.Function.deleter</code> -&gt; <code>griffe.Attribute.deleter</code></li> </ul> <p>Signatures:</p> <ul> <li><code>griffe.docstring_warning(name)</code> parameter was removed</li> <li><code>griffe.GriffeLoader.load(module)</code> parameter was removed</li> <li><code>griffe.load(module)</code> parameter was removed</li> <li><code>griffe.load_git(module)</code> parameter was removed</li> <li><code>griffe.find_breaking_changes(ignore_private)</code> parameter was removed</li> <li>see previous deprecations</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Remove all legacy code for v1 (86d321e and fd72083by Timoth\u00e9e Mazzucotelli). PR-314</li> </ul>"},{"location":"changelog/#0490-2024-08-14","title":"0.49.0 - 2024-08-14","text":"<p>Compare with 0.48.0</p> <p>\u26a1 Imminent v1! \u26a1\ud83d\ude80 See v0.46.</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<ul> <li>Cancel deprecation of <code>get_logger</code> and <code>patch_loggers</code> (and deprecate <code>patch_logger</code> instead). Extensions need loggers too, distinct ones, and they were forgotten... Sorry for the back and forth \ud83d\ude47</li> <li>Attributes <code>setter</code> and <code>deleter</code> on <code>Function</code> are deprecated. They were moved into the <code>Attribute</code> class since properties are instantiated as attributes, not functions.</li> <li>Extension hooks must accept <code>**kwargs</code> in their signature, to allow forward-compatibility. Accepting <code>**kwargs</code> also makes it possible to remove unused arguments from the signature.</li> <li>In version 1, Griffe will serialize object members as dictionaries instead of lists. Lists were initially used to preserve source order, but source order can be re-obtained thanks to the line number attributes (<code>lineno</code>, <code>endlineno</code>). Version 0.49 is able to load both lists and dictionaries from JSON dumps, and version 1 will maintain this ability. However external tools loading JSON dumps will need to be updated.</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add <code>temporary_inspected_package</code> helper (3c4ba16 by Timoth\u00e9e Mazzucotelli).</li> <li>Accept alias resolution related parameters in <code>temporary_visited_package</code> (7d5408a by Timoth\u00e9e Mazzucotelli).</li> <li>Accept <code>inits</code> parameter in <code>temporary_visited_package</code> (a4859b7 by Timoth\u00e9e Mazzucotelli).</li> <li>Warn (DEBUG) when an object coming from a sibling, parent or external module instead of the current module or a submodule is exported (listed in <code>__all__</code>) (f82317a by Timoth\u00e9e Mazzucotelli). Issue-249, Related-to-PR-251</li> <li>Pass down agent to extension hooks (71acb01 by Timoth\u00e9e Mazzucotelli). Issue-312</li> <li>Add <code>source</code> property to docstrings, which return the docstring lines as written in the source (3f6a71a by Timoth\u00e9e Mazzucotelli). Issue-90</li> </ul>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Move <code>setter</code> and <code>deleter</code> to <code>Attribute</code> class instead of <code>Function</code>, since that's how properties are instantiated (309c6e3 by Timoth\u00e9e Mazzucotelli). Issue-311</li> <li>Reduce risk of recursion errors by excluding imported objects from <code>has_docstrings</code>, unless they're public (9296ca7 by Timoth\u00e9e Mazzucotelli). Issue-302</li> <li>Fix retrieval of annotations from parent for Yields section in properties (8a21f4d by Timoth\u00e9e Mazzucotelli). Issue-298</li> <li>Fix parsing Yields section (Google-style) when yielded values are tuples, and the description has more lines than tuple values (9091776 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix condition on objects kinds when merging stubs (727f99b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Sort keys when dumping JSON from the command line (8cdffe9 by Timoth\u00e9e Mazzucotelli). Issue-310</li> <li>Handle both lists and dicts for members when loading JSON data in preparation of v1 (f89050c by Timoth\u00e9e Mazzucotelli). Issue-310</li> <li>Accept <code>**kwargs</code> in extension hooks to allow forward-compatibility (2621d52 by Timoth\u00e9e Mazzucotelli). Issue-312</li> <li>Revert deprecation of <code>patch_loggers</code> in favor of <code>patch_logger</code> (a20796a by Timoth\u00e9e Mazzucotelli).</li> <li>Expose dummy <code>load_pypi</code> in non-Insiders version (a69cffd by Timoth\u00e9e Mazzucotelli).</li> <li>Don't emit deprecation warnings through own usage of deprecated API (9922d74 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings#676</li> <li>Finish preparing docstring style auto-detection feature (03bdec6 by Timoth\u00e9e Mazzucotelli). Issue-5</li> <li>Add DocstringStyle literal type to prepare docstring style auto detection feature (b7aaf64 by Timoth\u00e9e Mazzucotelli). Issue-5</li> <li>Inherit from <code>str, Enum</code> instead of <code>StrEnum</code> which needs a backport (77f1544 by Timoth\u00e9e Mazzucotelli). Issue-307</li> </ul>"},{"location":"changelog/#0480-2024-07-15","title":"0.48.0 - 2024-07-15","text":"<p>Compare with 0.47.0</p> <p>\u26a1 Imminent v1! \u26a1\ud83d\ude80 See v0.46.</p>"},{"location":"changelog/#deprecations_1","title":"Deprecations","text":"<ul> <li>All submodules are deprecated. All objects are now exposed in the top-level <code>griffe</code> module.</li> <li>All logger names are deprecated, and will be replaced with <code>\"griffe\"</code> in v1. In v1 our single <code>\"griffe\"</code> logger will provide a method to temporarily disable logging, <code>logger.disable()</code>, since that's the most common third-party use.</li> <li>The <code>get_logger</code> function is deprecated. Instead, we'll use a global <code>logger</code> internally, and users are welcome to use it too.</li> <li>The <code>patch_loggers</code> function is renamed <code>patch_logger</code>.</li> <li>Following the logging changes, the <code>docstring_warning</code> function can now directly log a warning message instead of returning a callable that does. Passing it a logger name (to get a callable) is deprecated in favor of passing it a docstring, message and offset directly.</li> </ul>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Support <code>FORCE_COLOR</code> environment variable (e1b7bd9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Don't take a shortcut to the end of an alias chain when getting/setting/deleting alias members (1930609 by Timoth\u00e9e Mazzucotelli).</li> <li>Short-circuit <code>__all__</code> convention when checking if a module is public (5abf4e3 by Timoth\u00e9e Mazzucotelli).</li> <li>Reuse existing loggers, preventing overwriting issues (3c2825f by Timoth\u00e9e Mazzucotelli).</li> <li>Ignore .pth files that are not utf-8 encoded (ea299dc by Andrew Sansom). Issue-300, PR-301</li> <li>Attributes without annotations cannot be dataclass parameters (c9b2e09 by Hassan Kibirige). PR-297</li> <li>When deciding to alias an object or not during inspection, consider module paths to be equivalent even with arbitrary private components (8c9f6e6 by Timoth\u00e9e Mazzucotelli). Issue-296</li> <li>Fix target path computation: use qualified names to maintain classes in the path (6e17def by Timoth\u00e9e Mazzucotelli). Issue-296</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Prepare loggers for simplification (381f10f by Timoth\u00e9e Mazzucotelli).</li> <li>Add all previous modules for backward compatibility (a86e44e by Timoth\u00e9e Mazzucotelli).</li> <li>Add main public modules (fb860b3 by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify \"is imported\" check in <code>is_public</code> property (c2bbc10 by Timoth\u00e9e Mazzucotelli).</li> <li>Use string and integer enumerations (06b383b by Timoth\u00e9e Mazzucotelli).</li> <li>Renamed agents nodes modules (ddc5b0c by Timoth\u00e9e Mazzucotelli).</li> <li>Clean up and document internal API, mark legacy code (92594a9 by Timoth\u00e9e Mazzucotelli).</li> <li>Renamed <code>dataclasses</code> internal modules to <code>models</code> (5555de6 by Timoth\u00e9e Mazzucotelli).</li> <li>Move sources under <code>_griffe</code> internal package (cbce6a5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0470-2024-06-18","title":"0.47.0 - 2024-06-18","text":"<p>Compare with 0.46.1</p> <p>\u26a1 Imminent v1! \u26a1\ud83d\ude80 See v0.46.</p>"},{"location":"changelog/#deprecations_2","title":"Deprecations","text":"<ul> <li>The <code>has_private_name</code> and <code>has_special_name</code> properties on objects and aliases have been renamed <code>is_private</code> and <code>is_special</code>. The <code>is_private</code> property now only returns true if the name is not special.</li> </ul>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add <code>deprecated</code> attribute and <code>is_deprecated</code> property to objects/aliases (2a75d84 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>is_imported</code> property to objects/aliases (de926cc by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>is_class_private</code> property to objects/aliases (491b6c4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Rename <code>has_private_name</code> and <code>has_special_name</code> to <code>is_private</code> and <code>is_special</code> (ae7c7e7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0461-2024-06-17","title":"0.46.1 - 2024-06-17","text":"<p>Compare with 0.46.0</p> <p>\u26a1 Imminent v1! \u26a1\ud83d\ude80 See v0.46.</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Always consider special objects (\"dunder\" attributes/methods/etc.) to be public (3319410 by Timoth\u00e9e Mazzucotelli). Issue-294, Issue-295</li> <li>Don't consider imported objects as public (ea90952 by Timoth\u00e9e Mazzucotelli). Discussion-169</li> </ul>"},{"location":"changelog/#0460-2024-06-16","title":"0.46.0 - 2024-06-16","text":"<p>Compare with 0.45.3</p> <p>\u26a1 Imminent v1! \u26a1\ud83d\ude80</p> <p> We are working on v1, and it will come soon, so we recommend that you consider adding an upper bound on Griffe. Version 1 will remove all legacy code! There will be a couple more v0 before so that you get all the deprecation warnings needed to upgrade your code using Griffe before upgrading to v1. See breaking changes and deprecations for v0.46 below.</p>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<p>We are still in v0, so no major bump yet.</p> <ul> <li>Calling objects' <code>has_labels()</code> method with a <code>labels</code> keyword argument is not supported anymore. The parameter became a variadic positional parameter, so it cannot be used as a keyword argument anymore. Passing a sequence instead of multiple positional arguments still works but will emit a deprecation warning.</li> <li>Calling the <code>load_extensions()</code> function with an <code>exts</code> keyword argument is not supported anymore. The parameter became a variadic positional parameter, so it cannot be used as a keyword argument anymore. Passing a sequence instead of multiple positional arguments still works but will emit a deprecation warning.</li> </ul>"},{"location":"changelog/#deprecations_3","title":"Deprecations","text":"<ul> <li>As seen above in the breaking changes section, the only parameters of <code>Object.has_labels()</code> and <code>load_extensions()</code> both became variadic positional parameters. Passing a sequence as single argument is deprecated in favor of passing multiple arguments. This is an ergonomic change: I myself often forgot to wrap extensions in a list. Passing sequences of labels (lists, sets, tuples) is also difficult from Jinja templates.</li> <li>The following methods and properties on objects and aliases are deprecated: <code>member_is_exported()</code>, <code>is_explicitely_exported</code>, <code>is_implicitely_exported</code>. Use the <code>is_exported</code> property instead. See issue 281.</li> <li>The <code>is_exported()</code> and <code>is_public()</code> methods became properties. They can still be called like methods, but will emit deprecation warnings when doing so. See issue 281.</li> <li>The <code>ignore_private</code> parameter of the <code>find_breaking_changes()</code> function is now deprecated and unused. With the reworked \"exported\" and \"public\" API, this parameter became useless. See issue 281.</li> <li>Using <code>stats()</code> instead of <code>Stats</code> will now emit a deprecation warning.</li> </ul>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add <code>docstring</code> attribute to parameters (e21eabe by Hassan Kibirige). Issue-286, Related-to-mkdocstrings/griffe#252, PR-288, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> <li>Provide line numbers for classes and functions when inspecting (b6ddcc4 by Timoth\u00e9e Mazzucotelli). Issue-272</li> <li>Populate lines collection within helpers (ab2e947 by Timoth\u00e9e Mazzucotelli). GitHub-issue-270, Radicle-issue-0d6a513</li> </ul>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Handle partials as functions while inspecting (be29c32 by Timoth\u00e9e Mazzucotelli).</li> <li>Populate lines collection before visiting/inspecting modules within helpers (08c3f40 by Timoth\u00e9e Mazzucotelli). Issue-272</li> <li>Don't return all lines when line numbers are missing (9e6dcaa by Timoth\u00e9e Mazzucotelli). Issue-271</li> </ul>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Emit deprecation warning when accessing <code>stats</code> instead of <code>Stats</code> (e5572d2 by Timoth\u00e9e Mazzucotelli).</li> <li>Rework \"exported\" and \"public\" logic (b327b90 by Timoth\u00e9e Mazzucotelli). Issue-281</li> <li>Allow passing multiple extensions to <code>load_extensions</code> instead of a sequence (fadb72b by Timoth\u00e9e Mazzucotelli). Issue-268</li> <li>Allow passing multiple labels to <code>Object.has_labels</code> instead of set (c4e3bf2 by Timoth\u00e9e Mazzucotelli). Issue-267</li> </ul>"},{"location":"changelog/#0453-2024-06-09","title":"0.45.3 - 2024-06-09","text":"<p>Compare with 0.45.2</p>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Always call <code>on_package_loaded</code> hook on a package, and not any other object (40db38d by Timoth\u00e9e Mazzucotelli). Issue-283</li> </ul>"},{"location":"changelog/#0452-2024-05-23","title":"0.45.2 - 2024-05-23","text":"<p>Compare with 0.45.1</p>"},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Support setuptools' new editable modules using type annotations (14d45e8 by Timoth\u00e9e Mazzucotelli). Issue-273</li> </ul>"},{"location":"changelog/#0451-2024-05-18","title":"0.45.1 - 2024-05-18","text":"<p>Compare with 0.45.0</p>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Fix loading of importable modules thanks to their <code>__path__</code> attribute (56f5363 by Timoth\u00e9e Mazzucotelli). Issue-269</li> </ul>"},{"location":"changelog/#0450-2024-05-12","title":"0.45.0 - 2024-05-12","text":"<p>Compare with 0.44.0</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Implement <code>-x</code>, <code>--force-inspection</code> CLI option (776063d by Timoth\u00e9e Mazzucotelli).</li> <li>Implement <code>force_inspection</code> option in the loader API (3266f22 by Timoth\u00e9e Mazzucotelli).</li> <li>Support inspecting packages (<code>__init__</code> modules) (3f74f67 by Timoth\u00e9e Mazzucotelli).</li> <li>Add parameters for resolving aliases to <code>load</code> functions (e418dee by Timoth\u00e9e Mazzucotelli).</li> <li>Load private sibling modules by default when resolving aliases (4806189 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Pass down modules collection when inspecting (bc0f74b by Timoth\u00e9e Mazzucotelli).</li> <li>Catch loading errors when loading additional modules during wildcard expansion and alias resolution (964e0d2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Improve stats code and performance (eeb497f by Timoth\u00e9e Mazzucotelli).</li> <li>Recurse immediately into non-discoverable submodules (no path on disk) during dynamic analysis (d0b7a1d by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify the code that checks if an object should be aliased or not during dynamic analysis (fc794c2 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid side-effect in inspector by checking early if an object is a cached property (a6bfcfd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0440-2024-04-19","title":"0.44.0 - 2024-04-19","text":"<p>Compare with 0.43.0</p>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add <code>resolved</code> property on expression names, returning the corresponding Griffe object (9b5ca45 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Fix enumeration properties on expression names (6f22256 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0430-2024-04-18","title":"0.43.0 - 2024-04-18","text":"<p>Compare with 0.42.2</p>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add properties telling whether an expression name resolves to an enumeration class, instance or value (fdb21d9 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings/python#124</li> </ul>"},{"location":"changelog/#0422-2024-04-15","title":"0.42.2 - 2024-04-15","text":"<p>Compare with 0.42.1</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Fix target path of aliases for multipart imports (<code>import a.b.c as x</code>) (ee27ad9 by Timoth\u00e9e Mazzucotelli). Issue-259</li> </ul>"},{"location":"changelog/#0421-2024-03-19","title":"0.42.1 - 2024-03-19","text":"<p>Compare with 0.42.0</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Don't return class variables as parameters of dataclasses (2729c22 by Hassan Kibirige). PR-253</li> <li>Don't turn items annotated as InitVar into dataclass members (6835ea3 by Hassan Kibirige). PR-252</li> </ul>"},{"location":"changelog/#0420-2024-03-11","title":"0.42.0 - 2024-03-11","text":"<p>Compare with 0.41.3</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Better support for dataclasses (82a9d57 by Timoth\u00e9e Mazzucotelli). Issue-33, Issue-34, Issue-38, Issue-39, PR-240</li> </ul>"},{"location":"changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>Don't return properties as parameters of dataclasses (again) (8c48397 by Hassan Kibirige). Issue-232, PR-248</li> <li>Fix getting return type from parent property when parsing Sphinx docstrings (f314957 by Timoth\u00e9e Mazzucotelli). Issue-125</li> </ul>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>Warn (debug) when a submodule shadows a member with the same name (cdc9e1c by Timoth\u00e9e Mazzucotelli). Issue-124</li> </ul>"},{"location":"changelog/#0413-2024-03-04","title":"0.41.3 - 2024-03-04","text":"<p>Compare with 0.41.2</p>"},{"location":"changelog/#code-refactoring_14","title":"Code Refactoring","text":"<ul> <li>Catch index errors when finding top module in case of search path misconfiguration (46c56c7 by Timoth\u00e9e Mazzucotelli). Issue-#246</li> </ul>"},{"location":"changelog/#0412-2024-03-03","title":"0.41.2 - 2024-03-03","text":"<p>Compare with 0.41.1</p>"},{"location":"changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>Fix discovery of packages in the current working directory (44f9617 by Timoth\u00e9e Mazzucotelli). Discussion-mkdocstrings#654</li> </ul>"},{"location":"changelog/#0411-2024-03-01","title":"0.41.1 - 2024-03-01","text":"<p>Compare with 0.41.0</p>"},{"location":"changelog/#deprecations_4","title":"Deprecations","text":"<ul> <li>The <code>load_git</code> function moved from <code>griffe.git</code> to <code>griffe.loader</code>.   It is still importable from <code>griffe.git</code>, but will emit a deprecation warning.</li> </ul>"},{"location":"changelog/#code-refactoring_15","title":"Code Refactoring","text":"<ul> <li>Expose Git utilities, move <code>load_git</code> into the <code>loader</code> module (327cc5b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0410-2024-02-26","title":"0.41.0 - 2024-02-26","text":"<p>Compare with 0.40.1</p>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add option to append <code>sys.path</code> to search paths to the check command too (d153fa0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>Special case NumpyDoc \"warnings\" and \"notes\" sections (plural) (3b47cdb by Ethan Henderson). PR #236</li> <li>Serialize line numbers even if zero (55e6e0e by Timoth\u00e9e Mazzucotelli).</li> <li>Fix handling of lambda expressions (598d08a by Timoth\u00e9e Mazzucotelli).</li> <li>Fix building expressions (and string values) for <code>yield</code> and <code>yield from</code> statements (439f65e by Timoth\u00e9e Mazzucotelli).</li> <li>Do not create aliases pointing to themselves (356305f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_16","title":"Code Refactoring","text":"<ul> <li>Remove <code>get_call_keyword_arguments</code> utility function, as it is implemented with a single line and creates a cyclic dependency with expressions (35cf170 by Timoth\u00e9e Mazzucotelli).</li> <li>Further prevent cyclic dependency between node utils and expressions (9614c83 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid cyclic dependency between node utils and expressions (aedf39c by Timoth\u00e9e Mazzucotelli).</li> <li>Move arguments node-parsing logic into its own module (used by visitor and lambda expressions) (ad68e65 by Timoth\u00e9e Mazzucotelli).</li> <li>Use canonical imports (3091660 by Timoth\u00e9e Mazzucotelli).</li> <li>Use <code>ast.unparse</code> instead of our own unparser (6fe1316 by Timoth\u00e9e Mazzucotelli).</li> <li>Only return 0 for the line number of removed objects when the location is reworked as relative (3a4d054 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0401-2024-02-08","title":"0.40.1 - 2024-02-08","text":"<p>Compare with 0.40.0</p>"},{"location":"changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>Don't return properties as parameters of dataclasses (5a5c03b by Timoth\u00e9e Mazzucotelli). Issue #232</li> </ul>"},{"location":"changelog/#0400-2024-01-30","title":"0.40.0 - 2024-01-30","text":"<p>Compare with 0.39.1</p>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Store reference to function call in keyword expressions (d72f9d3 by Timoth\u00e9e Mazzucotelli). PR #231</li> </ul>"},{"location":"changelog/#0391-2024-01-18","title":"0.39.1 - 2024-01-18","text":"<p>Compare with 0.39.0</p>"},{"location":"changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>De-duplicate search paths in finder as they could lead to the same modules being yielded twice or more when scanning namespace packages (80a158a by Timoth\u00e9e Mazzucotelli).</li> <li>Fix logic for skipping already encountered modules when scanning namespace packages (21a48d0 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings#646</li> </ul>"},{"location":"changelog/#0390-2024-01-16","title":"0.39.0 - 2024-01-16","text":"<p>Compare with 0.38.1</p>"},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>Support editable installs dynamically exposing modules from other directories (2c4ba75 by Timoth\u00e9e Mazzucotelli). Issue #229</li> <li>Support meson-python editable modules (9123897 by Timoth\u00e9e Mazzucotelli).</li> <li>Support admonitions in Numpydoc docstrings (1e311a4 by Michael Chow). Issue #214, PR #219, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Expose module properties on all objects (123f8c5 by Timoth\u00e9e Mazzucotelli). Issue #226</li> </ul>"},{"location":"changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>Consider space-only lines to be empty, never break Numpydoc sections on blank lines (8c57354 by Timoth\u00e9e Mazzucotelli). PR #220, Related to PR #219, Numpydoc discussion</li> <li>Allow merging stubs into alias targets (3cf7958 by Timoth\u00e9e Mazzucotelli).</li> <li>Insert the right directory in front of import paths before inspecting a module (dynamically imported) (7d75c71 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_17","title":"Code Refactoring","text":"<ul> <li>Set lineno to 0 for removed objects when checking API (b660c34 by Timoth\u00e9e Mazzucotelli).</li> <li>Prepare support for new output formats (styles) of the check command (f2ece1e by Timoth\u00e9e Mazzucotelli).</li> <li>Transform finder's package and namespace package classes into dataclasses (16be6a4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0381-2023-12-06","title":"0.38.1 - 2023-12-06","text":"<p>Compare with 0.38.0</p>"},{"location":"changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>Support absolute Windows paths for extensions (4e67d8f by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings-python#116</li> </ul>"},{"location":"changelog/#0380-2023-11-13","title":"0.38.0 - 2023-11-13","text":"<p>Compare with 0.37.0</p>"},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>Allow passing load parameters to the temporary package visit helper (3a7854f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0370-2023-11-12","title":"0.37.0 - 2023-11-12","text":"<p>Compare with 0.36.9</p>"},{"location":"changelog/#deprecations_5","title":"Deprecations","text":"<ul> <li>The loader <code>load_module</code> method was renamed <code>load</code>,     Its <code>module</code> parameter was renamed <code>objspec</code> and is now positional-only.     This method always returned the specified object, not just modules,     so it made more sense to rename it <code>load</code> and to rename the parameter     specifying the object. Old usages (<code>load_module</code> and <code>module=...</code>)     will continue to work for some time (a few months, a year, more),     and will emit deprecation warnings.</li> </ul>"},{"location":"changelog/#features_19","title":"Features","text":"<ul> <li>Add option to warn about unknown parameters in Sphinx docstrings (8b11d77 by Ashwin Vinod). Issue #64, PR #210, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Add <code>on_package_loaded</code> event (a5cf654 by Timoth\u00e9e Mazzucotelli).</li> <li>Add option to find, load and merge stubs-only packages (6e55f3b by Romain). PR #221, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>Report attributes who lost their value as \"unset\" (dfffa4b by Geethakrishna-Puligundla). Issue #218, PR #225</li> <li>Don't crash when computing MRO for a class that is named after its parent (a2dd8a6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_18","title":"Code Refactoring","text":"<ul> <li>Rename loader <code>load_module</code> method to <code>load</code> (2bfe206 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0369-2023-10-27","title":"0.36.9 - 2023-10-27","text":"<p>Compare with 0.36.8</p>"},{"location":"changelog/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>Fix accessing alias members with <code>__getitem__</code> (8929409 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings-python#111</li> </ul>"},{"location":"changelog/#code-refactoring_19","title":"Code Refactoring","text":"<ul> <li>Expose parser enumeration and parser functions in top-level module (785baa0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0368-2023-10-25","title":"0.36.8 - 2023-10-25","text":"<p>Compare with 0.36.7</p>"},{"location":"changelog/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>Use already parsed docstring sections when dumping full data (311807b by Timoth\u00e9e Mazzucotelli). Discussion griffe-typingdoc#6</li> </ul>"},{"location":"changelog/#0367-2023-10-17","title":"0.36.7 - 2023-10-17","text":"<p>Compare with 0.36.6</p>"},{"location":"changelog/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>Add missing proxies (methods/properties) to aliases (7320640 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_20","title":"Code Refactoring","text":"<ul> <li>Use final target in alias proxies (731d662 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0366-2023-10-16","title":"0.36.6 - 2023-10-16","text":"<p>Compare with 0.36.5</p>"},{"location":"changelog/#code-refactoring_21","title":"Code Refactoring","text":"<ul> <li>Only consider presence/absence for docstrings truthiness, not emptiness of their value (4c49611 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0365-2023-10-09","title":"0.36.5 - 2023-10-09","text":"<p>Compare with 0.36.4</p>"},{"location":"changelog/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>Force extension import path to be a string (coming from MkDocs' <code>!relative</code> tag) (34e21a9 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix crash when trying to get a decorator callable path (found thanks to pysource-codegen) (e57f08e by Timoth\u00e9e Mazzucotelli).</li> <li>Fix crash when trying to get docstring after assignment (found thanks to pysource-codegen) (fb0a0c1 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix type errors in expressions and value extractor, don't pass duplicate arguments (found thanks to pysource-codegen) (7e53288 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0364-2023-09-28","title":"0.36.4 - 2023-09-28","text":"<p>Compare with 0.36.3</p>"},{"location":"changelog/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>Fix visiting relative imports in non-init modules (c1138c3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0363-2023-09-28","title":"0.36.3 - 2023-09-28","text":"<p>Compare with 0.36.2</p>"},{"location":"changelog/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>Fix parsing of choices in Numpy parameters (5f2d997 by Timoth\u00e9e Mazzucotelli). Issue #212</li> </ul>"},{"location":"changelog/#code-refactoring_22","title":"Code Refactoring","text":"<ul> <li>Add <code>repr</code> methods to function parameters (9442234 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0362-2023-09-10","title":"0.36.2 - 2023-09-10","text":"<p>Compare with 0.36.1</p>"},{"location":"changelog/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>Fix warnings for docstrings in builtin modules (6ba3e04 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix dumping <code>filepath</code> to a dict when it is a list (066a4a7 by davfsa). PR #207</li> </ul>"},{"location":"changelog/#0361-2023-09-04","title":"0.36.1 - 2023-09-04","text":"<p>Compare with 0.36.0</p>"},{"location":"changelog/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>Fix iterating non-flat expressions (some nodes were skipped) (3249155 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0360-2023-09-01","title":"0.36.0 - 2023-09-01","text":"<p>Compare with 0.35.2</p>"},{"location":"changelog/#features_20","title":"Features","text":"<ul> <li>Add option to read return type of properties in their summary (Google-style) (096970f by Timoth\u00e9e Mazzucotelli). Issue #137, PR #206</li> <li>Add option to make parentheses around the type of returned values optional (Google-style) (b0620f8 by Timoth\u00e9e Mazzucotelli). Issue #137</li> <li>Get class parameters from parent's <code>__init__</code> method (e8a9fdc by Timoth\u00e9e Mazzucotelli). Issue #205</li> </ul>"},{"location":"changelog/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>Use all members (declared and inherited) when checking for breakages, avoid false-positives when a member of a class is moved into a parent class (1c4340b by Timoth\u00e9e Mazzucotelli). Issue #203</li> <li>Skip early submodules with dots in their path (5e81b8a by Timoth\u00e9e Mazzucotelli). Issue #185</li> </ul>"},{"location":"changelog/#code-refactoring_23","title":"Code Refactoring","text":"<ul> <li>Allow iterating on expressions in both flat and nested ways (3957fa7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0352-2023-08-27","title":"0.35.2 - 2023-08-27","text":"<p>Compare with 0.35.1</p>"},{"location":"changelog/#code-refactoring_24","title":"Code Refactoring","text":"<ul> <li>Be more strict when parsing sections in Google docstrings (6a8a228 by Timoth\u00e9e Mazzucotelli). Issue #204</li> </ul>"},{"location":"changelog/#0351-2023-08-26","title":"0.35.1 - 2023-08-26","text":"<p>Compare with 0.35.0</p>"},{"location":"changelog/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>Preserve inherited attribute on alias inherited members (1e19e7b by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#102</li> </ul>"},{"location":"changelog/#0350-2023-08-24","title":"0.35.0 - 2023-08-24","text":"<p>Compare with 0.34.0</p>"},{"location":"changelog/#features_21","title":"Features","text":"<ul> <li>Add an <code>is_public</code> helper method to guess if an object is public (b823639 by Timoth\u00e9e Mazzucotelli).</li> <li>Add option to Google parser allowing to parse Returns sections with or without multiple items (65fee70 by Antoine Dechaume). PR #196</li> </ul>"},{"location":"changelog/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>Allow passing <code>warn_unknown_params</code> option to Google and Numpy parsers (5bf0746 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_25","title":"Code Refactoring","text":"<ul> <li>Preserve alias members path by re-aliasing members instead of returning target's members (d400cb1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0340-2023-08-20","title":"0.34.0 - 2023-08-20","text":"<p>Compare with 0.33.0</p>"},{"location":"changelog/#features_22","title":"Features","text":"<ul> <li>Allow checking if docstring section is empty or not with <code>if section</code> (f6cf559 by Timoth\u00e9e Mazzucotelli).</li> <li>Implement Functions (or Methods), Classes and Modules docstring sections (929e615 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing a docstring parser name instead of its enumeration value (ce59b7d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_26","title":"Code Refactoring","text":"<ul> <li>Explicit checks for subprocess runs (cc3ca2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0330-2023-08-16","title":"0.33.0 - 2023-08-16","text":"<p>Compare with 0.32.3</p>"},{"location":"changelog/#breaking-changes_2","title":"Breaking Changes","text":"<ul> <li>Removed <code>griffe.expressions.Expression</code> in favor of <code>griffe.Expr</code> and subclasses</li> <li>Removed <code>griffe.expressions.Name</code> in favor of <code>griffe.ExprName</code></li> </ul>"},{"location":"changelog/#features_23","title":"Features","text":"<ul> <li>Add <code>-V</code>, <code>--version</code> CLI flag to show version (a41515f by jgart). Issue #186, PR #187, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#code-refactoring_27","title":"Code Refactoring","text":"<ul> <li>Improve expressions (66c8ad5 and 0fe8f91 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0323-2023-07-17","title":"0.32.3 - 2023-07-17","text":"<p>Compare with 0.32.2</p>"},{"location":"changelog/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>Fix detecting whether an object should be an alias during inspection (6a63b37 by Timoth\u00e9e Mazzucotelli). Issue #180</li> </ul>"},{"location":"changelog/#code-refactoring_28","title":"Code Refactoring","text":"<ul> <li>Improve log message when trying to stubs-merge objects of different kinds (d34a3ba by Timoth\u00e9e Mazzucotelli).</li> <li>De-duplicate stubs merging log message (cedc062 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0322-2023-07-17","title":"0.32.2 - 2023-07-17","text":"<p>Compare with 0.32.1</p>"},{"location":"changelog/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>Keep parentheses around tuples, except within subscripts (df6e636 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#88</li> </ul>"},{"location":"changelog/#0321-2023-07-15","title":"0.32.1 - 2023-07-15","text":"<p>Compare with 0.32.0</p>"},{"location":"changelog/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>Fix aliases for direct nested imports (e9867f7 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#32</li> </ul>"},{"location":"changelog/#code-refactoring_29","title":"Code Refactoring","text":"<ul> <li>Simplify AST imports, stop using deprecated code from <code>ast</code> (21d5832 by Timoth\u00e9e Mazzucotelli). Issue #179</li> </ul>"},{"location":"changelog/#0320-2023-07-13","title":"0.32.0 - 2023-07-13","text":"<p>Compare with 0.31.0</p>"},{"location":"changelog/#deprecations_6","title":"Deprecations","text":"<ul> <li>Classes <code>InspectorExtension</code> and <code>VisitorExtension</code>     are deprecated in favor of <code>Extension</code>.     As a side-effect, the <code>hybrid</code> extension is also deprecated.     See how to use and write extensions.</li> </ul>"},{"location":"changelog/#breaking-changes_3","title":"Breaking Changes","text":"<ul> <li>Module <code>griffe.agents.base</code> was removed</li> <li>Module <code>griffe.docstrings.markdown</code> was removed</li> <li>Class <code>ASTNode</code> was removed</li> <li>Class <code>BaseInspector</code> was removed</li> <li>Class <code>BaseVisitor</code> was removed</li> <li>Function <code>get_parameter_default</code> was removed</li> <li>Function <code>load_extension</code> was removed (made private)</li> <li>Function <code>patch_ast</code> was removed</li> <li>Function <code>tmp_worktree</code> was removed (made private)</li> <li>Type <code>Extension</code> is now a class</li> </ul>"},{"location":"changelog/#features_24","title":"Features","text":"<ul> <li>Numpy parser: handle return section items with just type, or no name and no type (bdec37d by Michael Chow). Issue #173, PR #174, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Rework extension system (dea4c83 by Timoth\u00e9e Mazzucotelli).</li> <li>Parse attribute values, parameter defaults and decorators as expressions (7b653b3 by Timoth\u00e9e Mazzucotelli).</li> <li>Add loader option to avoid storing source code, reducing memory footprint (d592edf by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>extra</code> attribute to objects (707a348 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>Numpy-style: don't strip spaces from the left of indented lines (f13fc0a by Timoth\u00e9e Mazzucotelli). Discussion #587</li> <li>Fix relative paths for old versions when checking API (96fd45b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>Don't store source when dumping as JSON (d7f314a by Timoth\u00e9e Mazzucotelli).</li> <li>Stop caching properties on Object methods (15bdd74 by Timoth\u00e9e Mazzucotelli).</li> <li>Stop patching AST, use functions instead (7302f17 by Timoth\u00e9e Mazzucotelli). Issue #171</li> </ul>"},{"location":"changelog/#code-refactoring_30","title":"Code Refactoring","text":"<ul> <li>Privatize/remove objects (fdeb16f by Timoth\u00e9e Mazzucotelli).</li> <li>Document public objects with <code>__all__</code> (db0e0e3 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove base visitor and inspector (bc446e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Auto-register module in collection within loading helpers (591bacc by Timoth\u00e9e Mazzucotelli). Issue #177</li> </ul>"},{"location":"changelog/#0310-2023-07-04","title":"0.31.0 - 2023-07-04","text":"<p>Compare with 0.30.1</p>"},{"location":"changelog/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7</li> <li>API changes:<ul> <li><code>GriffeLoader.resolve_aliases(only_exported)</code>: Deprecated parameter was removed and replaced by <code>implicit</code> (inverse semantics)</li> <li><code>GriffeLoader.resolve_aliases(only_known_modules)</code>: Deprecated parameter was removed and replaced by <code>external</code> (inverse semantics)</li> <li><code>LinesCollection.tokens</code>: Public object was removed (Python 3.7)</li> <li><code>ASTNode.end_lineno</code>: Public object was removed (Python 3.7)</li> <li><code>griffe.agents.extensions</code>: Deprecated module was removed and replaced by <code>griffe.extensions</code></li> </ul> </li> </ul>"},{"location":"changelog/#features_25","title":"Features","text":"<ul> <li>Add <code>--color</code>, <code>--no-color</code> options to check subcommand (eac783c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>Report removed public modules (68906cb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_31","title":"Code Refactoring","text":"<ul> <li>Improve check output (6b0a1f0 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated <code>griffe.agents.extensions</code> module (b555c78 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove deprecated parameters from loader's <code>resolve_aliases</code> method (dd98acd by Timoth\u00e9e Mazzucotelli).</li> <li>Drop Python 3.7 support (e4be30a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0301-2023-07-02","title":"0.30.1 - 2023-07-02","text":"<p>Compare with 0.30.0</p>"},{"location":"changelog/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>Prevent duplicate yields of breaking changes (9edef90 by Timoth\u00e9e Mazzucotelli). Issue #162</li> <li>Prevent alias resolution errors when checking for API breaking changes (93c964a by Timoth\u00e9e Mazzucotelli). Issue #145</li> <li>Handle Git errors when checking for API breaking changes (f9e8ba3 by Timoth\u00e9e Mazzucotelli). Issue #144</li> </ul>"},{"location":"changelog/#code-refactoring_32","title":"Code Refactoring","text":"<ul> <li>Force remove worktree branch when done checking (45332ba by Timoth\u00e9e Mazzucotelli).</li> <li>Change command to obtain latest tag (f70f630 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0300-2023-06-30","title":"0.30.0 - 2023-06-30","text":"<p>Compare with 0.29.1</p>"},{"location":"changelog/#features_26","title":"Features","text":"<ul> <li>Add <code>allow_section_blank_line</code> option to the Numpy parser (245845e by Michael Chow). Issue #167, PR #168</li> <li>Support inheritance (08bbe09 by Timoth\u00e9e Mazzucotelli). PR #170</li> </ul>"},{"location":"changelog/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>Handle semi-colons in pth files (e2ec661 by Michael Chow). Issue #172, PR #175</li> </ul>"},{"location":"changelog/#code-refactoring_33","title":"Code Refactoring","text":"<ul> <li>Split members API in two parts: producer and consumer (2269449 by Timoth\u00e9e Mazzucotelli). PR #170</li> </ul>"},{"location":"changelog/#0291-2023-06-19","title":"0.29.1 - 2023-06-19","text":"<p>Compare with 0.29.0</p>"},{"location":"changelog/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>Fix detection of optional and default in Numpydoc-style parameters (3509106 by Timoth\u00e9e Mazzucotelli). Issue #165</li> <li>Fallback to string literal when parsing fails with syntax error (53827c8 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#80</li> <li>Don't mutate finder's import paths (a9e025a by Timoth\u00e9e Mazzucotelli).</li> <li>Respect <code>external</code> when expanding wildcards (8ef92c8 by Timoth\u00e9e Mazzucotelli).</li> <li>Extract actual type for yielded/received values (3ea37ba by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#75</li> </ul>"},{"location":"changelog/#code-refactoring_34","title":"Code Refactoring","text":"<ul> <li>Improve error handling when importing a module (a732e21 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve tests helpers (accept all visit/inspection parameters) (6da5869 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing a modules collection to the inspector, for consistency with the visitor (5f73a28 by Timoth\u00e9e Mazzucotelli).</li> <li>Always add import path of module to inspect when it has a file path (4021e6f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0290-2023-05-26","title":"0.29.0 - 2023-05-26","text":"<p>Compare with 0.28.2</p>"},{"location":"changelog/#features_27","title":"Features","text":"<ul> <li>Provide test helpers and pytest fixtures (611ed58 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0282-2023-05-24","title":"0.28.2 - 2023-05-24","text":"<p>Compare with 0.28.1</p>"},{"location":"changelog/#bug-fixes_54","title":"Bug Fixes","text":"<ul> <li>Correctly resolve full expressions (fa57f4f by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/autorefs#23</li> <li>Use <code>full</code> attribute instead of <code>canonical</code> for expressions (4338ccc by Michael Chow). Issue #163, PR #164</li> </ul>"},{"location":"changelog/#0281-2023-05-22","title":"0.28.1 - 2023-05-22","text":"<p>Compare with 0.28.0</p>"},{"location":"changelog/#bug-fixes_55","title":"Bug Fixes","text":"<ul> <li>Return docstring warnings as warnings, not attributes (7bd51ba by Matthew Anderson). PR #161</li> </ul>"},{"location":"changelog/#code-refactoring_35","title":"Code Refactoring","text":"<ul> <li>Refactor AST nodes parsers (7e53127 by Timoth\u00e9e Mazzucotelli). Issue #160</li> <li>Full expressions use canonical names (65c7184 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0280-2023-05-17","title":"0.28.0 - 2023-05-17","text":"<p>Compare with 0.27.5</p>"},{"location":"changelog/#features_28","title":"Features","text":"<ul> <li>Support scikit-build-core editable modules (partially) (eb64779 by Timoth\u00e9e Mazzucotelli). Issue #154</li> </ul>"},{"location":"changelog/#bug-fixes_56","title":"Bug Fixes","text":"<ul> <li>Parse complex, stringified annotations (f743616 by Timoth\u00e9e Mazzucotelli). Issue #159</li> </ul>"},{"location":"changelog/#0275-2023-05-12","title":"0.27.5 - 2023-05-12","text":"<p>Compare with 0.27.4</p>"},{"location":"changelog/#code-refactoring_36","title":"Code Refactoring","text":"<ul> <li>Represent function using their names when inspecting default values (9116c1f by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#180</li> </ul>"},{"location":"changelog/#0274-2023-05-10","title":"0.27.4 - 2023-05-10","text":"<p>Compare with 0.27.3</p>"},{"location":"changelog/#bug-fixes_57","title":"Bug Fixes","text":"<ul> <li>Don't recurse through targets, get directly to final target and handle alias-related errors (c5bc197 by Timoth\u00e9e Mazzucotelli). Issue #155</li> </ul>"},{"location":"changelog/#code-refactoring_37","title":"Code Refactoring","text":"<ul> <li>Follow <code>.pth</code> files to extend search paths with editable modules (79bf724 by Timoth\u00e9e Mazzucotelli). Issue #154</li> <li>Add default values to <code>_load_packages</code> helper (f104c20 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0273-2023-05-05","title":"0.27.3 - 2023-05-05","text":"<p>Compare with 0.27.2</p>"},{"location":"changelog/#bug-fixes_58","title":"Bug Fixes","text":"<ul> <li>Allow setting docstring through alias (2e0f553 by Timoth\u00e9e Mazzucotelli).</li> <li>Prevent infinite recursion (0e98546 by Timoth\u00e9e Mazzucotelli). Issue #155</li> </ul>"},{"location":"changelog/#0272-2023-05-03","title":"0.27.2 - 2023-05-03","text":"<p>Compare with 0.27.1</p>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Remove async extra (aiofiles) (70d9b93 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_59","title":"Bug Fixes","text":"<ul> <li>Support walrus operator (bf721f4 by Timoth\u00e9e Mazzucotelli). Issue #152</li> <li>Respect <code>ClassVar</code> annotation (60e01c1 by Victor Westerhuis). PR #150, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> <li>Add missing \"other args\" section aliases (f5c0a0e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_38","title":"Code Refactoring","text":"<ul> <li>Move utils from cli to respective modules (c6ce49e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0271-2023-04-16","title":"0.27.1 - 2023-04-16","text":"<p>Compare with 0.27.0</p>"},{"location":"changelog/#bug-fixes_60","title":"Bug Fixes","text":"<ul> <li>Actually parse warnings sections (bc00da5 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow Raises and Warns items to start with a newline (f3b088c by Victor Westerhuis). PR #149, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#0270-2023-04-10","title":"0.27.0 - 2023-04-10","text":"<p>Compare with 0.26.0</p>"},{"location":"changelog/#features_29","title":"Features","text":"<ul> <li>Implement basic handling of Alias for breaking changes (aa8ce00 by Yurii). PR #140, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#bug-fixes_61","title":"Bug Fixes","text":"<ul> <li>Support <code>Literal</code> imported from <code>typing_extensions</code> (3a16e58 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#545</li> <li>Fix parameter default checking logic and diff tests (1b940fd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0260-2023-04-03","title":"0.26.0 - 2023-04-03","text":"<p>Compare with 0.25.5</p>"},{"location":"changelog/#breaking-changes_5","title":"Breaking Changes","text":"<ul> <li><code>AliasResolutionError</code> instances don't have a <code>target_path</code> attribute anymore.     It is instead replaced by an <code>alias</code> attribute which is a reference to an <code>Alias</code> instance.</li> <li>Lots of positional-or-keyword parameters were changed to keyword-only parameters.</li> </ul>"},{"location":"changelog/#deprecations_7","title":"Deprecations","text":"<ul> <li>The <code>griffe.agents.extensions</code> module was moved to <code>griffe.extensions</code>.     The old path is deprecated.</li> </ul>"},{"location":"changelog/#features_30","title":"Features","text":"<ul> <li>Support newer versions of <code>editables</code> (ab7a3be by Timoth\u00e9e Mazzucotelli): the names of editable modules have changed from <code>__editables_*</code> to <code>_editable_impl_*</code>.</li> <li>Provide a JSON schema (7dfed39 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow hybrid extension to filter objects and run multiple inspectors (f8ff53a by Timoth\u00e9e Mazzucotelli).</li> <li>Allow loading extension from file path (131454e by Timoth\u00e9e Mazzucotelli).</li> <li>Add back <code>relative_filepath</code> which now really returns the filepath relative to the current working directory (40fe0c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_62","title":"Bug Fixes","text":"<ul> <li>Fix JSON schema for ending line numbers (and add test) (318c6b4 by Timoth\u00e9e Mazzucotelli).</li> <li>Prevent cyclic aliases by not overwriting a module member with an indirect alias to itself (c188a95 by Timoth\u00e9e Mazzucotelli). Issue #122</li> <li>Prevent alias resolution errors when copying docstring or labels from previously existing attribute (48747b6 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google admonition regular expression (ef0be5f by Timoth\u00e9e Mazzucotelli).</li> <li>Add back <code>griffe.agents.extensions</code> module (deprecated) (7129477 by Timoth\u00e9e Mazzucotelli).</li> <li>Forward class attribute docstrings to instances (7bf4952 by Rodrigo Gir\u00e3o Serr\u00e3o). Issue #128, PR #135</li> <li>Prevent errors related to getting attributes in the inspector (5d15d27 by Timoth\u00e9e Mazzucotelli).</li> <li>Catch \"member does not exist\" errors while expanding wildcards (a966022 by Timoth\u00e9e Mazzucotelli).</li> <li>Catch more inspection errors (4f6eef9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_39","title":"Code Refactoring","text":"<ul> <li>Log final path after resolving alias (c7ec7f7 by Timoth\u00e9e Mazzucotelli).</li> <li>Move extensions one level up (67ebd71 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default <code>when</code> value on extension base classes (e8ad889 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>relative_filepath</code> to <code>relative_package_filepath</code> to better express what it does (6148f85 by Timoth\u00e9e Mazzucotelli).</li> <li>Show file name and line number in alias resolution error messages (c48928d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0255-2023-02-16","title":"0.25.5 - 2023-02-16","text":"<p>Compare with 0.25.4</p>"},{"location":"changelog/#bug-fixes_63","title":"Bug Fixes","text":"<ul> <li>Fix parsing empty lines with indentation in Google docstrings (705edff by Timoth\u00e9e Mazzucotelli). Issue #129</li> </ul>"},{"location":"changelog/#0254-2023-01-19","title":"0.25.4 - 2023-01-19","text":"<p>Compare with 0.25.3</p>"},{"location":"changelog/#bug-fixes_64","title":"Bug Fixes","text":"<ul> <li>Fix creation of aliases to modules when inspecting (54242cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support (setuptools) editable packages with multiple roots (bd37dfb by Gilad). PR #126</li> </ul>"},{"location":"changelog/#0253-2023-01-04","title":"0.25.3 - 2023-01-04","text":"<p>Compare with 0.25.2</p>"},{"location":"changelog/#bug-fixes_65","title":"Bug Fixes","text":"<ul> <li>Fix parsing of annotations in Numpy attributes sections (18fa396 by Timoth\u00e9e Mazzucotelli). Issue #72</li> </ul>"},{"location":"changelog/#0252-2022-12-24","title":"0.25.2 - 2022-12-24","text":"<p>Compare with 0.25.1</p>"},{"location":"changelog/#bug-fixes_66","title":"Bug Fixes","text":"<ul> <li>Make sure passage through aliases is reset (79733f4 by Timoth\u00e9e Mazzucotelli). Issue #123</li> <li>Ignore cyclic alias errors when updating target aliases (bb62b2f by Timoth\u00e9e Mazzucotelli). Issue #123</li> </ul>"},{"location":"changelog/#0251-2022-12-20","title":"0.25.1 - 2022-12-20","text":"<p>Compare with 0.25.0</p>"},{"location":"changelog/#bug-fixes_67","title":"Bug Fixes","text":"<ul> <li>Pass through aliases earlier to prevent infinite recursion (e533f29 by Timoth\u00e9e Mazzucotelli). Issue #83, #122</li> </ul>"},{"location":"changelog/#0250-2022-12-11","title":"0.25.0 - 2022-12-11","text":"<p>Compare with 0.24.1</p>"},{"location":"changelog/#breaking-changes_6","title":"Breaking changes","text":"<ul> <li>Parameter <code>only_known_modules</code> was renamed <code>external</code> in the <code>expand_wildcards()</code> method of the loader.</li> <li>Exception <code>UnhandledEditablesModuleError</code> was renamed <code>UnhandledEditableModuleError</code> since we now support editable installation from other packages than <code>editables</code>.</li> </ul>"},{"location":"changelog/#highlights","title":"Highlights","text":"<ul> <li>Properties are now fetched as attributes rather than functions, since that is how they are used. This was asked by users, and since Griffe generates signatures for Python APIs (emphasis on APIs), it makes sense to return data that matches the interface provided to users. Such property objects in Griffe's output will still have the associated <code>property</code> labels of course.</li> <li>Lots of bug fixes. These bugs were discovered by running Griffe on many major packages as well as the standard library (again). Particularly, alias resolution should be more robust now, and should generate less issues like cyclic aliases, meaning indirect/wildcard imports should be better understood. We still highly discourage the use of wildcard imports </li> </ul>"},{"location":"changelog/#features_31","title":"Features","text":"<ul> <li>Support <code>setuptools</code> editable modules (abc18f7 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#463</li> <li>Support merging stubs on wildcard imported objects (0ed9c36 by Timoth\u00e9e Mazzucotelli). Issue #116</li> </ul>"},{"location":"changelog/#bug-fixes_68","title":"Bug Fixes","text":"<ul> <li>Prevent cyclic alias creation when expanding wildcards (a77e4e8 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash and show hint when wildcard expansion fails (336faf6 by Timoth\u00e9e Mazzucotelli).</li> <li>Register top module after inspection (86454ec by Timoth\u00e9e Mazzucotelli).</li> <li>Set alias attributes early (2ac1a9b by Timoth\u00e9e Mazzucotelli).</li> <li>Allow writing attributes on aliases (c8f736e by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on inspection of functions signatures (051e337 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on inspection of method descriptors' docstrings (09571bb by Timoth\u00e9e Mazzucotelli).</li> <li>Fix stats computing (handle stubs and namespace packages) (a81f8dc by Timoth\u00e9e Mazzucotelli).</li> <li>Support documenting multiple items for optional tuples (727456d by Timoth\u00e9e Mazzucotelli). Issue #117</li> <li>Fix comparing names with strings (37ae0a2 by Timoth\u00e9e Mazzucotelli). Issue #114</li> <li>Fix deepcopy crashing because of <code>__getattr__</code> (11b023b by Timoth\u00e9e Mazzucotelli). Issue #73, PR #119</li> </ul>"},{"location":"changelog/#code-refactoring_40","title":"Code Refactoring","text":"<ul> <li>Prevent reloading of failed modules (8ef14ab by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>only_known_modules</code> parameter to <code>external</code> (5f816c6 by Timoth\u00e9e Mazzucotelli).</li> <li>Rework alias creation decision in the inspector (f434943 by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve alias chain recursively (6cdd3b2 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't try to stubs-merge identical modules (7099971 by Timoth\u00e9e Mazzucotelli).</li> <li>Load properties as attributes (5c97a45 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#9</li> <li>Use a cyclic relationship map for inspection (9a2a711 by Timoth\u00e9e Mazzucotelli). PR #115</li> </ul>"},{"location":"changelog/#0241-2022-11-18","title":"0.24.1 - 2022-11-18","text":"<p>Compare with 0.24.0</p>"},{"location":"changelog/#bug-fixes_69","title":"Bug Fixes","text":"<ul> <li>Support nested namespace packages (d571f8f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0240-2022-11-13","title":"0.24.0 - 2022-11-13","text":"<p>Compare with 0.23.0</p> <p>The \"Breaking Changes\" and \"Deprecations\" sections are proudly written with the help of our new API breakage detection feature ! Many thanks to Talley Lambert (@tlambert03) for the initial code allowing to compare two Griffe trees.</p>"},{"location":"changelog/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li>All parameters of the <code>load_git</code> function, except <code>module</code>, are now keyword-only.</li> <li>Parameter <code>try_relative_path</code> of the <code>load_git</code> function was removed.</li> <li>Parameter <code>commit</code> was renamed <code>ref</code> in the <code>load_git</code> function.</li> <li>Parameter <code>commit</code> was renamed <code>ref</code> in the <code>tmp_worktree</code> helper, which will probably become private later.</li> <li>Parameters <code>ref</code> and <code>repo</code> switched positions in the <code>tmp_worktree</code> helper.</li> <li>All parameters of the <code>resolve_aliases</code> method are now keyword-only.</li> <li>Parameters <code>only_exported</code> and <code>only_known_modules</code> of the <code>resolve_module_aliases</code>     method were removed. This method is most probably not used by anyone, and will probably be made private in the future.</li> </ul>"},{"location":"changelog/#deprecations_8","title":"Deprecations","text":"<ul> <li> <p>Parameters <code>only_exported</code> and <code>only_known_modules</code> of the <code>resolve_aliases</code>     method are deprecated in favor of their inverted counter-part <code>implicit</code> and <code>external</code> parameters.</p> <ul> <li>Example before: <code>loader.resolve_aliases(only_exported=True, only_known_modules=True)</code></li> <li>Example after: <code>loader.resolve_aliases(implicit=False, external=False)</code></li> </ul> </li> </ul>"},{"location":"changelog/#features_32","title":"Features","text":"<ul> <li>Add CLI command to check for API breakages (90bded4 by Timoth\u00e9e Mazzucotelli). Issue #75, PR #105</li> <li>Add function to find API breaking changes (a4f1280 by Talley Lambert and Timoth\u00e9e Mazzucotelli). Issue #75, PR #105</li> </ul>"},{"location":"changelog/#bug-fixes_70","title":"Bug Fixes","text":"<ul> <li>Fix labels mismatch staticmethod-classmethod in inspector (25060f6 by Timoth\u00e9e Mazzucotelli). Issue #111</li> <li>Prevent infinite loop while looking for package's parent folder (f297f1a by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#72</li> <li>Fix comparing names and expressions (07bffff by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_41","title":"Code Refactoring","text":"<ul> <li>Rename some parameters in Git module (9ad7a2c by Timoth\u00e9e Mazzucotelli).</li> <li>Set parameters as keyword-only (44c01be by Timoth\u00e9e Mazzucotelli).</li> <li>Remove stars from parameters names (91dce14 by Timoth\u00e9e Mazzucotelli).</li> <li>Refactor CLI to use subcommands (760b091 by Timoth\u00e9e Mazzucotelli). PR #110</li> <li>Rename parameters used when resolving aliases (3d3a4eb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0230-2022-10-26","title":"0.23.0 - 2022-10-26","text":"<p>Compare with 0.22.2</p>"},{"location":"changelog/#features_33","title":"Features","text":"<ul> <li>Support <code>typing_extensions.overload</code> (c29fad5 by Nyuan Zhang). PR #108</li> </ul>"},{"location":"changelog/#bug-fixes_71","title":"Bug Fixes","text":"<ul> <li>Log debug instead of errors when failing to parse NumPy annotations for additional sections (568ff60 by Sigurd Spieckermann). Issue #93, PR #109</li> <li>Don't strip too many parentheses around a call node (bb5c5e7 by Timoth\u00e9e Mazzucotelli). PR #107</li> <li>Guard against more alias resolution errors (2be135d by Timoth\u00e9e Mazzucotelli). Issue #83, PR #103</li> </ul>"},{"location":"changelog/#0222-2022-09-24","title":"0.22.2 - 2022-09-24","text":"<p>Compare with 0.22.1</p>"},{"location":"changelog/#bug-fixes_72","title":"Bug Fixes","text":"<ul> <li>Log debug instead of errors when failing to parse Numpy annotations (75eeeda by Timoth\u00e9e Mazzucotelli). Issue #93</li> <li>Don't crash on unsupported module names (containing dots) (6a57194 by Timoth\u00e9e Mazzucotelli). Issue #94</li> <li>Show correct docstring line numbers on Python 3.7 (edd4b6d by Timoth\u00e9e Mazzucotelli). Issue #98</li> <li>Fix parsing of Numpy docstring with an Examples section at the end (3114727 by Timoth\u00e9e Mazzucotelli). Issue #97</li> <li>Don't crash on unsupported item in <code>__all__</code> (log a warning instead) (9e5df0a by Timoth\u00e9e Mazzucotelli). Issue #92</li> <li>Prevent infinite recursion while expanding exports (68446f7 by Timoth\u00e9e Mazzucotelli).</li> <li>Add missing check while expanding wildcards (7e816ed by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0221-2022-09-10","title":"0.22.1 - 2022-09-10","text":"<p>Compare with 0.22.0</p>"},{"location":"changelog/#bug-fixes_73","title":"Bug Fixes","text":"<ul> <li>Always use <code>encoding=\"utf8\"</code> when reading text files (3b279bf by Rudolf Byker). Issue #99, PR #100</li> </ul>"},{"location":"changelog/#0220-2022-06-28","title":"0.22.0 - 2022-06-28","text":"<p>Compare with 0.21.0</p>"},{"location":"changelog/#features_34","title":"Features","text":"<ul> <li>Support forward references (245daea by Timoth\u00e9e Mazzucotelli). Issue #86</li> </ul>"},{"location":"changelog/#code-refactoring_42","title":"Code Refactoring","text":"<ul> <li>Safely parse annotations and values (b023e2b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0210-2022-06-25","title":"0.21.0 - 2022-06-25","text":"<p>Compare with 0.20.0</p>"},{"location":"changelog/#features_35","title":"Features","text":"<ul> <li>Add <code>load_git</code> function allowing to load data from a specific git ref (b2c3946 by Talley Lambert). Issue #75, PR #76</li> </ul>"},{"location":"changelog/#bug-fixes_74","title":"Bug Fixes","text":"<ul> <li>Fix detecting and merging stubs for single-file packages (6a82542 by Talley Lambert). Issue #77, PR #78</li> <li>Fix parsing ExtSlice nodes when getting values (b2fe968 by Timoth\u00e9e Mazzucotelli). Issue #87</li> <li>Don't trigger alias resolution when merging stubs (2b88627 by Timoth\u00e9e Mazzucotelli). Issue #89</li> <li>Fix handling of .pth files (f212dd3 by Gabriel Dugny). Issue #84, PR #85</li> </ul>"},{"location":"changelog/#0200-2022-06-03","title":"0.20.0 - 2022-06-03","text":"<p>Compare with 0.19.3</p>"},{"location":"changelog/#features_36","title":"Features","text":"<ul> <li>Add <code>as_json</code> and <code>from_json</code> convenience methods on objects (5c3d751 by Talley Lambert). PR #74</li> </ul>"},{"location":"changelog/#bug-fixes_75","title":"Bug Fixes","text":"<ul> <li>Fix unparsing of f-strings (9ca74bd by Timoth\u00e9e Mazzucotelli). Issue #80</li> <li>Don't crash when overwriting a submodule with a wildcard imported attribute (bfad1cc by Timoth\u00e9e Mazzucotelli). Issue #72, #79, mkdocstrings/mkdocstrings#438</li> </ul>"},{"location":"changelog/#0193-2022-05-26","title":"0.19.3 - 2022-05-26","text":"<p>Compare with 0.19.2</p>"},{"location":"changelog/#bug-fixes_76","title":"Bug Fixes","text":"<ul> <li>Support USub and UAdd nodes in annotations (1169c51 by Timoth\u00e9e Mazzucotelli). Issue #71</li> </ul>"},{"location":"changelog/#0192-2022-05-18","title":"0.19.2 - 2022-05-18","text":"<p>Compare with 0.19.1</p>"},{"location":"changelog/#bug-fixes_77","title":"Bug Fixes","text":"<ul> <li>Don't crash on single line docstrings with trailing whitespace (Google) (8d9ccd5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0191-2022-05-07","title":"0.19.1 - 2022-05-07","text":"<p>Compare with 0.19.0</p>"},{"location":"changelog/#bug-fixes_78","title":"Bug Fixes","text":"<ul> <li>Don't crash on nested functions in <code>__init__</code> methods (cd5af43 by Timoth\u00e9e Mazzucotelli). Issue #68</li> </ul>"},{"location":"changelog/#0190-2022-05-06","title":"0.19.0 - 2022-05-06","text":"<p>Compare with 0.18.0</p>"},{"location":"changelog/#features_37","title":"Features","text":"<ul> <li>Add <code>load</code> shortcut function for convenience (f38a42d by Timoth\u00e9e Mazzucotelli).</li> <li>Support loading (and merging) <code>*.pyi</code> files (41518f4 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#404</li> <li>Improve support for call nodes in annotations (45e5bf5 by Timoth\u00e9e Mazzucotelli). Issue #66</li> <li>Support <code>dataclass</code> decorators on classes (f579431 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_43","title":"Code Refactoring","text":"<ul> <li>Handle absence of values (190585d by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify decorators to labels function (04e768f by Timoth\u00e9e Mazzucotelli).</li> <li>Always sort labels when serializing (bd2504b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0180-2022-04-19","title":"0.18.0 - 2022-04-19","text":"<p>Compare with 0.17.0</p>"},{"location":"changelog/#features_38","title":"Features","text":"<ul> <li>Add CLI option to disallow inspection (8f71a07 by Timoth\u00e9e Mazzucotelli).</li> <li>Support complex <code>__all__</code> assignments (9a2128b by Timoth\u00e9e Mazzucotelli). Issue #40</li> <li>Inherit class parameters from <code>__init__</code> method (e195593 by Fran\u00e7ois Rozet). Issue mkdocstrings/python#19, PR #65.   It allows to write \"Parameters\" sections in the docstring of the class itself.</li> </ul>"},{"location":"changelog/#performance-improvements_2","title":"Performance Improvements","text":"<ul> <li>Avoid using <code>__len__</code> as boolean method (d465493 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_79","title":"Bug Fixes","text":"<ul> <li>Don't crash on unhandle <code>__all__</code> assignments (cbc103c by Timoth\u00e9e Mazzucotelli).</li> <li>Handle empty packages names in CLI (52b51c4 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash on Google parameters sections found in non-function docstrings (4a417bc by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#19</li> </ul>"},{"location":"changelog/#code-refactoring_44","title":"Code Refactoring","text":"<ul> <li>Improve \"unknown parameter\" messages (7191799 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#423</li> <li>Set property label on <code>@cached_property</code>-decorated methods (bc068f8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0170-2022-04-15","title":"0.17.0 - 2022-04-15","text":"<p>Compare with 0.16.0</p>"},{"location":"changelog/#features_39","title":"Features","text":"<ul> <li>Handle properties setters and deleters (50a4490 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle <code>typing.overload</code> decorator (927bbd9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#308</li> <li>Set labels on functions using decorators (1c1feb2 by Timoth\u00e9e Mazzucotelli). Issue #47</li> <li>Add <code>runtime</code> attribute to objects/aliases and handle type guarded objects (2f2a04e by Timoth\u00e9e Mazzucotelli). Issue #42</li> <li>Support pkg-style namespace packages (efba0c6 by Timoth\u00e9e Mazzucotelli). Issue #58</li> </ul>"},{"location":"changelog/#code-refactoring_45","title":"Code Refactoring","text":"<ul> <li>Remove useless attribute (c4a92b7 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve Google warnings (641089a by Timoth\u00e9e Mazzucotelli).</li> <li>Remove useless import nodes generic visits (f83fc8e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0160-2022-04-09","title":"0.16.0 - 2022-04-09","text":"<p>Compare with 0.15.1</p>"},{"location":"changelog/#features_40","title":"Features","text":"<ul> <li>Warn about unknown parameters in Numpy docstrings (23f63f2 by Timoth\u00e9e Mazzucotelli).</li> <li>Warn about unknown parameters in Google docstrings (72be993 by Kevin Musgrave). Issue mkdocstrings/mkdocstrings#408, PR #63</li> </ul>"},{"location":"changelog/#bug-fixes_80","title":"Bug Fixes","text":"<ul> <li>Don't crash on unhandled AST nodes while parsing text annotations (f3be3a6 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#416</li> </ul>"},{"location":"changelog/#0151-2022-04-08","title":"0.15.1 - 2022-04-08","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#bug-fixes_81","title":"Bug Fixes","text":"<ul> <li>Don't overwrite existing (lower) members when expanding wildcards (9ff86e3 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't insert admonition before current section (Google parser) (8d8a46f by Timoth\u00e9e Mazzucotelli).</li> <li>Handle aliases chains in <code>has_docstrings</code> method (77c6943 by Timoth\u00e9e Mazzucotelli).</li> <li>Actually check for docstrings recursively (15f4193 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0150-2022-04-03","title":"0.15.0 - 2022-04-03","text":"<p>Compare with 0.14.1</p>"},{"location":"changelog/#features_41","title":"Features","text":"<ul> <li>Support <code>ignore_init_summary</code> in Numpy parser (f8cd147 by Timoth\u00e9e Mazzucotelli). Issue #44</li> <li>Enable cross-references for Numpy docstrings annotations (e32a73c by Timoth\u00e9e Mazzucotelli). Issues #11, #12, #13, #14, #15, #16, #17, #18</li> <li>Retrieve annotations from parent in Numpy parser (8d4eae3 by Timoth\u00e9e Mazzucotelli). Issues #29, #30, #31, #32</li> <li>Parse annotations in Iterator/Generator for Google docstrings (f0129ef by Timoth\u00e9e Mazzucotelli). Issue #28</li> </ul>"},{"location":"changelog/#bug-fixes_82","title":"Bug Fixes","text":"<ul> <li>Fix missing \"receives\" entry in Google parser (35d63fb by Timoth\u00e9e Mazzucotelli).</li> <li>Fix serialization of Windows paths (b7e8da8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_46","title":"Code Refactoring","text":"<ul> <li>Be less strict on spacing around \":\" in Numpy docstrings (aa592b5 by Timoth\u00e9e Mazzucotelli).</li> <li>Be less strict in Numpy regular expressions (603dc0e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename variables in Numpy module (4407244 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0141-2022-04-01","title":"0.14.1 - 2022-04-01","text":"<p>Compare with 0.14.0</p>"},{"location":"changelog/#bug-fixes_83","title":"Bug Fixes","text":"<ul> <li>Retrieve default value for non-string parameters (15952ed by ThomasPJ). Issue #59, issue mkdocstrings/python#8, PR #60</li> <li>Prevent infinite recursion while expanding wildcards (428628f by Timoth\u00e9e Mazzucotelli). Issue #57</li> </ul>"},{"location":"changelog/#0140-2022-03-06","title":"0.14.0 - 2022-03-06","text":"<p>Compare with 0.13.2</p>"},{"location":"changelog/#features_42","title":"Features","text":"<ul> <li>Ignore <code>__doc__</code> from parent classes (10aa59e by Will Da Silva). Issue #55, PR #56</li> </ul>"},{"location":"changelog/#0132-2022-03-01","title":"0.13.2 - 2022-03-01","text":"<p>Compare with 0.13.1</p>"},{"location":"changelog/#bug-fixes_84","title":"Bug Fixes","text":"<ul> <li>Fix type regex in Numpy parser (3a10fda by Timoth\u00e9e Mazzucotelli).</li> <li>Current module must not be available in its members' scope (54f9688 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow named sections after numpydoc examples (a44d9c6 by Lucina). PR #54</li> </ul>"},{"location":"changelog/#0131-2022-02-24","title":"0.13.1 - 2022-02-24","text":"<p>Compare with 0.13.0</p>"},{"location":"changelog/#bug-fixes_85","title":"Bug Fixes","text":"<ul> <li>Don't cut through wildcard-expanded aliases chains (65dafa4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix docstrings warnings when there's no parent module (e080549 by Timoth\u00e9e Mazzucotelli). Issue #51</li> </ul>"},{"location":"changelog/#code-refactoring_47","title":"Code Refactoring","text":"<ul> <li>Use proper classes for docstrings sections (46eddac by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/python#3, PR #52</li> </ul>"},{"location":"changelog/#0130-2022-02-23","title":"0.13.0 - 2022-02-23","text":"<p>Compare with 0.12.6</p>"},{"location":"changelog/#features_43","title":"Features","text":"<ul> <li>Implement <code>trim_doctest_flags</code> for Google and Numpy (8057153 by Jeremy Goh). Issue mkdocstrings/mkdocstrings#386, PR #48</li> </ul>"},{"location":"changelog/#bug-fixes_86","title":"Bug Fixes","text":"<ul> <li>Rename keyword parameters to keyword arguments (ce3eb6b by Jeremy Goh).</li> </ul>"},{"location":"changelog/#0126-2022-02-18","title":"0.12.6 - 2022-02-18","text":"<p>Compare with 0.12.5</p>"},{"location":"changelog/#bug-fixes_87","title":"Bug Fixes","text":"<ul> <li>Support starred parameters in Numpy docstrings (27f0fc2 by Timoth\u00e9e Mazzucotelli). Issue #43</li> </ul>"},{"location":"changelog/#0125-2022-02-17","title":"0.12.5 - 2022-02-17","text":"<p>Compare with 0.12.4</p>"},{"location":"changelog/#bug-fixes_88","title":"Bug Fixes","text":"<ul> <li>Fix getting line numbers on aliases (351750e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0124-2022-02-16","title":"0.12.4 - 2022-02-16","text":"<p>Compare with 0.12.3</p>"},{"location":"changelog/#bug-fixes_89","title":"Bug Fixes","text":"<ul> <li>Update target path when changing alias target (5eda646 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix relative imports to absolute with wildcards (69500dd by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> <li>Fix accessing members using tuples (87ff1df by Timoth\u00e9e Mazzucotelli).</li> <li>Fix recursive wildcard expansion (60e6edf by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> <li>Only export submodules if they were imported (98c72db by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#382</li> </ul>"},{"location":"changelog/#0123-2022-02-15","title":"0.12.3 - 2022-02-15","text":"<p>Compare with 0.12.2</p>"},{"location":"changelog/#bug-fixes_90","title":"Bug Fixes","text":"<ul> <li>Always decode source as UTF8 (563469b by Timoth\u00e9e Mazzucotelli).</li> <li>Fix JSON encoder and decoder (3e768d6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_48","title":"Code Refactoring","text":"<ul> <li>Improve error handling (7b15a51 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0122-2022-02-13","title":"0.12.2 - 2022-02-13","text":"<p>Compare with 0.12.1</p>"},{"location":"changelog/#bug-fixes_91","title":"Bug Fixes","text":"<ul> <li>Fix JSON unable to serialize docstring kind values (91e6719 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_49","title":"Code Refactoring","text":"<ul> <li>Make attribute labels more explicit (19eac2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0121-2022-02-12","title":"0.12.1 - 2022-02-12","text":"<p>Compare with 0.11.7</p>"},{"location":"changelog/#features_44","title":"Features","text":"<ul> <li>Add <code>ignore_init_summary</code> option to the Google parser (81f0333 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>is_KIND</code> properties on objects (17a08cd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0117-2022-02-12","title":"0.11.7 - 2022-02-12","text":"<p>Compare with 0.11.6</p>"},{"location":"changelog/#bug-fixes_92","title":"Bug Fixes","text":"<ul> <li>Keep only first assignment in conditions (0104440 by Timoth\u00e9e Mazzucotelli).</li> <li>Support invert unary op in annotations (734ef55 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix handling of missing modules during dynamic imports (7a3b383 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#380</li> <li>Fix getting lines of compiled modules (899461b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_50","title":"Code Refactoring","text":"<ul> <li>Get annotation with the same property on functions (ecc7bba by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0116-2022-02-10","title":"0.11.6 - 2022-02-10","text":"<p>Compare with 0.11.5</p>"},{"location":"changelog/#bug-fixes_93","title":"Bug Fixes","text":"<ul> <li>Fix infinite loop in Google parser (8b7b97b by Timoth\u00e9e Mazzucotelli). Issue #38</li> </ul>"},{"location":"changelog/#0115-2022-02-08","title":"0.11.5 - 2022-02-08","text":"<p>Compare with 0.11.4</p>"},{"location":"changelog/#bug-fixes_94","title":"Bug Fixes","text":"<ul> <li>Fix building title and kind of Google admonitions (87ab56c by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings#379</li> </ul>"},{"location":"changelog/#0114-2022-02-07","title":"0.11.4 - 2022-02-07","text":"<p>Compare with 0.11.3</p>"},{"location":"changelog/#bug-fixes_95","title":"Bug Fixes","text":"<ul> <li>Don't trigger alias resolution while checking docstrings presence (dda72ea by Timoth\u00e9e Mazzucotelli). Issue #37</li> </ul>"},{"location":"changelog/#0113-2022-02-05","title":"0.11.3 - 2022-02-05","text":"<p>Compare with 0.11.2</p>"},{"location":"changelog/#bug-fixes_96","title":"Bug Fixes","text":"<ul> <li>Fix getting params defaults on Python 3.7 (0afd867 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0112-2022-02-03","title":"0.11.2 - 2022-02-03","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#code-refactoring_51","title":"Code Refactoring","text":"<ul> <li>Factorize docstring annotation parser (19609be by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0111-2022-02-01","title":"0.11.1 - 2022-02-01","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#code-refactoring_52","title":"Code Refactoring","text":"<ul> <li>Rename RST parser to Sphinx (a612cb1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0110-2022-01-31","title":"0.11.0 - 2022-01-31","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#features_45","title":"Features","text":"<ul> <li>Support matrix multiplication operator in visitor (6129e17 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_97","title":"Bug Fixes","text":"<ul> <li>Fix name resolution for inspected data (ed3e7e5 by Timoth\u00e9e Mazzucotelli).</li> <li>Make importer actually able to import any nested object (d007219 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_53","title":"Code Refactoring","text":"<ul> <li>Always use search paths to import modules (a9a378f by Timoth\u00e9e Mazzucotelli).</li> <li>Split out module finder (7290642 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2022-01-14","title":"0.10.0 - 2022-01-14","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#bug-fixes_98","title":"Bug Fixes","text":"<ul> <li>Fix infinite recursion errors in alias resolver (133b4e4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix inspection of nodes children (aliases or not) (bb354f2 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix relative to absolute import conversion (464c39e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_54","title":"Code Refactoring","text":"<ul> <li>Rename some CLI options (1323268 by Timoth\u00e9e Mazzucotelli).</li> <li>Return the loader the to main function (9c6317e by Timoth\u00e9e Mazzucotelli).</li> <li>Improve logging messages (b8eb16e by Timoth\u00e9e Mazzucotelli).</li> <li>Skip inspection of some debug packages (4ee8968 by Timoth\u00e9e Mazzucotelli).</li> <li>Return ... instead of Ellipsis (f9ae31d by Timoth\u00e9e Mazzucotelli).</li> <li>Catch attribute errors when cross-referencing docstring annotations (288803a by Timoth\u00e9e Mazzucotelli).</li> <li>Support dict methods in lines collection (1b0cb94 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_46","title":"Features","text":"<ul> <li>Compute and show some stats (1b8d0a1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add CLI options for alias resolution (87a59cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support Google raises annotations cross-refs (8006ae1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2022-01-04","title":"0.9.0 - 2022-01-04","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#features_47","title":"Features","text":"<ul> <li>Loader option to only follow aliases in known modules (879d91b by Timoth\u00e9e Mazzucotelli).</li> <li>Use aliases when inspecting too (60439ee by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_99","title":"Bug Fixes","text":"<ul> <li>Handle more errors when loading modules (1aa571a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle more errors when getting signature (2db85e7 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix checking parent truthfulness (6129e50 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting subscript value (1699f12 by Timoth\u00e9e Mazzucotelli).</li> <li>Support yield nodes (7d536d5 by Timoth\u00e9e Mazzucotelli).</li> <li>Exclude some special low-level members that cause cyclic issues (b54ab34 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix transforming elements of signatures to annotations (e278c11 by Timoth\u00e9e Mazzucotelli).</li> <li>Detect cyclic aliases and prevent resolution errors (de5dd12 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't crash while trying to get the representation of an attribute value (77ac55d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix building value for joined strings (6154b69 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix prevention of cycles while building objects nodes (48062ac by Timoth\u00e9e Mazzucotelli).</li> <li>Better handle relative imports (91b42de by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google parser missing lines ending with colon (2f7969c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_55","title":"Code Refactoring","text":"<ul> <li>Improve alias resolution robustness (e708139 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove async loader for now (acc5ecf by Timoth\u00e9e Mazzucotelli).</li> <li>Improve handling of Google admonitions (8aa5ed0 by Timoth\u00e9e Mazzucotelli).</li> <li>Better handling of import errors and system exits while inspecting modules (7ba1589 by Timoth\u00e9e Mazzucotelli).</li> <li>Empty generic visit/inspect methods in base classes (338760e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#080-2022-01-02","title":"0.8.0 - 2022-01-02","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#features_48","title":"Features","text":"<ul> <li>Support getting attribute annotation from parent in RST docstring parser (25db61a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle relative imports (62b0927 by Timoth\u00e9e Mazzucotelli).</li> <li>Support wildcard imports (77a3cb7 by Timoth\u00e9e Mazzucotelli).</li> <li>Support configuring log level (CLI/env var) (839d78e by Timoth\u00e9e Mazzucotelli).</li> <li>Support loading <code>*.py[cod]</code> and <code>*.so</code> modules (cd98a6f by Timoth\u00e9e Mazzucotelli).</li> <li>Support inspecting builtin functions/methods (aa1fce3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_56","title":"Code Refactoring","text":"<ul> <li>Handle extensions errors (11278ca by Timoth\u00e9e Mazzucotelli).</li> <li>Don't always try to find a module as a relative  path (e6df277 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve loggers patching (f4b262a by Timoth\u00e9e Mazzucotelli).</li> <li>Improve dynamic imports (2998195 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2021-12-28","title":"0.7.1 - 2021-12-28","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#code-refactoring_57","title":"Code Refactoring","text":"<ul> <li>Only log warning if async mode is used (356e848 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#070-2021-12-28","title":"0.7.0 - 2021-12-28","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#features_49","title":"Features","text":"<ul> <li>Support more nodes on Python 3.7 (7f2c4ec by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_58","title":"Code Refactoring","text":"<ul> <li>Don't crash on syntax errors and log an error (10bb6b1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2021-12-27","title":"0.6.0 - 2021-12-27","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#features_50","title":"Features","text":"<ul> <li>Support more AST nodes (cd1b305 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_59","title":"Code Refactoring","text":"<ul> <li>Use annotation getter for base classes (8b1a7ed by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2021-12-20","title":"0.5.0 - 2021-12-20","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_51","title":"Features","text":"<ul> <li>Add support for Python 3.7 (4535adc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_100","title":"Bug Fixes","text":"<ul> <li>Don't propagate aliases of an alias (8af48f8 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't reassign members defined in except clauses (d918b4e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2021-11-28","title":"0.4.0 - 2021-11-28","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#features_52","title":"Features","text":"<ul> <li>Add a prototype 'hybrid' extension (8cb3c16 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing extensions config as JSON on the CLI (9a7fa8b by Timoth\u00e9e Mazzucotelli).</li> <li>Support names for returns, yields and receives sections items (1c5a4c9 by Timoth\u00e9e Mazzucotelli).</li> <li>Store aliases on each object (91ba643 by Timoth\u00e9e Mazzucotelli).</li> <li>Support inspection/introspection (3a0587d by Timoth\u00e9e Mazzucotelli).</li> <li>Support multiple return, yield and receive items (0fc70cb by Timoth\u00e9e Mazzucotelli).</li> <li>Support namespace packages (2414c8e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_101","title":"Bug Fixes","text":"<ul> <li>Fix extensions loader (78fb70b by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid visiting/inspecting multiple times (75a8a8b by Timoth\u00e9e Mazzucotelli).</li> <li>Set modules collection attribute earlier (592c0bd by Timoth\u00e9e Mazzucotelli).</li> <li>Support inequality nodes (b0ed247 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle Div nodes for values (272e4d6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_60","title":"Code Refactoring","text":"<ul> <li>Set log level to INFO (718e73e by Timoth\u00e9e Mazzucotelli).</li> <li>Add target setter (7f0064c by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize conditions (15ab876 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid recursion loops (ea6acec by Timoth\u00e9e Mazzucotelli).</li> <li>Update aliases when replacing a member (99a0f8b by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize code (31fcdb1 by Timoth\u00e9e Mazzucotelli).</li> <li>Replace DocstringException with DocstringRaise (d5ed87a by Timoth\u00e9e Mazzucotelli).</li> <li>Refactor loaders (d9b94bb by Timoth\u00e9e Mazzucotelli).</li> <li>Improve typing (e08bcfa by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2021-11-21","title":"0.3.0 - 2021-11-21","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_53","title":"Features","text":"<ul> <li>Handle aliases and their resolution (67ae903 by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve annotations in docstrings (847384a by Timoth\u00e9e Mazzucotelli).</li> <li>Resolve annotations (6451eff by Timoth\u00e9e Mazzucotelli).</li> <li>Add lines property to objects (7daf7db by Timoth\u00e9e Mazzucotelli).</li> <li>Allow setting docstring parser and options on each object (07a1d2e by Timoth\u00e9e Mazzucotelli).</li> <li>Get attributes annotations from parent (003b990 by Timoth\u00e9e Mazzucotelli).</li> <li>Draft extensions loader (17ccd03 by Timoth\u00e9e Mazzucotelli).</li> <li>Add properties to objects (0ec301a by Timoth\u00e9e Mazzucotelli).</li> <li>Handle .pth files when searching modules (2a2e182 by Timoth\u00e9e Mazzucotelli).</li> <li>Add <code>default</code> property to docstring parameters (6298ba3 by Timoth\u00e9e Mazzucotelli).</li> <li>Accept RST and Numpy parsers (1cf147d by Timoth\u00e9e Mazzucotelli).</li> <li>Support data (attributes/variables) (dce84d1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add Numpy-style parser (ad5b72d by Timoth\u00e9e Mazzucotelli).</li> <li>Support more section kinds in Google-style (9d3d047 by Timoth\u00e9e Mazzucotelli).</li> <li>Add docstring section kinds (b270483 by Timoth\u00e9e Mazzucotelli).</li> <li>Accept initial arguments when creating container (90c5956 by Timoth\u00e9e Mazzucotelli).</li> <li>Add an RST-style docstring parser (742e7b2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements_3","title":"Performance Improvements","text":"<ul> <li>Improve JSON encoder perfs (6a78eb0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_102","title":"Bug Fixes","text":"<ul> <li>Handle serialization of Posix paths (3a66b95 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix list annotation getter (5ae800a by Timoth\u00e9e Mazzucotelli).</li> <li>Show accurate line number in Google warnings (2953590 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix assignment names getters (6990846 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix async loader (passing parent) (57e866e by Timoth\u00e9e Mazzucotelli).</li> <li>Fix exception name (4b8b85d by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google sections titles logic (87dd329 by Timoth\u00e9e Mazzucotelli).</li> <li>Prepend current module to base classes (still needs resolution) (a4b1dee by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Google admonition regex (3902e74 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix docstring getter (1442eba by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting arguments defaults in the Google-style parser (67adbaf by Timoth\u00e9e Mazzucotelli).</li> <li>Fix getting arguments annotations in the Google-style parser (8bcbfba by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_61","title":"Code Refactoring","text":"<ul> <li>Export parsers and main function in docstrings module (96469da by Timoth\u00e9e Mazzucotelli).</li> <li>Remove top exports (cd76694 by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize exceptions (7f9b805 by Timoth\u00e9e Mazzucotelli).</li> <li>Avoid circular import (ef27dcd by Timoth\u00e9e Mazzucotelli).</li> <li>Rename index to [new] offset (c07cc7d by Timoth\u00e9e Mazzucotelli).</li> <li>Reorganize code (5f4fff2 by Timoth\u00e9e Mazzucotelli).</li> <li>Use keyword only parameters (d34edd6 by Timoth\u00e9e Mazzucotelli).</li> <li>Default to no parsing for serialization (8fecd9e by Timoth\u00e9e Mazzucotelli).</li> <li>Always extend AST (c227ae6 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default for kwargs parameters (7a0b85e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename visitor method (3e0c43c by Timoth\u00e9e Mazzucotelli).</li> <li>Improve typing (ac86f17 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix typo (a9ed6e9 by Timoth\u00e9e Mazzucotelli).</li> <li>Rewrite ParameterKind (90249df by Timoth\u00e9e Mazzucotelli).</li> <li>Add bool methods to docstrings and objects (548f72e by Timoth\u00e9e Mazzucotelli).</li> <li>Allow setting docstring parser and options on each docstring (752e084 by Timoth\u00e9e Mazzucotelli).</li> <li>Skip attribute assignments (e9cc2cd by Timoth\u00e9e Mazzucotelli).</li> <li>Improve visitor getters (2ea88c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Use relative filepath in docstring warnings (e894df7 by Timoth\u00e9e Mazzucotelli).</li> <li>Set submodules parent earlier (53767c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename Data to Attribute (febc12e by Timoth\u00e9e Mazzucotelli).</li> <li>Rename arguments to parameters (957856c by Timoth\u00e9e Mazzucotelli).</li> <li>Improve annotation support (5b2262f by Timoth\u00e9e Mazzucotelli).</li> <li>Always set parent (cae85de by Timoth\u00e9e Mazzucotelli).</li> <li>Factorize function handling (dfece1c by Timoth\u00e9e Mazzucotelli).</li> <li>Privatize stuff, fix loggers (5513ed5 by Timoth\u00e9e Mazzucotelli).</li> <li>Use keyword only arguments (e853fe9 by Timoth\u00e9e Mazzucotelli).</li> <li>Set default values for Argument arguments (d5cccaa by Timoth\u00e9e Mazzucotelli).</li> <li>Swallow extra parsing options (3d9ebe7 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename <code>start_index</code> argument to <code>offset</code> (dd88358 by Timoth\u00e9e Mazzucotelli).</li> <li>Reuse parsers warn function (03dfdd3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2021-09-25","title":"0.2.0 - 2021-09-25","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_54","title":"Features","text":"<ul> <li>Add Google-style docstring parser (cdefccc by Timoth\u00e9e Mazzucotelli).</li> <li>Support all kinds of functions arguments (c177562 by Timoth\u00e9e Mazzucotelli).</li> <li>Initial support for class decorators and bases (8e229aa by Timoth\u00e9e Mazzucotelli).</li> <li>Add functions decorators support (fee304d by Timoth\u00e9e Mazzucotelli).</li> <li>Add async loader (3218bd0 by Timoth\u00e9e Mazzucotelli).</li> <li>Add relative file path and package properties (d26ee1f by Timoth\u00e9e Mazzucotelli).</li> <li>Add search and output option to the CLI (3b37692 by Timoth\u00e9e Mazzucotelli).</li> <li>Load docstrings and functions arguments (cdf29a3 by Timoth\u00e9e Mazzucotelli).</li> <li>Support paths in loader (8f4df75 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#performance-improvements_4","title":"Performance Improvements","text":"<ul> <li>Avoid name lookups in visitor (00de148 by Timoth\u00e9e Mazzucotelli).</li> <li>Factorize and improve main and extensions visitors (9b27b56 by Timoth\u00e9e Mazzucotelli).</li> <li>Delegate children computation at runtime (8d54c87 by Timoth\u00e9e Mazzucotelli).</li> <li>Cache dataclasses properties (2d7447d by Timoth\u00e9e Mazzucotelli).</li> <li>Optimize node linker (03f955e by Timoth\u00e9e Mazzucotelli).</li> <li>Optimize docstring getter (4a05516 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2021-09-09","title":"0.1.0 - 2021-09-09","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_55","title":"Features","text":"<ul> <li>Add initial code (8cbdf7a by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project from copier-pdm template (7ea73ad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"community/","title":"Community","text":"<p>Griffe is part of is the mkdocstrings ecosystem, and therefore part of the MkDocs ecosystem too. These two ecosystems have wonderful communities and we invite you to join them  Make sure to read and follow our code of conduct when engaging with the community.</p> <p>You can start new discussions on GitHub, in the following repositories, depending on the specificity of the discussion: griffe, mkdocstrings-python, mkdocstrings, and MkDocs.</p> <p>You can also join our dedicated Gitter channels: Griffe channel, mkdocstrings-python channel, mkdocstrings channel, and MkDocs channel. </p> <p>The best place to share about Griffe is of course our Gitter channel.</p> <p> Join Griffe's Gitter channel</p> <p>More generally, Griffe is also related to API documentation and API analysis (static or dynamic): if your project is related to these two domains, but in different ecosystems (other programming languages, static site generators, or environments), feel free to drop us a message! We are always happy to share with other actors in these domains </p> <ul> <li>Getting help</li> <li>Contributing</li> <li>Code of conduct</li> <li>Credits</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>There are multiple ways to contribute to this project:</p> <ul> <li>with feature requests: we are always happy to receive feedback and new ideas! If you have any, you can create new feature requests on our issue tracker. Make sure to search issues first, to avoid creating duplicate requests.</li> <li>with bug reports: only you (the users) can help us find and fix bugs! We greatly appreciate if you can give us a bit of your time to create a proper bug report on our issue tracker. Same as for feature requests, make sure the bug is not already reported, by searching through issues first.</li> <li>with user support: watch activity on the Github repository and our Gitter channel to answer issues and discussions created by users. Answering questions from users can take a lot of time off maintenance and new features: helping us with user support means more time for us to work on the project.</li> <li>with documentation: spotted a mistake in the documentation? Found a paragraph unclear or a section missing? Reporting those already helps a lot, and if you can, sending pull requests is even better.</li> <li>with code: if you are interested in a feature request, or are experiencing a reported bug, you can contribute a feature or a fix. You can simply drop a comment on the relevant issue, and we will do our best to guide you.</li> </ul> <p>For easy documentation fixes, you can edit a file and send a pull request directly from the GitHub web interface. For more complex fixes or improvements, please read our contributor guide. The guide will show you how to set up a development environment to run tests or serve the documentation locally.</p> <p> Contributor guide</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-3--credits","title":"Credits","text":"<p>These projects were used to build griffe. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-3--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.2, &gt;=2.2.0</code> <code>4.3.6</code> MIT wheel A built-package format for Python <code>&gt;=0.42, &gt;=0.23.0, &lt;1.0</code> <code>0.45.1</code> MIT License"},{"location":"credits/#exec-3--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT astunparse An AST unparser for Python <code>&gt;=1.6.3</code> <code>1.6.3</code> BSD attrs Classes Without Boilerplate <code>&gt;=22.2.0</code> <code>25.3.0</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=8.1.7</code> <code>8.1.8</code> BSD License code2flow Visualize your source code as DOT flowcharts <code>&gt;=2.5</code> <code>2.5.1</code> MIT colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.0</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe-inherited-docstrings Griffe extension for inheriting docstrings. <code>&gt;=1.0</code> <code>1.1.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.1</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License jsonschema An implementation of JSON Schema validation for Python <code>&gt;=4.17</code> <code>4.23.0</code> MIT jsonschema-specifications The JSON Schema meta-schemas and vocabularies, exposed as a Registry <code>&gt;=2023.03.6</code> <code>2024.10.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.1.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.2.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.8+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-redirects A MkDocs plugin for dynamic page redirects to prevent broken links <code>&gt;=1.2</code> <code>1.2.2</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.10.1.12.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.2, &gt;=2.2.0</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydeps Display module dependencies <code>&gt;=1.12</code> <code>3.0.1</code> BSD Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pygments-ansi-color <code>&gt;=0.3</code> <code>0.3.0</code> Apache Software License pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pysource-codegen generate random python code to test linter/formatter/and other tools <code>&gt;=0.4</code> <code>0.6.0</code> MIT pysource-minimize minimize python source code <code>&gt;=0.5</code> <code>0.7.0</code> MIT pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.1</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 referencing JSON Referencing + Python <code>&gt;=0.28.4</code> <code>0.36.2</code> MIT requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT rpds-py Python bindings to Rust's persistent data structures (rpds) <code>&gt;=0.7.1</code> <code>0.23.1</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.0</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT stdlib-list A list of Python Standard Libraries (2.7 through 3.13). <code>0.11.1</code> MIT License twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20241204</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20241230</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 wheel A built-package format for Python <code>&gt;=0.42, &gt;=0.23.0, &lt;1.0</code> <code>0.45.1</code> MIT License yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.3.4</code> ISC <p>More credits from the author</p>"},{"location":"downstream-projects/","title":"Downstream projects","text":"<p>Griffe is used by various projects in the Python ecosystem.</p>"},{"location":"downstream-projects/#griffe2md","title":"griffe2md","text":"<p>griffe2md outputs API docs in Markdown. It uses Griffe to load the data, and then use Jinja templates to render documentation in Markdown, just like mkdocstrings-python, but in Markdown instead of HTML.</p>"},{"location":"downstream-projects/#griffe-tui","title":"Griffe TUI","text":"<p>Griffe TUI is a textual user interface for Griffe. It offers 100% offline, beautiful Python API docs, in your terminal, thanks to Griffe and Textual.</p>"},{"location":"downstream-projects/#mkdocstrings-python","title":"mkdocstrings-python","text":"<p>Of course, Griffe is what powers the Python handler of mkdocstrings. mkdocstrings is a plugin for MkDocs that allows rendering API docs easily.</p>"},{"location":"downstream-projects/#openai-agents-sdk","title":"OpenAI Agents SDK","text":"<p>The OpenAI Agents SDK is a lightweight yet powerful framework for building multi-agent workflows. It was inspired by Pydantic AI and uses Griffe the same way, to parse docstrings in order to generate function schemas.</p>"},{"location":"downstream-projects/#pydanclick","title":"pydanclick","text":"<p>Pydanclick allows to use Pydantic models as Click options. It uses Griffe to parse docstrings and find Attributes sections, to help itself build Click options.</p>"},{"location":"downstream-projects/#pydanticai","title":"PydanticAI","text":"<p>PydanticAI is a Python Agent Framework designed to make it less painful to build production grade applications with Generative AI. It uses Griffe to extract tool and parameter descriptions from docstrings.</p>"},{"location":"downstream-projects/#quartodoc","title":"quartodoc","text":"<p>quartodoc lets you quickly generate Python package API reference documentation using Markdown and Quarto. quartodoc is designed as an alternative to Sphinx. It uses Griffe to load API data and parse docstrings in order to render HTML documentation, just like mkdocstrings-python, but for Quarto instead of Mkdocs.</p>"},{"location":"downstream-projects/#rafe","title":"rafe","text":"<p>rafe is a tool for inspecting Python environments and building packages (irrespective of language) in a reproducible manner. It wraps Griffe to provide a CLI command to check for API breaking changes.</p>"},{"location":"downstream-projects/#yapper","title":"Yapper","text":"<p>Yapper converts Python docstrings to <code>astro</code> files for use by the Astro static site generator. It uses Griffe to parse Python modules and extracts Numpydoc-style docstrings.</p>"},{"location":"extensions/","title":"Extensions","text":"<p>Griffe has an extension system that allows Python developers to enhance or modify the data that Griffe collects. To learn more about how to use or develop extensions, please see the Extending APIs topic.</p> <p>We group extensions under three categories:</p> <ul> <li>built-in extensions: maintained directly within Griffe's codebase</li> <li>official extensions: maintained in separated repositories, by the authors/maintainers of Griffe</li> <li>third-party extensions: maintained by other developers</li> </ul>"},{"location":"getting-help/","title":"Getting help","text":"<p>If you have a quick question regarding Griffe, ask on our Gitter channel.</p> <p>For more complex questions, or actual issues that require showing code and configuration, please create new Q/A discussions or new bug reports respectively. Make sure to search previous discussions and issues to avoid creating duplicates. Also make sure to read our documentation before asking questions or opening bug reports. Don't hesitate to report unclear or missing documentation, we will do our best to improve it.</p> <p>In any case (quick or complex questions) please remember to be kind, and to follow our code of conduct. The people helping you do so voluntarily, in their free time. Be respectful of their time, and of your own. Help them help you by providing all the necessary information in minimal, reproducible examples. When creating a bug report, make sure to fill out the issue template.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>To begin using Griffe, refer to Installation and take a look at our short introduction. If you'd like to experiment with Griffe without installing it, try our playground directly in your browser.</p> <p>If you have questions, need help, or want to contribute, feel free to reach out to the community! You can open new discussions on GitHub or join our Gitter channel for a quick chat.</p> <ul> <li>Installation</li> <li>Introduction (short tour)</li> <li>Guide (advanced tour)</li> <li>Getting help</li> </ul>"},{"location":"guide/","title":"Guide","text":"<p>Welcome to the Griffe guide! Here, you\u2019ll find a series of topics on using Griffe, along with an explanation of the project\u2019s inner workings. Although the more detailed explanations are primarily intended for contributors, users are encouraged to read them as well, since this can deepen their understanding of Griffe and help them make the most of it.</p> <ul> <li> <p> User guide</p> <p>A collection of topics for Griffe users.</p> <p> Browse the user guide</p> </li> <li> <p> Contributor guide</p> <p>Explanation of the project and more, for Griffe contributors.</p> <p> Browse the contributor guide</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Griffe is a Python package, so you can install it with your favorite Python package installer or dependency manager.</p> <p>Griffe Insiders, a version with more features, is also available to sponsors </p>"},{"location":"installation/#install-as-a-tool-library","title":"Install as a tool &amp; library","text":"pip pdm poetry rye uv <pre><code>pip install griffe\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>pdm add griffe\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p> <pre><code>poetry add griffe\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add griffe\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv add griffe\n</code></pre> <p>uv is an extremely fast Python package and project manager, written in Rust.</p>"},{"location":"installation/#install-as-a-tool-only","title":"Install as a tool only","text":"pip pipx rye uv <pre><code>pip install --user griffe\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>pipx install griffe\n</code></pre> <p>pipx allows to install and run Python applications in isolated environments.</p> <pre><code>rye install griffe\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv tool install griffe\n</code></pre> <p>uv is an extremely fast Python package and project manager, written in Rust.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Griffe is able to read Python source code and inspect objects at runtime to extract information about the API of a Python package. This information is then stored into data models (Python classes), and these model instances together form a tree that statically represent the package's API: starting with the top-level module, then descending into submodules, classes, functions and attributes. From there, it's possible to explore and exploit this API representation in various ways.</p>"},{"location":"introduction/#command-line-tool","title":"Command line tool","text":"<p>Griffe is both a command line tool and a Python library. The command line tool offers a few commands to, for example, serialize API data to JSON and check for API breaking changes between two versions of your project.</p> <pre><code># Load API of `my_package`, serialize it to JSON,\n# print it to standard output.\ngriffe dump my_package\n</code></pre> <pre><code># Check for API breaking changes\n# between current version and version 1.0 (Git reference).\ngriffe check my_package --against 1.0\n</code></pre> <p>Both commands accept a <code>-h</code>, <code>--help</code> argument to show all the available options. For a complete reference of the command line interface, see Reference / Command line interface.</p>"},{"location":"introduction/#python-library","title":"Python library","text":"<p>As a library, Griffe exposes all its public API directly in the top-level module. It means you can simply import <code>griffe</code> to access all its API.</p> <pre><code>import griffe\n\ngriffe.load(...)\ngriffe.find_breaking_changes(...)\ngriffe.main(...)\ngriffe.visit(...)\ngriffe.inspect(...)\n</code></pre> <p>To start exploring your API within Griffe data models, use the <code>load</code> function to load your package and access its various objects:</p> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\")\n\nsome_method = my_package[\"some_module.SomeClass.some_method\"]\nprint(some_method.docstring.value)\nprint(f\"Is `some_method` public? {'yes' if some_method.is_public else 'no'}\")\n</code></pre> <p>Use the <code>load_git</code> function to load your API at a particular moment in time, specified with a Git reference (commit hash, branch name, tag name):</p> <pre><code>import griffe\n\nmy_package_v2_1 = griffe.load_git(\"my_package\", ref=\"2.1\")\n</code></pre> <p>For more advanced usage, see our guide on loading and navigating data.</p> <p>For a complete reference of the application programming interface, see Reference / Python API.</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"playground/","title":"Playground","text":"<p>Play with Griffe's API directly in your browser thanks to Pyodide.</p> <p>You can click the  Run button in the top-right corner of the editor, or hit Ctrl+Enter to run the code.</p> <p> Editor (session: default) Run <pre>import griffe, micropip\n\n# Install your favorite Python package...\nawait micropip.install(\"cowsay\")\n\n# And load it with Griffe!\ncowsay = griffe.load(\"cowsay\")\ncowsay.as_json(indent=2)[:1000]</pre> Output Clear <pre></pre> </p>"},{"location":"reference/","title":"Reference","text":"<p>Our reference pages contain comprehensive information on various aspects of Griffe, such as its Command Line Interface (CLI), its Application Programming Interface (API), or its docstring parsers.</p> <ul> <li>Command Line Interface</li> <li>Application Programming Interface</li> <li>Docstring parsers</li> </ul>"},{"location":"extensions/built-in/","title":"Built-in extensions","text":"<p>Built-in extensions are maintained in Griffe's code base. They generally bring support for core features of the Python language or its standard library.</p> Extension Description <code>dataclasses</code> Support for <code>dataclasses</code>."},{"location":"extensions/official/","title":"Official extensions","text":"<p>Official extensions are developed and maintained within the mkdocstrings organization on GitHub, in separate repositories. They generally bring support for various third-party libraries or other documentation-related features that are part of Python's standard library.</p> Extension Description Sponsors only? <code>autodocstringstyle</code> Set docstring style to <code>auto</code> for external packages. <code>inherited-docstrings</code> Inherit docstrings from parent classes. <code>public-redundant-aliases</code> Mark objects imported with redundant aliases as public. <code>public-wildcard-imports</code> Mark wildcard imported objects as public. <code>pydantic</code> Support for Pydantic models. <code>runtime-objects</code> Access runtime objects corresponding to each loaded Griffe object through their <code>extra</code> attribute. <code>sphinx</code> Parse Sphinx-comments above attributes (<code>#:</code>) as docstrings. <code>typing-doc</code> Support for PEP 727's <code>typing.Doc</code>, \"Documentation in Annotated Metadata\". <code>warnings-deprecated</code> Support for PEP 702's <code>warnings.deprecated</code>, \"Marking deprecations using the type system\"."},{"location":"extensions/third-party/","title":"Third-party extensions","text":"<p>Third-party extensions are developed and maintained outside of the mkdocstrings organization, by various developers. They generally bring support for third-party libraries.</p> Extension Description <code>docstring-inheritance</code> A more advanced docstring inheritance utility that also provides a Griffe extension. <code>fieldz</code> Support for data-class like objects (dataclasses, pydantic, attrs, etc.) using fieldz. <code>generics</code> Resolve generic type parameters as bound types in subclasses. <code>inherited-method-crossrefs</code> Replace docstrings of inherited methods with cross-references to parents. <code>modernized-annotations</code> Modernize type annotations by adopting PEP 585 and PEP 604. <p>You can find more third-party extensions by exploring the <code>griffe-extension</code> topic on GitHub. You can also check out the \"in-project\" extensions (not published to PyPI) used in various projects on GitHub by searching for \"griffe extension\" in code.</p>"},{"location":"extensions/built-in/dataclasses/","title":"<code>dataclasses</code>","text":"<p>The <code>dataclasses</code> extension adds support for dataclasses from the standard library. It works both statically and dynamically. When used statically, it re-creates the <code>__init__</code> methods and their signatures (as Griffe objects), that would otherwise be created at runtime. When used dynamically, it does nothing since <code>__init__</code> methods are created by the library and can be inspected normally.</p> <p>This extension is enabled by default.</p>"},{"location":"extensions/official/autodocstringstyle/","title":"<code>griffe-autodocstringstyle</code>","text":"<p> Sponsors only</p> <ul> <li>PyPI: <code>griffe-autodocstringstyle</code></li> <li>GitHub: mkdocstrings/griffe-autodocstringstyle</li> <li>Documentation: mkdocstrings.github.io/griffe-autodocstringstyle</li> <li>Extension name: <code>griffe_autodocstringstyle</code></li> </ul> <p>This extension sets the docstring parser to <code>auto</code> for all the docstrings of external packages. Packages are considered \"external\" when their sources are found in a virtual environment instead of a folder under the current working directory. Setting their docstring style to <code>auto</code> is useful if you plan on rendering the docstring of these objects in your own documentation.</p>"},{"location":"extensions/official/inherited-docstrings/","title":"<code>griffe-inherited-docstrings</code>","text":"<ul> <li>PyPI: <code>griffe-inherited-docstrings</code></li> <li>GitHub: mkdocstrings/griffe-inherited-docstrings</li> <li>Documentation: mkdocstrings.github.io/griffe-inherited-docstrings</li> <li>Extension name: <code>griffe_inherited_docstrings</code></li> </ul> <p>This extension, when enabled, iterates over the declared members of all classes found within a package, and if they don't have a docstring, but do have a parent member with a docstring, sets their docstring to that parent's docstring.</p> <pre><code>class Base:\n    attr = \"hello\"\n    \"\"\"Hello.\"\"\"\n\n    def hello(self):\n        \"\"\"Hello again.\"\"\"\n        ...\n\nclass Derived(Base):\n    attr = \"bye\"\n\n    def hello(self):\n        ...\n</code></pre> <p>In the example above, without the extension <code>Derived.attr</code> and <code>Derived.hello</code> have no docstrings, while with the extension they will have the <code>Base.attr</code> and <code>Base.hello</code> docstrings attached, respectively.</p>"},{"location":"extensions/official/public-redundant-aliases/","title":"<code>griffe-public-redundant-aliases</code>","text":"<p> Sponsors only</p> <ul> <li>PyPI: <code>griffe-public-redundant-aliases</code></li> <li>GitHub: mkdocstrings/griffe-public-redundant-aliases</li> <li>Documentation: mkdocstrings.github.io/griffe-public-redundant-aliases</li> <li>Extension name: <code>griffe_public_redundant_aliases</code></li> </ul> <p>This extension marks every object that was imported with a redundant alias as public. See our documentation on the redundant aliases convention.</p>"},{"location":"extensions/official/public-wildcard-imports/","title":"<code>griffe-public-wildcard-imports</code>","text":"<p> Sponsors only</p> <ul> <li>PyPI: <code>griffe-public-wildcard-imports</code></li> <li>GitHub: mkdocstrings/griffe-public-wildcard-imports</li> <li>Documentation: mkdocstrings.github.io/griffe-public-wildcard-imports</li> <li>Extension name: <code>griffe_public_wildcard_imports</code></li> </ul> <p>This extension marks every object that was imported with a wildcard import as public. See our documentation on the wildcard imports convention.</p>"},{"location":"extensions/official/pydantic/","title":"<code>griffe-pydantic</code>","text":"<ul> <li>PyPI: <code>griffe-pydantic</code></li> <li>GitHub: mkdocstrings/griffe-pydantic</li> <li>Documentation: mkdocstrings.github.io/griffe-pydantic</li> <li>Extension name: <code>griffe_pydantic</code></li> </ul> <p>This extension adds support for Pydantic models. It extracts useful information from them, stores this information into the <code>extra</code> attribute of objects, and binds custom mkdocstrings templates to the objects for better rendering. The extension works both statically and dynamically, and supports model inheritance.</p>"},{"location":"extensions/official/runtime-objects/","title":"<code>griffe-runtime-objects</code>","text":"<p> Sponsors only</p> <ul> <li>PyPI: <code>griffe-runtime-objects</code></li> <li>GitHub: mkdocstrings/griffe-runtime-objects</li> <li>Documentation: mkdocstrings.github.io/griffe-runtime-objects</li> <li>Extension name: <code>griffe_runtime_objects</code></li> </ul> <p>This extension stores runtime objects corresponding to each loaded Griffe object into its <code>extra</code> attribute, under the <code>runtime-objects</code> namespace.</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; griffe_data = griffe.load(\"griffe\", extensions=griffe.load_extensions(\"griffe_runtime_objects\"), resolve_aliases=True)\n&gt;&gt;&gt; griffe_data[\"parse\"].extra\ndefaultdict(&lt;class 'dict'&gt;, {'runtime-objects': {'object': &lt;function parse at 0x78685c951260&gt;}})\n&gt;&gt;&gt; griffe_data[\"Module\"].extra\ndefaultdict(&lt;class 'dict'&gt;, {'runtime-objects': {'object': &lt;class '_griffe.models.Module'&gt;}})\n</code></pre> <p>It can be useful in combination with mkdocstrings-python and custom templates, to iterate over object values or their attributes that couldn't be loaded by Griffe itself (for example, objects built dynamically and loaded as attributes won't have \"members\" to iterate over).</p>"},{"location":"extensions/official/sphinx/","title":"<code>griffe-sphinx</code>","text":"<p> Sponsors only</p> <ul> <li>PyPI: <code>griffe-sphinx</code></li> <li>GitHub: mkdocstrings/griffe-sphinx</li> <li>Documentation: mkdocstrings.github.io/griffe-sphinx</li> <li>Extension name: <code>griffe_sphinx</code></li> </ul> <p>This extension reads Sphinx comments placed above attribute assignments and uses them as docstrings.</p> <pre><code>#: Summary of `module_attr`. \nmodule_attr = \"hello\"\n\n\nclass Hello:\n    #: Summary of `class_attr`.\n    #:\n    #: Description of the class attribute.\n    #: *Markup* and [cross-references][] are __supported__,\n    #: just like in regular docstrings.\n    class_attr = \"hello\"\n\n    def __init__(self):\n        #: Summary of `instance_attr`.\n        self.instance_attr = \"hello\"\n</code></pre> <p>Comments are treated exactly like regular docstrings: they are \"cleaned\" (dedented and stripped of leading and trailing newlines) and can contain any markup you want, be it Markdown, rST, AsciiDoc, etc.</p> <p>Trailing comments are not supported:</p> <pre><code>module_attr  #: This is not supported.\n</code></pre>"},{"location":"extensions/official/typingdoc/","title":"<code>griffe-typingdoc</code>","text":"<ul> <li>PyPI: <code>griffe-typingdoc</code></li> <li>GitHub: mkdocstrings/griffe-typingdoc</li> <li>Documentation: mkdocstrings.github.io/griffe-typingdoc</li> <li>Extension name: <code>griffe_typingdoc</code></li> </ul> <p>This extension reads docstrings for parameters, return values and more from type annotations using <code>Annotated</code> and the <code>Doc</code> class suggested in PEP 727. Documenting parameters and return values this way makes it possible to completely avoid relying on a particular \"docstring style\" (Google, Numpydoc, Sphinx, etc.) and just use plain markup in module/classes/function docstrings. Docstrings therefore do not have to be parsed at all.</p> <pre><code>from typing import Annotated as An\nfrom typing_extensions import Doc\n\n\ndef function(\n    param1: An[int, Doc(\"Some integer value.\")],\n    param2: An[\n        str,\n        Doc(\n            \"\"\"\n            Summary of the parameter.\n\n            Multi-line docstrings can be used, as usual.\n            Any **markup** is supported, as usual.\n            \"\"\"\n        )\n    ]\n) -&gt; An[bool, Doc(\"Whether you like PEP 727.\")]:\n    \"\"\"Summary of the function.\n\n    No more \"Args\", \"Parameters\" or \"Returns\" sections.\n    Just plain markup.\n    \"\"\"\n    ...\n</code></pre> <p>PEP 727 is likely to be withdrawn or rejected, but the <code>Doc</code> class will remain in <code>typing_extensions</code>, as told by Jelle Zijlstra:</p> <p>We\u2019ll probably keep it in <code>typing_extensions</code> indefinitely even if the PEP gets withdrawn or rejected, for backwards compatibility reasons.</p> <p>You are free to use it in your own code using the typing-extensions version. If usage of <code>typing_extensions.Doc</code> becomes widespread, that will be a good argument for accepting the PEP and putting it in the standard library.</p>"},{"location":"extensions/official/warnings-deprecated/","title":"<code>griffe-warnings-deprecated</code>","text":"<ul> <li>PyPI: <code>griffe-warnings-deprecated</code></li> <li>GitHub: mkdocstrings/griffe-warnings-deprecated</li> <li>Documentation: mkdocstrings.github.io/griffe-warnings-deprecated</li> <li>Extension name: <code>griffe_warnings_deprecated</code></li> </ul> <p>This extension adds support for functions and classes decorated with <code>@warnings.deprecated(...)</code>, as implemented thanks to PEP 702. The message provided in the decorator call will be stored in the corresponding Griffe object's <code>deprecated</code> attribute (usable by downstream rendering templates), and will also add an admonition to the object's docstring with the provided message as text.</p> <pre><code>from warnings import deprecated\n\n@deprecated(\"This function is **deprecated**. Use [another one][package.another_func] instead.\")\ndef deprecated_func():\n    ...\n\n\ndef another_func():\n    ...\n</code></pre>"},{"location":"extensions/third-party/docstring-inheritance/","title":"<code>docstring-inheritance</code>","text":"<ul> <li>PyPI: <code>docstring-inheritance</code></li> <li>GitHub: AntoineD/docstring-inheritance</li> <li>Extension name: <code>docstring_inheritance.griffe</code></li> </ul> <p><code>docstring-inheritance</code> is a Python package that allows to avoid writing and maintaining duplicated Python docstrings. The typical usage is to enable the inheritance of the docstrings from a base class such that its derived classes fully or partially inherit the docstrings. It provides a Griffe extension and recommends to use it alongside the official <code>inherited-docstrings</code> extension in MkDocs:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - griffe_inherited_docstrings\n          - docstring_inheritance.griffe\n</code></pre>"},{"location":"extensions/third-party/fieldz/","title":"<code>griffe-fieldz</code>","text":"<ul> <li>PyPI: <code>griffe-fieldz</code></li> <li>GitHub: pyapp-kit/griffe-fieldz</li> <li>Extension name: <code>griffe_fieldz</code></li> </ul> <p>This extension adds support for data-class like things (pydantic, attrs, etc...). This extension will inject the fields of the data-class into the documentation, preventing you from duplicating field metadata in your docstrings.</p> <p>It supports anything that fieldz supports, which is currently:</p> <ul> <li><code>dataclasses.dataclass</code></li> <li><code>pydantic.BaseModel</code></li> <li><code>attrs.define</code></li> <li><code>msgspec.Struct</code></li> </ul>"},{"location":"extensions/third-party/generics/","title":"<code>griffe-generics</code>","text":"<ul> <li>PyPI: <code>griffe-generics</code></li> <li>GitHub: jonghwanhyeon/griffe-generics</li> <li>Extension name: <code>griffe_generics</code></li> </ul> <p>This extension resolves generic type parameters as bound types in subclasses. For example, if a parent class inherits from <code>Generics[L]</code>, and a subclass specifies <code>L</code> as <code>Hashable</code>, then all type annotations using <code>L</code> in the class methods or attributes inherited from the parent class will be transformed to use <code>Hashable</code> instead.</p>"},{"location":"extensions/third-party/inherited-method-crossrefs/","title":"<code>griffe-inherited-method-crossrefs</code>","text":"<ul> <li>PyPI: <code>griffe-inherited-method-crossrefs</code></li> <li>GitHub: mlprt/griffe-inherited-method-crossrefs</li> <li>Extension name: <code>griffe_inherited_method_crossrefs</code></li> </ul> <p>This extension replaces docstrings of inherited methods with cross-references to parent methods. For example, if a class <code>foo.Child</code> inherits the method <code>do_something</code> from <code>bar.Parent</code>, then in the generated documentation, the docstring of <code>Child.do_something</code> will appear similar to</p> <p>Inherited from bar.Parent</p> <p>whereas the docstring of <code>bar.Parent.do_something</code> will be unaffected.</p> <p>This is contrast to the official <code>inherited-docstrings</code> extension which simply attaches the docstring of the parent method to the subclass method, which means that modifying the subclass method docstring also modifies the parent method docstring (it's the same object).</p>"},{"location":"extensions/third-party/modernized-annotations/","title":"<code>griffe-modernized-annotations</code>","text":"<ul> <li>PyPI: <code>griffe-modernized-annotations</code></li> <li>GitHub: jonghwanhyeon/griffe-modernized-annotations</li> <li>Extension name: <code>griffe_modernized_annotations</code></li> </ul> <p>This extension modernizes type annotations by adopting PEP 585 and PEP 604. For example, it will transform <code>Union[A, B]</code> into <code>A | B</code>, and <code>List[str]</code> into <code>list[str]</code>.</p>"},{"location":"guide/contributors/","title":"Contributor guide","text":"<p>Welcome to the Griffe contributor guide! If you are familiar with Python tooling, development, and contributions to open-source projects, see the TL;DR at the end, otherwise we recommend you walk through the following pages:</p> <ul> <li>Environment setup</li> <li>Management commands</li> <li>Development workflow</li> </ul> <p>Regular contributors might be interested in the following documents that explain Griffe's design and inner workings:</p> <ul> <li>Architecture</li> </ul> <p>If you are unsure about what to contribute to, you can check out our issue tracker to see if some issues are interesting to you, or you could check out our coverage report to help us cover more of the codebase with tests.</p>"},{"location":"guide/contributors/#tldr","title":"TL;DR","text":"<ul> <li>Install Python, uv and direnv</li> <li>Fork, clone, and enter repository</li> <li>Run <code>direnv allow</code> and <code>make setup</code></li> <li>Checkout a new branch</li> <li>Edit code, tests and/or documentation</li> <li>Run <code>make format check test docs</code> to check everything</li> <li>Commit, push, open PR</li> </ul>"},{"location":"guide/users/","title":"User guide","text":"<p>Welcome to the Griffe user guide!</p>"},{"location":"guide/users/#manipulating-apis","title":"Manipulating APIs","text":"<p>The following topics will guide you through the various methods Griffe offers for exploring and exploiting Python APIs.</p> <ul> <li> <p> Loading</p> <p>Griffe can find packages and modules to scan them statically or dynamically and extract API-related information.</p> <p> Learn how to load data</p> </li> <li> <p> Navigating</p> <p>Griffe exposes the extracted API information into data models, making it easy to navigate your API.</p> <p> Learn how to navigate data</p> </li> <li> <p> Serializing</p> <p>Griffe can serialize your API data into JSON, for other tools to navigate or manipulate it.</p> <p> Learn how to serialize data</p> </li> <li> <p> Checking</p> <p>Griffe can compare snapshots of the same API to find breaking changes.</p> <p> Learn how to detect and handle breaking changes</p> </li> <li> <p> Extending</p> <p>API data can be augmented or modified thanks to Griffe's extension system.</p> <p> Learn how to write and use extensions</p> </li> </ul>"},{"location":"guide/users/#recommendations","title":"Recommendations","text":"<p>These topics explore the user side: how to write code to better integrate with Griffe.</p> <ul> <li> <p> Public API</p> <p>See our recommendations for exposing public APIs to your users.</p> <p> See our public API recommendations</p> </li> <li> <p> Python code best practices</p> <p>See our best practices for writing Python code.</p> <p> See our best practices</p> </li> <li> <p> Docstrings</p> <p>Griffe supports multiple docstring styles. Learn about these different styles, and see our recommendations to write docstrings.</p> <p> See our docstring recommendations</p> </li> </ul>"},{"location":"guide/users/#how-to","title":"How-to","text":"<p>These how-tos will show you how to achieve specific things with Griffe.</p> <ul> <li> <p> Parse docstrings</p> <p>Griffe can be used as a docstring-parsing library.</p> <p> See how to parse docstrings</p> </li> <li> <p>@ Support custom decorators</p> <p>Griffe will rarely support custom decorators through static analysis, but you can easily write extensions to do so.</p> <p> See how to support custom decorators</p> </li> <li> <p> Selectively inspect objects</p> <p>Sometimes static analysis is not enough, so you might want to use dynamic analysis (inspection) on certain objects.</p> <p> See how to selectively inspect objects</p> </li> <li> <p> Set objects' docstring style</p> <p>Sometimes the wrong docstring styles are attached to objects. You can fix this with a few different methods.</p> <p> See how to set the correct docstring styles on objects</p> </li> </ul>"},{"location":"guide/contributors/architecture/","title":"Project architecture","text":"<p>This document describes how the project is architectured, both regarding boilerplate and actual code. We start by giving an overview of the project's contents:</p> <p></p> <pre><code>\ud83d\udcc1 .git/\n\ud83d\udcc1 .github/ # (1)!\n\ud83d\udcc1 .venv/ # (2)!\n\ud83d\udcc1 .venvs/ # (3)!\n\ud83d\udcc1 .vscode/ # (4)!\n\ud83d\udcc1 config/ # (5)!\n\ud83d\udcc1 docs/ # (6)!\n\ud83d\udcc1 htmlcov/ # (7)!\n\ud83d\udcc1 scripts/ # (8)!\n\ud83d\udcc1 site/ # (9)!\n\ud83d\udcc1 src/ # (10)!\n\ud83d\udcc1 tests/ # (11)!\n .copier-answers.yml # (12)!\n .envrc # (13)!\n .gitignore\n CHANGELOG.md\n CODE_OF_CONDUCT.md\n CONTRIBUTING.md\n LICENSE\n Makefile # (14)!\n README.md\n duties.py # (15)!\n logo.svg\n mkdocs.yml # (16)!\n pyproject.toml # (17)!\n uv.lock\n</code></pre> <ol> <li> <p>GitHub workflows, issue templates and other configuration.</p> <pre><code>\ud83d\udcc1 ISSUE_TEMPLATE/ # (1)!\n\ud83d\udcc1 workflows/ # (2)!\n FUNDING.yml\n</code></pre> <ol> <li> <pre><code> 1-bug.md\n 2-feature.md\n 3-docs.md\n 4-change.md\n config.yml\n</code></pre> </li> <li> <pre><code> ci.yml\n release.yml\n</code></pre> </li> </ol> </li> <li> <p>The default virtual environment (git-ignored). See <code>make setup</code> command.</p> </li> <li> <p>The virtual environments for all supported Python versions (git-ignored). See <code>make setup</code> command.</p> </li> <li> <p>The configuration for VSCode (git-ignored). See <code>make vscode</code> command.</p> <pre><code> launch.json\n settings.json\n tasks.json\n</code></pre> </li> <li> <p>Contains our tooling configuration. See Scripts, configuration.</p> <pre><code>\ud83d\udcc1 vscode/ # (1)!\n coverage.ini\n git-changelog.toml\n mypy.ini\n pytest.ini\n ruff.toml\n</code></pre> <ol> <li> <pre><code> launch.json\n settings.json\n tasks.json\n</code></pre> </li> </ol> </li> <li> <p>Documentation sources (Markdown pages). See <code>make docs</code> task.</p> <pre><code>\ud83d\udcc1 .overrides/ # (1)!\n\ud83d\udcc1 css/ # (2)!\n\ud83d\udcc1 extensions/ # (3)!\n\ud83d\udcc1 guide/ # (4)!\n\ud83d\udcc1 img/ # (5)!\n\ud83d\udcc1 insiders/ # (6)!\n\ud83d\udcc1 js/ # (7)!\n\ud83d\udcc1 reference/ # (8)!\n alternatives.md\n changelog.md\n code-of-conduct.md\n community.md\n contributing.md\n credits.md\n downstream-projects.md\n extensions.md\n getting-help.md\n getting-started.md\n guide.md\n index.md\n installation.md\n introduction.md\n license.md\n logo.svg\n playground.md\n reference.md\n schema-docstrings-options.json\n schema.json\n</code></pre> <ol> <li> <p>Customization of Material for MkDocs' templates.</p> <pre><code>\ud83d\udcc1 partials/ # (1)!\n main.html\n</code></pre> <ol> <li> <pre><code> comments.html\n path-item.html\n</code></pre> </li> </ol> </li> <li> <pre><code> custom.css\n insiders.css\n material.css\n mkdocstrings.css\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 built-in/ # (1)!\n\ud83d\udcc1 official/ # (2)!\n\ud83d\udcc1 third-party/ # (3)!\n built-in.md\n official.md\n third-party.md\n</code></pre> <ol> <li> <pre><code> dataclasses.md\n</code></pre> </li> <li> <pre><code> autodocstringstyle.md\n inherited-docstrings.md\n public-redundant-aliases.md\n public-wildcard-imports.md\n pydantic.md\n runtime-objects.md\n sphinx.md\n typingdoc.md\n warnings-deprecated.md\n</code></pre> </li> <li> <pre><code> docstring-inheritance.md\n fieldz.md\n generics.md\n inherited-method-crossrefs.md\n modernized-annotations.md\n</code></pre> </li> </ol> </li> <li> <pre><code>\ud83d\udcc1 contributors/ # (1)!\n\ud83d\udcc1 users/ # (2)!\n contributors.md\n users.md\n</code></pre> <ol> <li> <pre><code> architecture.md\n commands.md\n setup.md\n workflow.md\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 how-to/ # (1)!\n\ud83d\udcc1 recommendations/ # (2)!\n checking.md\n extending.md\n loading.md\n navigating.md\n serializing.md\n</code></pre> <ol> <li> <pre><code> parse-docstrings.md\n selectively-inspect.md\n set-docstring-styles.md\n support-decorators.md\n</code></pre> </li> <li> <pre><code> docstrings.md\n public-apis.md\n python-code.md\n</code></pre> </li> </ol> </li> </ol> </li> <li> <pre><code> favicon.ico\n gha_annotations_1.png\n gha_annotations_2.png\n</code></pre> </li> <li> <pre><code> changelog.md\n goals.yml\n index.md\n installation.md\n</code></pre> </li> <li> <pre><code> feedback.js\n insiders.js\n</code></pre> </li> <li> <pre><code>\ud83d\udcc1 api/ # (1)!\n api.md\n cli.md\n docstrings.md\n</code></pre> <ol> <li> <p>Python API reference, injected with mkdocstrings.</p> <pre><code>\ud83d\udcc1 docstrings/ # (1)!\n\ud83d\udcc1 models/ # (2)!\n agents.md\n checks.md\n cli.md\n docstrings.md\n exceptions.md\n expressions.md\n extensions.md\n finder.md\n git.md\n helpers.md\n loaders.md\n loggers.md\n models.md\n serializers.md\n</code></pre> <ol> <li> <pre><code> models.md\n parsers.md\n</code></pre> </li> <li> <pre><code> alias.md\n attribute.md\n class.md\n function.md\n module.md\n</code></pre> </li> </ol> </li> </ol> </li> </ol> </li> <li> <p>HTML report for Python code coverage (git-ignored), integrated in the Coverage report page. See <code>make coverage</code> task.</p> </li> <li> <p>Our different scripts. See Scripts, configuration.</p> <pre><code> gen_credits.py\n gen_griffe_json.py\n gen_structure_docs.py\n get_version.py\n insiders.py\n make\n make.py\n</code></pre> </li> <li> <p>Documentation site, built with <code>make run mkdocs build</code> (git-ignored).</p> </li> <li> <p>The source of our Python package(s). See Sources and Program structure.</p> <pre><code>\ud83d\udcc1 _griffe/ # (1)!\n\ud83d\udcc1 griffe/ # (2)!\n</code></pre> <ol> <li> <p>Our internal API, hidden from users. See Program structure.</p> <pre><code>\ud83d\udcc1 agents/ # (1)!\n\ud83d\udcc1 docstrings/ # (2)!\n\ud83d\udcc1 extensions/ # (3)!\n __init__.py\n c3linear.py\n cli.py\n collections.py\n debug.py\n diff.py\n encoders.py\n enumerations.py\n exceptions.py\n expressions.py\n finder.py\n git.py\n importer.py\n loader.py\n logger.py\n merger.py\n mixins.py\n models.py\n py.typed\n stats.py\n tests.py\n</code></pre> <ol> <li> <pre><code>\ud83d\udcc1 nodes/ # (1)!\n __init__.py\n inspector.py\n visitor.py\n</code></pre> <ol> <li> <pre><code> __init__.py\n assignments.py\n ast.py\n docstrings.py\n exports.py\n imports.py\n parameters.py\n runtime.py\n values.py\n</code></pre> </li> </ol> </li> <li> <pre><code> __init__.py\n google.py\n models.py\n numpy.py\n parsers.py\n sphinx.py\n utils.py\n</code></pre> </li> <li> <pre><code> __init__.py\n base.py\n dataclasses.py\n</code></pre> </li> </ol> </li> <li> <p>Our public API, exposed to users. See Program structure.</p> <pre><code> __init__.py\n __main__.py\n py.typed\n</code></pre> </li> </ol> </li> <li> <p>Our test suite. See Tests.</p> <pre><code>\ud83d\udcc1 fixtures/\n\ud83d\udcc1 test_docstrings/ # (1)!\n __init__.py\n conftest.py\n helpers.py\n test_api.py\n test_cli.py\n test_diff.py\n test_encoders.py\n test_expressions.py\n test_extensions.py\n test_finder.py\n test_functions.py\n test_git.py\n test_inheritance.py\n test_inspector.py\n test_loader.py\n test_merger.py\n test_mixins.py\n test_models.py\n test_nodes.py\n test_public_api.py\n test_stdlib.py\n test_visitor.py\n</code></pre> <ol> <li> <pre><code> __init__.py\n conftest.py\n helpers.py\n test_google.py\n test_numpy.py\n test_sphinx.py\n test_warnings.py\n</code></pre> </li> </ol> </li> <li> <p>The answers file generated by Copier. See Boilerplate.</p> </li> <li> <p>The environment configuration, automatically sourced by direnv. See commands.</p> </li> <li> <p>A dummy makefile, only there for auto-completion. See commands.</p> </li> <li> <p>Our project tasks, written with duty. See Tasks.</p> </li> <li> <p>The build configuration for our docs. See <code>make docs</code> task.</p> </li> <li> <p>The project metadata and production dependencies.</p> </li> </ol>"},{"location":"guide/contributors/architecture/#boilerplate","title":"Boilerplate","text":"<p>This project's skeleton (the file-tree shown above) is actually generated from a Copier template called copier-uv. When generating the project, Copier asks a series of questions (configured by the template itself), and the answers are used to render the file and directory names, as well as the file contents. Copier also records answers in the <code>.copier-answers.yml</code> file, allowing to update the project with latest changes from the template while reusing previous answers.</p> <p>To update the project (in order to apply latest changes from the template), we use the following command:</p> <pre><code>copier update --trust --skip-answered\n</code></pre>"},{"location":"guide/contributors/architecture/#scripts-configuration","title":"Scripts, configuration","text":"<p>We have a few scripts that let us manage the various maintenance aspects for this project. The entry-point is the <code>make</code> script located in the <code>scripts</code> folder. It doesn't need any dependency to be installed to run. See Management commands for more information.</p> <p>The <code>make</code> script can also invoke what we call \"tasks\". Tasks need our development dependencies to be installed to run. These tasks are written in the <code>duties.py</code> file, and the development dependencies are listed in <code>devdeps.txt</code>.</p> <p>The tools used in tasks have their configuration files stored in the <code>config</code> folder, to unclutter the root of the repository. The tasks take care of calling the tools with the right options to locate their respective configuration files.</p>"},{"location":"guide/contributors/architecture/#sources","title":"Sources","text":"<p>Sources are located in the <code>src</code> folder, following the src-layout. We use PDM-Backend to build source and wheel distributions, and configure it in <code>pyproject.toml</code> to search for packages in the <code>src</code> folder.</p>"},{"location":"guide/contributors/architecture/#tests","title":"Tests","text":"<p>Our test suite is located in the <code>tests</code> folder. It is located outside of the sources as to not pollute distributions (it would be very wrong to publish a <code>tests</code> package as part of our distributions, since this name is extremely common), or worse, the public API. The <code>tests</code> folder is however included in our source distributions (<code>.tar.gz</code>), alongside most of our metadata and configuration files. Check out <code>pyproject.toml</code> to get the full list of files included in our source distributions.</p> <p>The test suite is based on pytest. Test modules reflect our internal API structure, and except for a few test modules that test specific aspects of our API, each test module tests the logic from the corresponding module in the internal API. For example, <code>test_finder.py</code> tests code of the <code>_griffe.finder</code> internal module, while <code>test_functions</code> tests our ability to extract correct information from function signatures, statically. The general rule of thumb when writing new tests is to mirror the internal API. If a test touches to many aspects of the loading process, it can be added to the <code>test_loader</code> test module.</p>"},{"location":"guide/contributors/architecture/#program-structure","title":"Program structure","text":"<p>Griffe is composed of two packages:</p> <ul> <li><code>_griffe</code>, which is our internal API, hidden from users</li> <li><code>griffe</code>, which is our public API, exposed to users</li> </ul> <p>When installing the <code>griffe</code> distribution from PyPI.org (or any other index where it is published), both the <code>_griffe</code> and <code>griffe</code> packages are installed. Users then import <code>griffe</code> directly, or import objects from it. The top-level <code>griffe/__init__.py</code> module exposes all the public API, by importing the internal objects from various submodules of <code>_griffe</code>.</p> <p>We'll be honest: our code organization is not the most elegant, but it works  Have a look at the following module dependency graph, which will basically tell you nothing except that we have a lot of inter-module dependencies. Arrows read as \"imports from\". The code base is generally pleasant to work with though.</p> G_griffe_griffe_griffe_agents_griffe.agents_griffe_agents_inspector_griffe.agents.inspector_griffe_agents_nodes_griffe.agents.nodes_griffe_agents_inspector-&gt;_griffe_agents_nodes_griffe_agents_nodes_runtime_griffe.agents.nodes.runtime_griffe_agents_inspector-&gt;_griffe_agents_nodes_runtime_griffe_collections_griffe.collections_griffe_agents_inspector-&gt;_griffe_collections_griffe_docstrings_griffe.docstrings_griffe_agents_inspector-&gt;_griffe_docstrings_griffe_docstrings_parsers_griffe.docstrings.parsers_griffe_agents_inspector-&gt;_griffe_docstrings_parsers_griffe_enumerations_griffe.enumerations_griffe_agents_inspector-&gt;_griffe_enumerations_griffe_expressions_griffe.expressions_griffe_agents_inspector-&gt;_griffe_expressions_griffe_extensions_griffe.extensions_griffe_agents_inspector-&gt;_griffe_extensions_griffe_extensions_base_griffe.extensions.base_griffe_agents_inspector-&gt;_griffe_extensions_base_griffe_importer_griffe.importer_griffe_agents_inspector-&gt;_griffe_importer_griffe_logger_griffe.logger_griffe_agents_inspector-&gt;_griffe_logger_griffe_models_griffe.models_griffe_agents_inspector-&gt;_griffe_models_griffe_agents_nodes_assignments_griffe.agents.nodes.assignments_griffe_agents_nodes_ast_griffe.agents.nodes.ast_griffe_exceptions_griffe.exceptions_griffe_agents_nodes_ast-&gt;_griffe_exceptions_griffe_agents_nodes_docstrings_griffe.agents.nodes.docstrings_griffe_agents_nodes_exports_griffe.agents.nodes.exports_griffe_agents_nodes_values_griffe.agents.nodes.values_griffe_agents_nodes_exports-&gt;_griffe_agents_nodes_values_griffe_agents_nodes_exports-&gt;_griffe_enumerations_griffe_agents_nodes_exports-&gt;_griffe_expressions_griffe_agents_nodes_exports-&gt;_griffe_logger_griffe_agents_nodes_exports-&gt;_griffe_models_griffe_agents_nodes_imports_griffe.agents.nodes.imports_griffe_agents_nodes_imports-&gt;_griffe_models_griffe_agents_nodes_parameters_griffe.agents.nodes.parameters_griffe_agents_nodes_parameters-&gt;_griffe_enumerations_griffe_agents_nodes_runtime-&gt;_griffe_enumerations_griffe_agents_nodes_runtime-&gt;_griffe_logger_griffe_agents_nodes_values-&gt;_griffe_logger_griffe_agents_visitor_griffe.agents.visitor_griffe_agents_visitor-&gt;_griffe_agents_nodes_griffe_agents_visitor-&gt;_griffe_agents_nodes_assignments_griffe_agents_visitor-&gt;_griffe_agents_nodes_ast_griffe_agents_visitor-&gt;_griffe_agents_nodes_docstrings_griffe_agents_visitor-&gt;_griffe_agents_nodes_exports_griffe_agents_visitor-&gt;_griffe_agents_nodes_imports_griffe_agents_visitor-&gt;_griffe_agents_nodes_parameters_griffe_agents_visitor-&gt;_griffe_collections_griffe_agents_visitor-&gt;_griffe_docstrings_griffe_agents_visitor-&gt;_griffe_docstrings_parsers_griffe_agents_visitor-&gt;_griffe_enumerations_griffe_agents_visitor-&gt;_griffe_exceptions_griffe_agents_visitor-&gt;_griffe_expressions_griffe_agents_visitor-&gt;_griffe_extensions_griffe_agents_visitor-&gt;_griffe_models_griffe_c3linear_griffe.c3linear_griffe_cli_griffe.cli_griffe_diff_griffe.diff_griffe_cli-&gt;_griffe_diff_griffe_encoders_griffe.encoders_griffe_cli-&gt;_griffe_encoders_griffe_cli-&gt;_griffe_enumerations_griffe_cli-&gt;_griffe_exceptions_griffe_cli-&gt;_griffe_extensions_griffe_cli-&gt;_griffe_extensions_base_griffe_git_griffe.git_griffe_cli-&gt;_griffe_git_griffe_loader_griffe.loader_griffe_cli-&gt;_griffe_loader_griffe_cli-&gt;_griffe_logger_griffe_mixins_griffe.mixins_griffe_collections-&gt;_griffe_mixins_griffe_collections-&gt;_griffe_models_griffe_diff-&gt;_griffe_enumerations_griffe_diff-&gt;_griffe_exceptions_griffe_diff-&gt;_griffe_git_griffe_diff-&gt;_griffe_logger_griffe_diff-&gt;_griffe_models_griffe_docstrings_google_griffe.docstrings.google_griffe_docstrings_models_griffe.docstrings.models_griffe_docstrings_google-&gt;_griffe_docstrings_models_griffe_docstrings_utils_griffe.docstrings.utils_griffe_docstrings_google-&gt;_griffe_docstrings_utils_griffe_docstrings_google-&gt;_griffe_enumerations_griffe_docstrings_google-&gt;_griffe_expressions_griffe_docstrings_google-&gt;_griffe_models_griffe_docstrings_models-&gt;_griffe_enumerations_griffe_docstrings_models-&gt;_griffe_expressions_griffe_docstrings_numpy_griffe.docstrings.numpy_griffe_docstrings_numpy-&gt;_griffe_docstrings_models_griffe_docstrings_numpy-&gt;_griffe_docstrings_utils_griffe_docstrings_numpy-&gt;_griffe_enumerations_griffe_docstrings_numpy-&gt;_griffe_expressions_griffe_docstrings_numpy-&gt;_griffe_models_griffe_docstrings_parsers-&gt;_griffe_docstrings_google_griffe_docstrings_parsers-&gt;_griffe_docstrings_models_griffe_docstrings_parsers-&gt;_griffe_docstrings_numpy_griffe_docstrings_sphinx_griffe.docstrings.sphinx_griffe_docstrings_parsers-&gt;_griffe_docstrings_sphinx_griffe_docstrings_parsers-&gt;_griffe_enumerations_griffe_docstrings_sphinx-&gt;_griffe_docstrings_models_griffe_docstrings_sphinx-&gt;_griffe_docstrings_utils_griffe_docstrings_sphinx-&gt;_griffe_expressions_griffe_docstrings_sphinx-&gt;_griffe_models_griffe_docstrings_utils-&gt;_griffe_enumerations_griffe_docstrings_utils-&gt;_griffe_exceptions_griffe_docstrings_utils-&gt;_griffe_expressions_griffe_docstrings_utils-&gt;_griffe_logger_griffe_docstrings_utils-&gt;_griffe_models_griffe_encoders-&gt;_griffe_enumerations_griffe_encoders-&gt;_griffe_expressions_griffe_encoders-&gt;_griffe_models_griffe_exceptions-&gt;_griffe_models_griffe_expressions-&gt;_griffe_agents_griffe_expressions-&gt;_griffe_agents_nodes_griffe_expressions-&gt;_griffe_agents_nodes_parameters_griffe_expressions-&gt;_griffe_enumerations_griffe_expressions-&gt;_griffe_exceptions_griffe_expressions-&gt;_griffe_logger_griffe_expressions-&gt;_griffe_models_griffe_extensions_base-&gt;_griffe_agents_griffe_extensions_base-&gt;_griffe_agents_nodes_griffe_extensions_base-&gt;_griffe_agents_nodes_ast_griffe_extensions_base-&gt;_griffe_agents_nodes_runtime_griffe_extensions_base-&gt;_griffe_agents_visitor_griffe_extensions_base-&gt;_griffe_exceptions_griffe_extensions_dataclasses_griffe.extensions.dataclasses_griffe_extensions_base-&gt;_griffe_extensions_dataclasses_griffe_extensions_base-&gt;_griffe_importer_griffe_extensions_base-&gt;_griffe_loader_griffe_extensions_base-&gt;_griffe_models_griffe_extensions_dataclasses-&gt;_griffe_enumerations_griffe_extensions_dataclasses-&gt;_griffe_expressions_griffe_extensions_dataclasses-&gt;_griffe_logger_griffe_extensions_dataclasses-&gt;_griffe_models_griffe_finder_griffe.finder_griffe_finder-&gt;_griffe_exceptions_griffe_finder-&gt;_griffe_logger_griffe_finder-&gt;_griffe_models_griffe_git-&gt;_griffe_exceptions_griffe_loader-&gt;_griffe_agents_griffe_loader-&gt;_griffe_agents_inspector_griffe_loader-&gt;_griffe_agents_visitor_griffe_loader-&gt;_griffe_collections_griffe_loader-&gt;_griffe_docstrings_griffe_loader-&gt;_griffe_docstrings_parsers_griffe_loader-&gt;_griffe_enumerations_griffe_loader-&gt;_griffe_exceptions_griffe_loader-&gt;_griffe_expressions_griffe_loader-&gt;_griffe_extensions_griffe_loader-&gt;_griffe_finder_griffe_loader-&gt;_griffe_git_griffe_loader-&gt;_griffe_importer_griffe_loader-&gt;_griffe_logger_griffe_merger_griffe.merger_griffe_loader-&gt;_griffe_merger_griffe_loader-&gt;_griffe_models_griffe_stats_griffe.stats_griffe_loader-&gt;_griffe_stats_griffe_merger-&gt;_griffe_exceptions_griffe_merger-&gt;_griffe_logger_griffe_merger-&gt;_griffe_models_griffe_mixins-&gt;_griffe_encoders_griffe_mixins-&gt;_griffe_enumerations_griffe_mixins-&gt;_griffe_exceptions_griffe_mixins-&gt;_griffe_merger_griffe_mixins-&gt;_griffe_models_griffe_models-&gt;_griffe_c3linear_griffe_models-&gt;_griffe_docstrings_griffe_models-&gt;_griffe_docstrings_models_griffe_models-&gt;_griffe_docstrings_parsers_griffe_models-&gt;_griffe_enumerations_griffe_models-&gt;_griffe_logger_griffe_stats-&gt;_griffe_enumerations_griffe_stats-&gt;_griffe_models_griffe_tests_griffe.tests_griffe_tests-&gt;_griffe_agents_griffe_tests-&gt;_griffe_agents_inspector_griffe_tests-&gt;_griffe_agents_visitor_griffe_tests-&gt;_griffe_collections_griffe_tests-&gt;_griffe_docstrings_griffe_tests-&gt;_griffe_docstrings_parsers_griffe_tests-&gt;_griffe_enumerations_griffe_tests-&gt;_griffe_extensions_griffe_tests-&gt;_griffe_extensions_base_griffe_tests-&gt;_griffe_loader_griffe_tests-&gt;_griffe_modelsgriffegriffegriffe-&gt;_griffegriffe-&gt;_griffe_agentsgriffe-&gt;_griffe_agents_inspectorgriffe-&gt;_griffe_agents_nodesgriffe-&gt;_griffe_agents_nodes_assignmentsgriffe-&gt;_griffe_agents_nodes_astgriffe-&gt;_griffe_agents_nodes_docstringsgriffe-&gt;_griffe_agents_nodes_exportsgriffe-&gt;_griffe_agents_nodes_importsgriffe-&gt;_griffe_agents_nodes_parametersgriffe-&gt;_griffe_agents_nodes_runtimegriffe-&gt;_griffe_agents_nodes_valuesgriffe-&gt;_griffe_agents_visitorgriffe-&gt;_griffe_c3lineargriffe-&gt;_griffe_cligriffe-&gt;_griffe_collectionsgriffe-&gt;_griffe_diffgriffe-&gt;_griffe_docstringsgriffe-&gt;_griffe_docstrings_googlegriffe-&gt;_griffe_docstrings_modelsgriffe-&gt;_griffe_docstrings_numpygriffe-&gt;_griffe_docstrings_parsersgriffe-&gt;_griffe_docstrings_sphinxgriffe-&gt;_griffe_docstrings_utilsgriffe-&gt;_griffe_encodersgriffe-&gt;_griffe_enumerationsgriffe-&gt;_griffe_exceptionsgriffe-&gt;_griffe_expressionsgriffe-&gt;_griffe_extensionsgriffe-&gt;_griffe_extensions_basegriffe-&gt;_griffe_extensions_dataclassesgriffe-&gt;_griffe_findergriffe-&gt;_griffe_gitgriffe-&gt;_griffe_importergriffe-&gt;_griffe_loadergriffe-&gt;_griffe_loggergriffe-&gt;_griffe_mergergriffe-&gt;_griffe_mixinsgriffe-&gt;_griffe_modelsgriffe-&gt;_griffe_statsgriffe-&gt;_griffe_testsgriffe___main__griffe.__main__griffe___main__-&gt;_griffegriffe___main__-&gt;_griffe_cli <p>You can zoom and pan all diagrams on this page with mouse inputs.</p> <p>The following sections are generated automatically by iterating on the modules of our public and internal APIs respectively, and extracting the comment blocks at the top of each module. The comment blocks are addressed to readers of the code (maintainers, contributors), while module docstrings are addressed to users of the API. Module docstrings in our internal API are never written, because our module layout is hidden, and therefore modules aren't part of the public API, so it doesn't make much sense to write \"user documentation\" in them.</p> <p></p>"},{"location":"guide/contributors/architecture/#cli-entrypoint","title":"CLI entrypoint","text":""},{"location":"guide/contributors/architecture/#entrypoint-griffe__main__","title":"<code>griffe.__main__</code>","text":"<p>Entry-point module, in case you use <code>python -m griffe</code>.</p> <p>Why does this file exist, and why <code>__main__</code>? For more info, read:</p> <ul> <li>https://www.python.org/dev/peps/pep-0338/</li> <li>https://docs.python.org/3/using/cmdline.html#cmdoption-m</li> </ul>"},{"location":"guide/contributors/architecture/#public-api","title":"Public API","text":""},{"location":"guide/contributors/architecture/#public-griffe","title":"<code>griffe</code>","text":"<p>This top-level module imports all public names from the package, and exposes them as public objects. We have tests to make sure no object is forgotten in this list.</p>"},{"location":"guide/contributors/architecture/#internal-api","title":"Internal API","text":"<p><p>The internal API layout doesn't follow any particular paradigm: we simply organize code in different modules, depending on what the code is used for.</p> </p>"},{"location":"guide/contributors/architecture/#internal-agents","title":"<code>agents</code>","text":"<p>These modules contain the different agents that are able to extract data.</p>"},{"location":"guide/contributors/architecture/#internal-agents-inspector","title":"<code>inspector.py</code>","text":"<p>This module contains our dynamic analysis agent, capable of inspecting modules and objects in memory, at runtime.</p> G cluster_fbc13eef File: inspector cluster_47675b57 Class: Inspector node_213a899e 101: __init__() node_213a899e-&gt;node_213a899e node_9721f178 153: _get_docstring() node_9938e045 175: _get_linenos() node_b7fe10bf 241: generic_inspect() node_b7fe10bf-&gt;node_213a899e node_e2440ecd 233: inspect() node_b7fe10bf-&gt;node_e2440ecd node_fa12d704 278: inspect_module() node_b7fe10bf-&gt;node_fa12d704 node_3292b9b6 185: get_module() node_3292b9b6-&gt;node_e2440ecd node_ff18f059 486: handle_attribute() node_ff18f059-&gt;node_9721f178 node_0d3d94df 420: handle_function() node_0d3d94df-&gt;node_9721f178 node_0d3d94df-&gt;node_9938e045 node_a5804848 559: _convert_object_to_annotation() node_0d3d94df-&gt;node_a5804848 node_1ae020ac 543: _convert_parameter() node_0d3d94df-&gt;node_1ae020ac node_ab31df10 478: inspect_attribute() node_ab31df10-&gt;node_ff18f059 node_4c98b79f 380: inspect_builtin_function() node_4c98b79f-&gt;node_0d3d94df node_ea2ee719 356: inspect_builtin_method() node_ea2ee719-&gt;node_0d3d94df node_66fdf6a7 396: inspect_cached_property() node_66fdf6a7-&gt;node_0d3d94df node_643e9100 300: inspect_class() node_643e9100-&gt;node_9721f178 node_643e9100-&gt;node_9938e045 node_643e9100-&gt;node_b7fe10bf node_82d768ae 340: inspect_classmethod() node_82d768ae-&gt;node_0d3d94df node_168d91e1 372: inspect_coroutine() node_168d91e1-&gt;node_0d3d94df node_bd773dcd 388: inspect_function() node_bd773dcd-&gt;node_0d3d94df node_589da38e 412: inspect_getset_descriptor() node_589da38e-&gt;node_0d3d94df node_08b56a40 364: inspect_method() node_08b56a40-&gt;node_0d3d94df node_4f60d671 348: inspect_method_descriptor() node_4f60d671-&gt;node_0d3d94df node_fa12d704-&gt;node_9721f178 node_dad6d34f 404: inspect_property() node_dad6d34f-&gt;node_0d3d94df node_b30137b9 332: inspect_staticmethod() node_b30137b9-&gt;node_0d3d94df node_1ae020ac-&gt;node_a5804848 node_723ae3ac 33: inspect() node_723ae3ac-&gt;node_213a899e node_723ae3ac-&gt;node_3292b9b6"},{"location":"guide/contributors/architecture/#internal-agents-nodes","title":"<code>nodes</code>","text":"<p>These submodules contain utilities for working with AST and object nodes.</p>"},{"location":"guide/contributors/architecture/#internal-agents-nodes-assignments","title":"<code>assignments.py</code>","text":"<p>This module contains utilities for extracting information from assignment nodes.</p> G cluster_d1c75f97 File: assignments node_50c5a398 40: _get_annassign_names() node_841f0e1e 23: get_name() node_50c5a398-&gt;node_841f0e1e node_eb721c47 35: _get_assign_names() node_eb721c47-&gt;node_841f0e1e node_7a8b1abf 9: _get_attribute_name() node_7a8b1abf-&gt;node_841f0e1e node_af78fcf5 63: get_instance_names() node_901f4d64 51: get_names() node_af78fcf5-&gt;node_901f4d64"},{"location":"guide/contributors/architecture/#internal-agents-nodes-ast","title":"<code>ast.py</code>","text":"<p>This module contains utilities for navigating AST nodes.</p> G cluster_8486f073 File: ast node_3386fe8e 26: ast_children() node_aba3dd7e 137: ast_first_child() node_aba3dd7e-&gt;node_3386fe8e node_cb7ceb42 155: ast_last_child() node_cb7ceb42-&gt;node_3386fe8e node_0fe7c2d8 119: ast_next() node_6fd1e092 66: ast_next_siblings() node_0fe7c2d8-&gt;node_6fd1e092 node_6fd1e092-&gt;node_3386fe8e node_2f33c917 100: ast_previous() node_fe2dd208 50: ast_previous_siblings() node_2f33c917-&gt;node_fe2dd208 node_fe2dd208-&gt;node_3386fe8e node_52a24fe7 82: ast_siblings() node_52a24fe7-&gt;node_3386fe8e"},{"location":"guide/contributors/architecture/#internal-agents-nodes-docstrings","title":"<code>docstrings.py</code>","text":"<p>This module contains utilities for extracting docstrings from nodes.</p>"},{"location":"guide/contributors/architecture/#internal-agents-nodes-exports","title":"<code>exports.py</code>","text":"<p>This module contains utilities for extracting exports from <code>__all__</code> assignments.</p> G cluster_3d10b7a4 File: exports node_493074e5 74: _extract() node_41524146 33: _extract_attribute() node_41524146-&gt;node_493074e5 node_d3da026b 37: _extract_binop() node_d3da026b-&gt;node_493074e5 node_27567b15 51: _extract_sequence() node_27567b15-&gt;node_493074e5 node_6ce19a0a 58: _extract_starred() node_6ce19a0a-&gt;node_493074e5 node_c960a64a 78: get__all__() node_c960a64a-&gt;node_493074e5 node_730c2b95 93: safe_get__all__() node_730c2b95-&gt;node_c960a64a"},{"location":"guide/contributors/architecture/#internal-agents-nodes-imports","title":"<code>imports.py</code>","text":"<p>This module contains utilities for working with imports and relative imports.</p>"},{"location":"guide/contributors/architecture/#internal-agents-nodes-parameters","title":"<code>parameters.py</code>","text":"<p>This module contains utilities for extracting information from parameter nodes.</p>"},{"location":"guide/contributors/architecture/#internal-agents-nodes-runtime","title":"<code>runtime.py</code>","text":"<p>This module contains utilities for extracting information from runtime objects.</p> G cluster_1aaafac6 File: runtime cluster_a426e587 Class: ObjectNode node_b01ab38f 41: __init__() node_13bc7073 243: _pick_member() node_ec91fd74 253: alias_target_path() node_908258c7 25: _same_components() node_ec91fd74-&gt;node_908258c7 node_911413fd 141: children() node_911413fd-&gt;node_b01ab38f node_911413fd-&gt;node_13bc7073"},{"location":"guide/contributors/architecture/#internal-agents-nodes-values","title":"<code>values.py</code>","text":"<p>This module contains utilities for extracting attribute values.</p> G cluster_72f991fc File: values node_4d09eaad 15: get_value() node_ca9d2129 29: safe_get_value() node_ca9d2129-&gt;node_4d09eaad"},{"location":"guide/contributors/architecture/#internal-agents-visitor","title":"<code>visitor.py</code>","text":"<p>This module contains our static analysis agent, capable of parsing and visiting sources, statically.</p> G cluster_467a96d5 File: visitor cluster_bfce05ad Class: Visitor node_47c38fdc 122: __init__() node_47c38fdc-&gt;node_47c38fdc node_6b65612a 182: _get_docstring() node_9194a90f 293: decorators_to_labels() node_4eed05dc 216: generic_visit() node_5c29516e 208: visit() node_4eed05dc-&gt;node_5c29516e node_ff5c996d 311: get_base_property() node_1faf53c7 194: get_module() node_1faf53c7-&gt;node_5c29516e node_75bac423 509: handle_attribute() node_75bac423-&gt;node_6b65612a node_9635ec7f 335: handle_function() node_9635ec7f-&gt;node_6b65612a node_9635ec7f-&gt;node_9194a90f node_9635ec7f-&gt;node_4eed05dc node_9635ec7f-&gt;node_ff5c996d node_38f3e33e 620: visit_annassign() node_38f3e33e-&gt;node_75bac423 node_9809e707 612: visit_assign() node_9809e707-&gt;node_75bac423 node_b1164873 446: visit_asyncfunctiondef() node_b1164873-&gt;node_9635ec7f node_121dcfbf 247: visit_classdef() node_121dcfbf-&gt;node_6b65612a node_121dcfbf-&gt;node_9194a90f node_121dcfbf-&gt;node_4eed05dc node_02d4d31a 438: visit_functiondef() node_02d4d31a-&gt;node_9635ec7f node_4cc2158e 649: visit_if() node_4cc2158e-&gt;node_4eed05dc node_6c7f231f 225: visit_module() node_6c7f231f-&gt;node_6b65612a node_6c7f231f-&gt;node_4eed05dc node_b0577f69 65: visit() node_b0577f69-&gt;node_47c38fdc node_b0577f69-&gt;node_1faf53c7"},{"location":"guide/contributors/architecture/#internal-c3linear","title":"<code>c3linear.py</code>","text":"<p>This module contains a single function, <code>c3linear_merge</code>. The function is generic enough to be in its own module.</p> <ul> <li>Copyright (c) 2019 Vitaly R. Samigullin</li> <li>Adapted from https://github.com/pilosus/c3linear</li> <li>Adapted from https://github.com/tristanlatr/pydocspec</li> </ul> G cluster_c1979c90 File: c3linear cluster_4044cb3d Class: _Dependency cluster_422181dd Class: _DependencyList node_d6646d9a 29: tail() node_ba10f315 60: __len__() node_d6646d9a-&gt;node_ba10f315 node_4c86f6ea 48: __init__() node_d7a716bd 64: __repr__() node_d7a716bd-&gt;node_d7a716bd node_b0ced719 82: remove() node_82f2c402 93: c3linear_merge() node_82f2c402-&gt;node_4c86f6ea node_82f2c402-&gt;node_b0ced719"},{"location":"guide/contributors/architecture/#internal-cli","title":"<code>cli.py</code>","text":"<p>This module contains all CLI-related things. Why does this file exist, and why not put this in <code>__main__</code>?</p> <p>We might be tempted to import things from <code>__main__</code> later, but that will cause problems; the code will get executed twice:</p> <ul> <li>When we run <code>python -m griffe</code>, Python will execute   <code>__main__.py</code> as a script. That means there won't be any   <code>griffe.__main__</code> in <code>sys.modules</code>.</li> <li>When you import <code>__main__</code> it will get executed again (as a module) because   there's no <code>griffe.__main__</code> in <code>sys.modules</code>.</li> </ul> G cluster_02ddc341 File: cli cluster_64094582 Class: _DebugInfo node_b214ae3f 51: __init__() node_b214ae3f-&gt;node_b214ae3f node_131e80df 69: _load_packages() node_ecd98efc 59: _print_data() node_8f90d8a2 331: dump() node_8f90d8a2-&gt;node_131e80df node_8f90d8a2-&gt;node_ecd98efc node_7c2ff0e9 130: get_parser() node_049ce58a 575: main() node_049ce58a-&gt;node_7c2ff0e9"},{"location":"guide/contributors/architecture/#internal-collections","title":"<code>collections.py</code>","text":"<p>This module contains collection-related classes, which are used throughout the API.</p> G cluster_4b3e6227 File: collections cluster_6e5f4a02 Class: LinesCollection node_b872079a 56: items() node_b872079a-&gt;node_b872079a node_2a25a29f 40: keys() node_2a25a29f-&gt;node_2a25a29f node_ddb8051c 48: values() node_ddb8051c-&gt;node_ddb8051c"},{"location":"guide/contributors/architecture/#internal-debug","title":"<code>debug.py</code>","text":"<p>This module is here to help users report bugs. It provides a function to print environment information, which is called from the public <code>griffe.debug</code> module (when called with <code>python -m griffe.debug</code>) or thanks to the <code>--debug-info</code> CLI flag.</p> G cluster_499b77a8 File: debug node_9fe4b666 80: _get_debug_info() node_79edfb80 65: _get_version() node_9fe4b666-&gt;node_79edfb80 node_54f2880d 54: _interpreter_name_version() node_9fe4b666-&gt;node_54f2880d node_afe92ae9 99: _print_debug_info() node_afe92ae9-&gt;node_9fe4b666"},{"location":"guide/contributors/architecture/#internal-diff","title":"<code>diff.py</code>","text":"<p>This module exports \"breaking changes\" related utilities. The logic here is to iterate on objects and their members recursively, to yield found breaking changes.</p> <p>The breakage class definitions might sound a bit verbose, but declaring them this way helps with (de)serialization, which we don't use yet, but could use in the future.</p> G cluster_c0c43630 File: diff cluster_fdeece00 Class: Breakage node_966728d1 221: _explain_github() node_2793f7dd 164: _format_new_value() node_966728d1-&gt;node_2793f7dd node_9ab98ad5 161: _format_old_value() node_966728d1-&gt;node_9ab98ad5 node_9c3fcfc0 153: _format_title() node_966728d1-&gt;node_9c3fcfc0 node_7b4926a3 201: _explain_markdown() node_7b4926a3-&gt;node_2793f7dd node_7b4926a3-&gt;node_9ab98ad5 node_046373ab 167: _explain_oneline() node_ffa5cb2e 156: _format_kind() node_046373ab-&gt;node_ffa5cb2e node_bf23d574 148: _format_location() node_046373ab-&gt;node_bf23d574 node_046373ab-&gt;node_2793f7dd node_046373ab-&gt;node_9ab98ad5 node_046373ab-&gt;node_9c3fcfc0 node_fba6b583 183: _explain_verbose() node_fba6b583-&gt;node_ffa5cb2e node_fba6b583-&gt;node_bf23d574 node_fba6b583-&gt;node_2793f7dd node_fba6b583-&gt;node_9ab98ad5 node_fba6b583-&gt;node_9c3fcfc0 node_054a7c58 522: _alias_incompatibilities() node_615b683f 559: _type_based_yield() node_054a7c58-&gt;node_615b683f node_d8d714f3 513: _attribute_incompatibilities() node_bb02acd9 425: _class_incompatibilities() node_b52170bc 538: _member_incompatibilities() node_bb02acd9-&gt;node_b52170bc node_f98dbeff 438: _function_incompatibilities() node_f80ff122 596: _returns_are_compatible() node_f98dbeff-&gt;node_f80ff122 node_b52170bc-&gt;node_615b683f node_615b683f-&gt;node_d8d714f3 node_615b683f-&gt;node_bb02acd9 node_615b683f-&gt;node_f98dbeff node_27bce346 620: find_breaking_changes() node_27bce346-&gt;node_b52170bc"},{"location":"guide/contributors/architecture/#internal-docstrings","title":"<code>docstrings</code>","text":"<p>These submodules define models and parsers for docstrings.</p>"},{"location":"guide/contributors/architecture/#internal-docstrings-google","title":"<code>google.py</code>","text":"<p>This module defines functions to parse Google-style docstrings into structured data.</p> G cluster_9786cc6e File: google node_d8b53663 513: _annotation_from_parent() node_26b54c60 482: _get_name_annotation_description() node_c6cf2bed 726: _is_empty_line() node_6fbeea39 266: _read_attributes_section() node_89d1cd71 83: _read_block_items() node_6fbeea39-&gt;node_89d1cd71 node_8df98372 147: _read_block() node_8df98372-&gt;node_c6cf2bed node_89d1cd71-&gt;node_c6cf2bed node_dd9768d8 469: _read_block_items_maybe() node_dd9768d8-&gt;node_8df98372 node_dd9768d8-&gt;node_89d1cd71 node_70bca1aa 345: _read_classes_section() node_70bca1aa-&gt;node_89d1cd71 node_bc28ac26 667: _read_examples_section() node_bc28ac26-&gt;node_c6cf2bed node_bc28ac26-&gt;node_8df98372 node_3857940b 308: _read_functions_section() node_3857940b-&gt;node_89d1cd71 node_cb12c1d6 382: _read_modules_section() node_cb12c1d6-&gt;node_89d1cd71 node_4dd764ae 255: _read_other_parameters_section() node_9e5cfd99 178: _read_parameters() node_4dd764ae-&gt;node_9e5cfd99 node_9e5cfd99-&gt;node_89d1cd71 node_61f1666a 245: _read_parameters_section() node_61f1666a-&gt;node_9e5cfd99 node_22c2427c 410: _read_raises_section() node_22c2427c-&gt;node_89d1cd71 node_1fbcf62b 622: _read_receives_section() node_1fbcf62b-&gt;node_d8b53663 node_1fbcf62b-&gt;node_26b54c60 node_1fbcf62b-&gt;node_dd9768d8 node_e307f162 532: _read_returns_section() node_e307f162-&gt;node_d8b53663 node_e307f162-&gt;node_26b54c60 node_e307f162-&gt;node_dd9768d8 node_7d455117 441: _read_warns_section() node_7d455117-&gt;node_89d1cd71 node_3c56e2ea 577: _read_yields_section() node_3c56e2ea-&gt;node_d8b53663 node_3c56e2ea-&gt;node_26b54c60 node_3c56e2ea-&gt;node_dd9768d8 node_c5ea9d5e 748: parse_google() node_c5ea9d5e-&gt;node_c6cf2bed node_c5ea9d5e-&gt;node_8df98372"},{"location":"guide/contributors/architecture/#internal-docstrings-models","title":"<code>models.py</code>","text":"<p>This module contains the models for storing docstrings structured data.</p> G cluster_299e3b0c File: models cluster_90a5dac4 Class: DocstringSection node_0698ffa8 202: as_dict() node_0698ffa8-&gt;node_0698ffa8"},{"location":"guide/contributors/architecture/#internal-docstrings-numpy","title":"<code>numpy.py</code>","text":"<p>This module defines functions to parse Numpy-style docstrings into structured data.</p> <p>Based on https://numpydoc.readthedocs.io/en/latest/format.html, it seems Numpydoc is a superset of RST. Since fully parsing RST is a non-goal of this project, some things are stripped from the Numpydoc specification.</p> <p>Rejected as non particularly Pythonic or useful as sections:</p> <ul> <li>See also: this section feels too subjective (specially crafted as a standard for Numpy itself),     and there are may ways to reference related items in a docstring, depending on the chosen markup.</li> </ul> <p>Rejected as naturally handled by the user-chosen markup:</p> <ul> <li>Warnings: this is just markup.</li> <li>Notes: again, just markup.</li> <li>References: again, just markup.</li> </ul> G cluster_fa53aa5d File: numpy node_073f3afc 760: _append_section() node_a3fde088 89: _is_dash_line() node_aac9d344 85: _is_empty_line() node_a3fde088-&gt;node_aac9d344 node_2a497cf6 560: _read_attributes_section() node_80fcce79 93: _read_block_items() node_2a497cf6-&gt;node_80fcce79 node_d44c0186 155: _read_block() node_d44c0186-&gt;node_a3fde088 node_d44c0186-&gt;node_aac9d344 node_80fcce79-&gt;node_a3fde088 node_80fcce79-&gt;node_aac9d344 node_f11eb95f 631: _read_classes_section() node_f11eb95f-&gt;node_80fcce79 node_3773acf3 327: _read_deprecated_section() node_3773acf3-&gt;node_80fcce79 node_e04aaa88 695: _read_examples_section() node_e04aaa88-&gt;node_aac9d344 node_e04aaa88-&gt;node_d44c0186 node_3ccb3ce0 599: _read_functions_section() node_3ccb3ce0-&gt;node_80fcce79 node_c10c3cda 663: _read_modules_section() node_c10c3cda-&gt;node_80fcce79 node_e5828660 305: _read_other_parameters_section() node_dedd03d0 217: _read_parameters() node_e5828660-&gt;node_dedd03d0 node_dedd03d0-&gt;node_80fcce79 node_cfa63884 290: _read_parameters_section() node_cfa63884-&gt;node_dedd03d0 node_5570f91d 510: _read_raises_section() node_5570f91d-&gt;node_80fcce79 node_947a4f0a 463: _read_receives_section() node_947a4f0a-&gt;node_80fcce79 node_692f53f5 353: _read_returns_section() node_692f53f5-&gt;node_80fcce79 node_8af27229 535: _read_warns_section() node_8af27229-&gt;node_80fcce79 node_03919a2c 412: _read_yields_section() node_03919a2c-&gt;node_80fcce79 node_2d32efe5 796: parse_numpy() node_2d32efe5-&gt;node_073f3afc node_2d32efe5-&gt;node_a3fde088 node_2d32efe5-&gt;node_aac9d344"},{"location":"guide/contributors/architecture/#internal-docstrings-parsers","title":"<code>parsers.py</code>","text":"<p>This module imports all the defined parsers and provides a generic function to parse docstrings.</p> G cluster_97a7960c File: parsers node_15d5972e 107: infer_docstring_style() node_5d39d0a1 239: parse() node_dab270e8 180: parse_auto() node_dab270e8-&gt;node_15d5972e node_dab270e8-&gt;node_5d39d0a1"},{"location":"guide/contributors/architecture/#internal-docstrings-sphinx","title":"<code>sphinx.py</code>","text":"<p>This module defines functions to parse Sphinx docstrings into structured data.</p> G cluster_dd9ade09 File: sphinx cluster_49e37146 Class: _FieldType node_c4d5e29c 49: matches() node_80f01524 437: _consolidate_continuation_lines() node_5bc06cc9 450: _consolidate_descriptive_type() node_cc4a5434 191: _determine_param_annotation() node_3614725c 184: _determine_param_default() node_1cf1d516 424: _parse_directive() node_1cf1d516-&gt;node_80f01524 node_2998b908 408: _parsed_values_to_sections() node_076745ae 454: _strip_blank_lines() node_2998b908-&gt;node_076745ae node_4194b2b7 256: _read_attribute() node_4194b2b7-&gt;node_1cf1d516 node_309af521 303: _read_attribute_type() node_309af521-&gt;node_5bc06cc9 node_309af521-&gt;node_1cf1d516 node_d95cf92f 333: _read_exception() node_d95cf92f-&gt;node_1cf1d516 node_6d4a2d5b 130: _read_parameter() node_6d4a2d5b-&gt;node_cc4a5434 node_6d4a2d5b-&gt;node_3614725c node_6d4a2d5b-&gt;node_1cf1d516 node_5f5ee1d9 226: _read_parameter_type() node_5f5ee1d9-&gt;node_5bc06cc9 node_5f5ee1d9-&gt;node_1cf1d516 node_3d6ff18b 354: _read_return() node_3d6ff18b-&gt;node_1cf1d516 node_718c1901 387: _read_return_type() node_718c1901-&gt;node_5bc06cc9 node_718c1901-&gt;node_1cf1d516 node_06534299 86: parse_sphinx() node_06534299-&gt;node_c4d5e29c node_06534299-&gt;node_2998b908"},{"location":"guide/contributors/architecture/#internal-docstrings-utils","title":"<code>utils.py</code>","text":"<p>This module contains utilities for docstrings parsers.</p>"},{"location":"guide/contributors/architecture/#internal-encoders","title":"<code>encoders.py</code>","text":"<p>This module contains data encoders/serializers and decoders/deserializers. We only support JSON for now, but might want to add more formats in the future.</p> G cluster_11fa322d File: encoders cluster_c11c28a9 Class: JSONEncoder node_dfa52031 48: __init__() node_dfa52031-&gt;node_dfa52031 node_4be8af18 125: _attach_parent_to_expr() node_efed57f6 135: _attach_parent_to_exprs() node_efed57f6-&gt;node_4be8af18 node_3ea6dd6f 211: _load_attribute() node_b60e5de5 85: _load_docstring() node_3ea6dd6f-&gt;node_b60e5de5 node_a3c77b81 174: _load_class() node_a3c77b81-&gt;node_efed57f6 node_ac2f7c2c 91: _load_decorators() node_a3c77b81-&gt;node_ac2f7c2c node_a3c77b81-&gt;node_b60e5de5 node_83f27c32 95: _load_expression() node_255df62b 197: _load_function() node_255df62b-&gt;node_ac2f7c2c node_255df62b-&gt;node_b60e5de5 node_8a35a7d2 159: _load_module() node_8a35a7d2-&gt;node_efed57f6 node_8a35a7d2-&gt;node_b60e5de5 node_a7f42804 115: _load_parameter() node_a7f42804-&gt;node_b60e5de5 node_2f1a0ea0 242: json_decoder() node_2f1a0ea0-&gt;node_83f27c32 node_2f1a0ea0-&gt;node_a7f42804"},{"location":"guide/contributors/architecture/#internal-enumerations","title":"<code>enumerations.py</code>","text":"<p>This module contains all the enumerations of the package.</p>"},{"location":"guide/contributors/architecture/#internal-exceptions","title":"<code>exceptions.py</code>","text":"<p>This module contains all the exceptions specific to Griffe.</p>"},{"location":"guide/contributors/architecture/#internal-expressions","title":"<code>expressions.py</code>","text":"<p>This module contains the data classes that represent resolvable names and expressions. First we declare data classes for each kind of expression, mostly corresponding to Python's AST nodes. Then we declare builder methods, that iterate AST nodes and build the corresponding data classes, and two utilities <code>_yield</code> and <code>_join</code> to help iterate on expressions. Finally we declare a few public helpers to safely get expressions from AST nodes in different scenarios.</p> G cluster_814059af File: expressions cluster_3d93ed6d Class: Expr cluster_ae5ed1e6 Class: ExprAttribute cluster_7124d15a Class: ExprBinOp cluster_e44577c5 Class: ExprBoolOp cluster_39c1ab50 Class: ExprCall cluster_42823505 Class: ExprCompare cluster_f10c763f Class: ExprComprehension cluster_3e65b1e6 Class: ExprDict cluster_971329ca Class: ExprDictComp cluster_6bc038d8 Class: ExprExtSlice cluster_083fc574 Class: ExprFormatted cluster_e35ac65c Class: ExprGeneratorExp cluster_a940a9d3 Class: ExprIfExp cluster_bc553c85 Class: ExprJoinedStr cluster_0d99c43d Class: ExprKeyword cluster_75ebe6e9 Class: ExprVarPositional cluster_fc21523a Class: ExprVarKeyword cluster_47e7ff22 Class: ExprLambda cluster_3f0cb930 Class: ExprList cluster_1b89c72a Class: ExprListComp cluster_bec6db5b Class: ExprNamedExpr cluster_2a9baec1 Class: ExprSet cluster_b2a42694 Class: ExprSetComp cluster_d35000ca Class: ExprSlice cluster_3ab5ec22 Class: ExprSubscript cluster_8e38bd23 Class: ExprTuple cluster_99a0da98 Class: ExprUnaryOp cluster_4bfffedd Class: ExprYield cluster_f220f4f0 Class: ExprYieldFrom node_271965d6 98: __iter__() node_a5a5339d 102: iterate() node_271965d6-&gt;node_a5a5339d node_233acdd3 95: __str__() node_233acdd3-&gt;node_a5a5339d node_0e41af31 131: as_dict() node_c77b7d29 68: _expr_as_dict() node_0e41af31-&gt;node_c77b7d29 node_8d79a3fa 201: append() node_8d79a3fa-&gt;node_8d79a3fa node_63a9682d 193: iterate() node_d7bf0140 41: _join() node_63a9682d-&gt;node_d7bf0140 node_f0ab2ff1 246: iterate() node_2b237422 29: _yield() node_f0ab2ff1-&gt;node_2b237422 node_8d563027 262: iterate() node_8d563027-&gt;node_d7bf0140 node_09084af3 281: iterate() node_09084af3-&gt;node_d7bf0140 node_09084af3-&gt;node_2b237422 node_a1909528 300: iterate() node_a1909528-&gt;node_d7bf0140 node_a1909528-&gt;node_2b237422 node_a521f87c 320: iterate() node_a521f87c-&gt;node_d7bf0140 node_a521f87c-&gt;node_2b237422 node_d0292f67 358: iterate() node_d0292f67-&gt;node_d7bf0140 node_9456b8c3 380: iterate() node_9456b8c3-&gt;node_d7bf0140 node_9456b8c3-&gt;node_2b237422 node_261ecb91 397: iterate() node_261ecb91-&gt;node_d7bf0140 node_e70dad0e 409: iterate() node_e70dad0e-&gt;node_2b237422 node_319ccac8 425: iterate() node_319ccac8-&gt;node_d7bf0140 node_319ccac8-&gt;node_2b237422 node_e1f9bbe6 443: iterate() node_e1f9bbe6-&gt;node_2b237422 node_300a39b0 459: iterate() node_300a39b0-&gt;node_d7bf0140 node_03307eb2 500: iterate() node_03307eb2-&gt;node_2b237422 node_8b94fe07 542: iterate() node_8b94fe07-&gt;node_2b237422 node_32ae72d9 583: iterate() node_32ae72d9-&gt;node_d7bf0140 node_2b161b32 599: iterate() node_2b161b32-&gt;node_d7bf0140 node_2b161b32-&gt;node_2b237422 node_97f38800 704: iterate() node_97f38800-&gt;node_2b237422 node_a2207f73 735: iterate() node_a2207f73-&gt;node_d7bf0140 node_182d6bc8 751: iterate() node_182d6bc8-&gt;node_d7bf0140 node_182d6bc8-&gt;node_2b237422 node_388a97a0 771: iterate() node_388a97a0-&gt;node_2b237422 node_9876b52f 799: _to_binop() node_9876b52f-&gt;node_9876b52f node_b95969c5 792: iterate() node_b95969c5-&gt;node_2b237422 node_47c7bfec 814: modernize() node_47c7bfec-&gt;node_9876b52f node_47c7bfec-&gt;node_47c7bfec node_211cc147 850: iterate() node_211cc147-&gt;node_d7bf0140 node_b5713263 876: iterate() node_b5713263-&gt;node_2b237422 node_3592d1e8 527: iterate() node_3592d1e8-&gt;node_2b237422 node_7adb08c3 514: iterate() node_7adb08c3-&gt;node_2b237422 node_1e4e807d 889: iterate() node_1e4e807d-&gt;node_2b237422 node_5e39a71e 904: iterate() node_5e39a71e-&gt;node_2b237422 node_b80697e0 1233: _build() node_69625cba 951: _build_attribute() node_69625cba-&gt;node_8d79a3fa node_69625cba-&gt;node_b80697e0 node_92b125d4 963: _build_binop() node_92b125d4-&gt;node_b80697e0 node_48b066fd 971: _build_boolop() node_48b066fd-&gt;node_b80697e0 node_dfb9082f 978: _build_call() node_dfb9082f-&gt;node_b80697e0 node_5cf64403 985: _build_compare() node_5cf64403-&gt;node_b80697e0 node_b6655219 993: _build_comprehension() node_b6655219-&gt;node_b80697e0 node_2e67114b 1002: _build_constant() node_2e67114b-&gt;node_b80697e0 node_3b6ca1a0 1041: _build_dict() node_3b6ca1a0-&gt;node_b80697e0 node_7f9304ee 1048: _build_dictcomp() node_7f9304ee-&gt;node_b80697e0 node_4e222c40 1056: _build_formatted() node_4e222c40-&gt;node_b80697e0 node_95f37bd0 1066: _build_generatorexp() node_95f37bd0-&gt;node_b80697e0 node_cbedcca0 1073: _build_ifexp() node_cbedcca0-&gt;node_b80697e0 node_09935a9d 1081: _build_joinedstr() node_09935a9d-&gt;node_b80697e0 node_fdc2ac63 1091: _build_keyword() node_fdc2ac63-&gt;node_b80697e0 node_571b860d 1097: _build_lambda() node_571b860d-&gt;node_b80697e0 node_d3442872 1265: safe_get_expression() node_571b860d-&gt;node_d3442872 node_ec7ed429 1114: _build_list() node_ec7ed429-&gt;node_b80697e0 node_863995bf 1118: _build_listcomp() node_863995bf-&gt;node_b80697e0 node_4531b783 1126: _build_named_expr() node_4531b783-&gt;node_b80697e0 node_515a0489 1130: _build_set() node_515a0489-&gt;node_b80697e0 node_d9d4d463 1134: _build_setcomp() node_d9d4d463-&gt;node_b80697e0 node_19491950 1138: _build_slice() node_19491950-&gt;node_b80697e0 node_dd577884 1146: _build_starred() node_dd577884-&gt;node_b80697e0 node_0e27c15b 1150: _build_subscript() node_0e27c15b-&gt;node_b80697e0 node_597ddf7f 1179: _build_tuple() node_597ddf7f-&gt;node_b80697e0 node_5927396f 1189: _build_unaryop() node_5927396f-&gt;node_b80697e0 node_97ff7abf 1193: _build_yield() node_97ff7abf-&gt;node_b80697e0 node_7c0c26be 1197: _build_yield_from() node_7c0c26be-&gt;node_b80697e0 node_e9ca35f6 57: _field_as_dict() node_c77b7d29-&gt;node_e9ca35f6 node_e9ca35f6-&gt;node_e9ca35f6 node_d7bf0140-&gt;node_2b237422 node_2b237422-&gt;node_2b237422 node_e336731c 1237: get_expression() node_e336731c-&gt;node_b80697e0 node_d3442872-&gt;node_e336731c"},{"location":"guide/contributors/architecture/#internal-extensions","title":"<code>extensions</code>","text":"<p>These submodules contain our extension system, as well as built-in extensions.</p>"},{"location":"guide/contributors/architecture/#internal-extensions-base","title":"<code>base.py</code>","text":"<p>This module contains the base class for extensions and the functions to load them.</p> G cluster_82195835 File: base cluster_c1543b07 Class: Extension cluster_b6949157 Class: Extensions node_6fe67f33 56: generic_inspect() node_185bfaf9 48: inspect() node_6fe67f33-&gt;node_185bfaf9 node_9424d287 39: generic_visit() node_3e211a15 31: visit() node_9424d287-&gt;node_3e211a15 node_5fc2acd6 287: __init__() node_f1baaa5e 296: add() node_5fc2acd6-&gt;node_f1baaa5e node_0d576dd4 333: _load_extension() node_dce6cd24 322: _load_extension_path() node_0d576dd4-&gt;node_dce6cd24 node_27c16626 424: load_extensions() node_27c16626-&gt;node_5fc2acd6 node_27c16626-&gt;node_f1baaa5e node_27c16626-&gt;node_0d576dd4"},{"location":"guide/contributors/architecture/#internal-extensions-dataclasses","title":"<code>dataclasses.py</code>","text":"<p>Built-in extension adding support for dataclasses.</p> <p>This extension re-creates <code>__init__</code> methods of dataclasses during static analysis.</p> G cluster_ef5d9d5c File: dataclasses cluster_2a7864c1 Class: DataclassesExtension node_ccba5714 227: on_package_loaded() node_fe0ce2ac 203: _apply_recursively() node_ccba5714-&gt;node_fe0ce2ac node_fe0ce2ac-&gt;node_fe0ce2ac node_7e5c8f81 195: _del_members_annotated_as_initvar() node_fe0ce2ac-&gt;node_7e5c8f81 node_8f20660b 157: _set_dataclass_init() node_fe0ce2ac-&gt;node_8f20660b node_60d75fb0 49: _dataclass_arguments() node_3258a07b 25: _dataclass_decorator() node_60d75fb0-&gt;node_3258a07b node_2b9b5ae2 32: _expr_args() node_60d75fb0-&gt;node_2b9b5ae2 node_cb18f541 66: _dataclass_parameters() node_cb18f541-&gt;node_60d75fb0 node_165f0da7 55: _field_arguments() node_cb18f541-&gt;node_165f0da7 node_2b9b5ae2-&gt;node_2b9b5ae2 node_165f0da7-&gt;node_2b9b5ae2 node_4ba3f349 139: _reorder_parameters() node_8f20660b-&gt;node_3258a07b node_8f20660b-&gt;node_cb18f541 node_8f20660b-&gt;node_4ba3f349"},{"location":"guide/contributors/architecture/#internal-finder","title":"<code>finder.py</code>","text":"<p>This module contains the code allowing to find modules.</p> <p>Note: It might be possible to replace a good part of this module's logic with utilities from <code>importlib</code> (however the util in question is private):</p> <pre><code>&gt;&gt;&gt; from importlib.util import _find_spec\n&gt;&gt;&gt; _find_spec(\"griffe.agents\", _find_spec(\"griffe\", None).submodule_search_locations)\nModuleSpec(\n    name='griffe.agents',\n    loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7fa5f34e8110&gt;,\n    origin='/media/data/dev/griffe/src/griffe/agents/__init__.py',\n    submodule_search_locations=['/media/data/dev/griffe/src/griffe/agents'],\n)\n</code></pre> G cluster_c47d2c57 File: finder cluster_175244d2 Class: ModuleFinder node_213ce6f9 102: __init__() node_66a7b88f 386: _extend_from_pth_files() node_213ce6f9-&gt;node_66a7b88f node_3347e84c 119: append_search_path() node_213ce6f9-&gt;node_3347e84c node_f1d63a29 374: _contents() node_66a7b88f-&gt;node_f1d63a29 node_66a7b88f-&gt;node_3347e84c node_e3ac4142 442: _handle_pth_file() node_66a7b88f-&gt;node_e3ac4142 node_f3af3edf 395: _filter_py_modules() node_07480ff1 359: _module_name_path() node_ff0f3ede 403: _top_module_name() node_d81701ba 132: insert_search_path() node_ff0f3ede-&gt;node_d81701ba node_55c75bd6 229: find_package() node_55c75bd6-&gt;node_f1d63a29 node_1accf43c 427: _is_pkg_style_namespace() node_55c75bd6-&gt;node_1accf43c node_450ca6b9 146: find_spec() node_450ca6b9-&gt;node_07480ff1 node_450ca6b9-&gt;node_ff0f3ede node_450ca6b9-&gt;node_55c75bd6 node_abfd499f 276: iter_submodules() node_abfd499f-&gt;node_f3af3edf node_abfd499f-&gt;node_abfd499f node_6cfe33a0 342: submodules() node_6cfe33a0-&gt;node_abfd499f node_ffcb69bd 472: _handle_editable_module() node_51484693 51: _match_pattern() node_ffcb69bd-&gt;node_51484693 node_e3ac4142-&gt;node_ffcb69bd"},{"location":"guide/contributors/architecture/#internal-git","title":"<code>git.py</code>","text":"<p>This module contains Git utilities, used by our <code>load_git</code> function, which in turn is used to load the API for different snapshots of a Git repository and find breaking changes between them.</p> G cluster_2fd34914 File: git node_a6908766 25: _normalize() node_9d1fa099 31: assert_git_repo() node_c6f0646f 102: tmp_worktree() node_c6f0646f-&gt;node_a6908766 node_c6f0646f-&gt;node_9d1fa099"},{"location":"guide/contributors/architecture/#internal-importer","title":"<code>importer.py</code>","text":"<p>This module contains utilities to dynamically import objects. These utilities are used by our <code>Inspector</code> to dynamically import objects specified as Python paths, like <code>package.module.Class.method</code>.</p> G cluster_cab4f24a File: importer node_a1f5ef4b 17: _error_details() node_044b596b 43: dynamic_import() node_044b596b-&gt;node_a1f5ef4b node_bc11f0a1 22: sys_path() node_044b596b-&gt;node_bc11f0a1"},{"location":"guide/contributors/architecture/#internal-loader","title":"<code>loader.py</code>","text":"<p>This module contains all the logic for loading API data from sources or compiled modules.</p> G cluster_6c40e375 File: loader cluster_9914ad1a Class: GriffeLoader node_2ead8928 52: __init__() node_2f89af12 627: _create_module() node_e4dcd0b7 712: _expand_wildcard() node_307642c8 682: _get_or_create_parent_module() node_307642c8-&gt;node_2f89af12 node_5aa716e1 655: _inspect_module() node_4674d66f 528: _load_module() node_c3aa3b4a 547: _load_module_path() node_4674d66f-&gt;node_c3aa3b4a node_c3aa3b4a-&gt;node_2f89af12 node_c3aa3b4a-&gt;node_5aa716e1 node_1a38623c 572: _load_submodules() node_c3aa3b4a-&gt;node_1a38623c node_e40b42df 635: _visit_module() node_c3aa3b4a-&gt;node_e40b42df node_d226ad06 513: _load_package() node_d226ad06-&gt;node_4674d66f node_23e2f435 305: expand_wildcards() node_d226ad06-&gt;node_23e2f435 node_821b0706 576: _load_submodule() node_821b0706-&gt;node_307642c8 node_821b0706-&gt;node_4674d66f node_1a38623c-&gt;node_821b0706 node_2fa65678 192: _post_load() node_252ed8a3 264: expand_exports() node_2fa65678-&gt;node_252ed8a3 node_2fa65678-&gt;node_23e2f435 node_252ed8a3-&gt;node_252ed8a3 node_23e2f435-&gt;node_e4dcd0b7 node_23e2f435-&gt;node_23e2f435 node_c95e4e23 100: load() node_23e2f435-&gt;node_c95e4e23 node_c95e4e23-&gt;node_5aa716e1 node_c95e4e23-&gt;node_d226ad06 node_c95e4e23-&gt;node_2fa65678 node_99815b2b 208: resolve_aliases() node_99815b2b-&gt;node_23e2f435 node_f9bc7082 424: resolve_module_aliases() node_99815b2b-&gt;node_f9bc7082 node_f9bc7082-&gt;node_c95e4e23 node_f9bc7082-&gt;node_f9bc7082 node_7121f1d8 721: load() node_7121f1d8-&gt;node_2ead8928 node_7121f1d8-&gt;node_c95e4e23 node_7121f1d8-&gt;node_99815b2b node_75477a9d 826: load_git() node_75477a9d-&gt;node_7121f1d8 node_1d88d1c4 911: load_pypi() node_1d88d1c4-&gt;node_7121f1d8"},{"location":"guide/contributors/architecture/#internal-logger","title":"<code>logger.py</code>","text":"<p>This module contains the logger used throughout Griffe. The logger is actually a wrapper around the standard Python logger. We wrap it so that it is easier for other downstream libraries to patch it. For example, mkdocstrings-python patches the logger to relocate it as a child of <code>mkdocs.plugins</code> so that it fits in the MkDocs logging configuration.</p> <p>We use a single, global logger because our public API is exposed in a single module, <code>griffe</code>. Extensions however should use their own logger, which is why we provide the <code>get_logger</code> function.</p> G cluster_10e4a181 File: logger cluster_73101194 Class: Logger node_cbe3ae79 0: (global)() node_af9a069d 43: _get() node_cbe3ae79-&gt;node_af9a069d node_55ee66f7 49: _patch_loggers() node_2917dddb 93: get_logger() node_2917dddb-&gt;node_af9a069d node_eaa320fb 105: patch_loggers() node_eaa320fb-&gt;node_55ee66f7"},{"location":"guide/contributors/architecture/#internal-merger","title":"<code>merger.py</code>","text":"<p>This module contains utilities to merge stubs data and concrete data.</p> G cluster_877f103f File: merger node_54c9de9a 35: _merge_attribute_stubs() node_9b9333a2 42: _merge_stubs_docstring() node_54c9de9a-&gt;node_9b9333a2 node_800f16f2 21: _merge_class_stubs() node_800f16f2-&gt;node_9b9333a2 node_32b464a6 55: _merge_stubs_members() node_800f16f2-&gt;node_32b464a6 node_bbe9b93f 47: _merge_stubs_overloads() node_800f16f2-&gt;node_bbe9b93f node_3b3922d8 27: _merge_function_stubs() node_3b3922d8-&gt;node_9b9333a2 node_88b6dac3 15: _merge_module_stubs() node_88b6dac3-&gt;node_9b9333a2 node_88b6dac3-&gt;node_32b464a6 node_88b6dac3-&gt;node_bbe9b93f node_32b464a6-&gt;node_54c9de9a node_32b464a6-&gt;node_3b3922d8 node_f89f397e 96: merge_stubs() node_f89f397e-&gt;node_88b6dac3"},{"location":"guide/contributors/architecture/#internal-mixins","title":"<code>mixins.py</code>","text":"<p>This module contains some mixins classes that hold shared methods of the different kinds of objects, and aliases.</p> G cluster_092f0baf File: mixins cluster_72063176 Class: GetMembersMixin cluster_c2b5251c Class: DelMembersMixin cluster_56eb13f8 Class: SetMembersMixin node_4b407eb9 97: __delitem__() node_2652af16 22: _get_parts() node_4b407eb9-&gt;node_2652af16 node_b3b1c760 124: del_member() node_b3b1c760-&gt;node_b3b1c760 node_b3b1c760-&gt;node_2652af16 node_a9cedfb1 42: __getitem__() node_a9cedfb1-&gt;node_2652af16 node_859f8773 64: get_member() node_859f8773-&gt;node_859f8773 node_859f8773-&gt;node_2652af16 node_23b04b28 157: __setitem__() node_23b04b28-&gt;node_2652af16 node_c9991783 183: set_member() node_c9991783-&gt;node_c9991783 node_c9991783-&gt;node_2652af16"},{"location":"guide/contributors/architecture/#internal-models","title":"<code>models.py</code>","text":"<p>This module contains our models definitions, to represent Python objects (and other aspects of Python APIs)... in Python.</p> G cluster_9c5ac437 File: models cluster_a5e7e92c Class: Docstring cluster_c70fc6a3 Class: Parameter cluster_84afecb9 Class: Parameters cluster_5243e851 Class: Object cluster_a458c52a Class: Alias cluster_81c23243 Class: Class cluster_de1715fa Class: Function node_1809d88c 1026: __init__() node_dd202149 1760: _update_target_aliases() node_1809d88c-&gt;node_dd202149 node_50b6ab3d 1744: _resolve_target() node_ca0ce061 1711: resolve_target() node_50b6ab3d-&gt;node_ca0ce061 node_8711b4a6 1203: as_json() node_8711b4a6-&gt;node_8711b4a6 node_8f8df1e8 1392: filter_members() node_8f8df1e8-&gt;node_8f8df1e8 node_7af15b36 1379: has_labels() node_7af15b36-&gt;node_7af15b36 node_fee4aa17 1181: inherited_members() node_fee4aa17-&gt;node_1809d88c node_c59562e9 1310: is_kind() node_c59562e9-&gt;node_c59562e9 node_8550f660 1161: members() node_8550f660-&gt;node_1809d88c node_08583628 1142: parent() node_08583628-&gt;node_dd202149 node_351e06bb 1501: resolve() node_351e06bb-&gt;node_351e06bb node_fd95e5ab 1662: target() node_fd95e5ab-&gt;node_ca0ce061 node_8ee69427 2002: _mro() node_8ee69427-&gt;node_8ee69427 node_f9cd7c3f 2013: mro() node_f9cd7c3f-&gt;node_8ee69427 node_8a6e5ae9 1967: parameters() node_fbaa3e06 297: __init__() node_8a6e5ae9-&gt;node_fbaa3e06 node_386a7570 154: parse() node_165b1ddf 150: parsed() node_165b1ddf-&gt;node_386a7570 node_70b3e8a4 2043: __init__() node_70b3e8a4-&gt;node_fbaa3e06 node_7c71fd8c 577: inherited_members() node_7c71fd8c-&gt;node_1809d88c node_9fd95821 931: resolve() node_9fd95821-&gt;node_9fd95821 node_c4756bcf 263: as_dict() node_c4756bcf-&gt;node_c4756bcf"},{"location":"guide/contributors/architecture/#internal-stats","title":"<code>stats.py</code>","text":"<p>This module contains utilities to compute loading statistics, like time spent visiting modules statically or dynamically.</p> G cluster_fd823731 File: stats cluster_ad2636f8 Class: Stats node_160ae4ad 20: __init__() node_784edbbd 73: _itercount() node_160ae4ad-&gt;node_784edbbd node_784edbbd-&gt;node_784edbbd"},{"location":"guide/contributors/architecture/#internal-tests","title":"<code>tests.py</code>","text":"<p>This module contains helpers. They simplify programmatic use of Griffe, for example to load data from strings or to create temporary packages. They are particularly useful for our own tests suite.</p> G cluster_42e31945 File: tests node_b29a329c 397: module_vtree() node_161eb511 354: vtree() node_b29a329c-&gt;node_161eb511 node_415acde2 303: temporary_inspected_module() node_bc5d5d74 54: temporary_pyfile() node_415acde2-&gt;node_bc5d5d74 node_5605d4b2 186: temporary_inspected_package() node_3bada60c 72: temporary_pypackage() node_5605d4b2-&gt;node_3bada60c node_32a4aeba 257: temporary_visited_module() node_32a4aeba-&gt;node_bc5d5d74 node_485245ef 121: temporary_visited_package() node_485245ef-&gt;node_3bada60c"},{"location":"guide/contributors/commands/","title":"Management commands","text":"<p>The entry-point to run commands to manage the project is our Python <code>make</code> script, located in the <code>scripts</code> folder. You can either call it directly with <code>./scripts/make</code>, or you can use direnv to add the script to your command line path. Once direnv is installed and hooked into your shell, allow it once for this directory with <code>direnv allow</code>. Now you can directly call the Python script with <code>make</code>. The <code>Makefile</code> is just here to provide auto-completion.</p> <p>Try typing <code>make</code> or <code>make help</code> to show the available commands.</p> <pre><code>$ make\nAvailable commands\n  help                  Print this help. Add task name to print help.\n  setup                 Setup all virtual environments (install dependencies).\n  run                   Run a command in the default virtual environment.\n  multirun              Run a command for all configured Python versions.\n  allrun                Run a command in all virtual environments.\n  3.x                   Run a command in the virtual environment for Python 3.x.\n  clean                 Delete build artifacts and cache files.\n  vscode                Configure VSCode to work on this project.\n</code></pre>"},{"location":"guide/contributors/commands/#commands","title":"Commands","text":"<p>Commands are always available: they don't require any Python dependency to be installed.</p> <p></p>"},{"location":"guide/contributors/commands/#setup","title":"<code>setup</code>","text":"<p>Setup all virtual environments (install dependencies).</p> <pre><code>make setup\n</code></pre> <p>The <code>setup</code> command installs all the Python dependencies required to work on the project. Virtual environments and dependencies are managed by uv. Development dependencies are listed in the <code>devdeps.txt</code> file.</p> <p>The command will create a virtual environment in the <code>.venv</code> folder, as well as one virtual environment per supported Python version in the <code>.venvs/3.x</code> folders. Supported Python versions are listed in the <code>scripts/make</code> file, and can be overridden by setting the <code>PYTHON_VERSIONS</code> environment variable.</p> <p>If you cloned the repository on the same file-system as uv's cache, everything will be hard linked from the cache, so don't worry about wasting disk space.</p> <p>Once dependencies are installed, try running <code>make</code> or <code>make help</code> again, to show additional tasks.</p> <pre><code>$ make\nAvailable commands\n  help                  Print this help. Add task name to print help.\n  setup                 Setup all virtual environments (install dependencies).\n  run                   Run a command in the default virtual environment.\n  multirun              Run a command for all configured Python versions.\n  allrun                Run a command in all virtual environments.\n  3.x                   Run a command in the virtual environment for Python 3.x.\n  clean                 Delete build artifacts and cache files.\n  vscode                Configure VSCode to work on this project.\n\nAvailable tasks\n  build                 Build source and wheel distributions.\n  changelog             Update the changelog in-place with latest commits.\n  check                 Check it all!\n  check-api             Check for API breaking changes.\n  check-docs            Check if the documentation builds correctly.\n  check-quality         Check the code quality.\n  check-types           Check that the code is correctly typed.\n  coverage              Report coverage as text and HTML.\n  docs                  Serve the documentation (localhost:8000).\n  docs-deploy           Deploy the documentation to GitHub pages.\n  format                Run formatting tools on the code.\n  fuzz                  Fuzz Griffe against generated Python code.\n  publish               Publish source and wheel distributions to PyPI.\n  release               Release a new version of the project.\n  test                  Run the test suite.\n</code></pre> <p>These tasks are written using duty (a task runner), and located in the <code>duties.py</code> module in the repository root.</p> <p>Some of these tasks will run in the default virtual environment (<code>.venv</code>), while others will run in all the supported Python version environments (<code>.venvs/3.x</code>).</p> <p></p>"},{"location":"guide/contributors/commands/#help","title":"<code>help</code>","text":"<p>Print this help. Add task name to print help.</p> <pre><code>make help [TASK]\n</code></pre> <p>When the Python dependencies are not installed, this command just print the available commands. When the Python dependencies are installed, duty is available so the command can also print the available tasks.</p> <p>If you add a task name after the command, it will print help for this specific task.</p> <p></p>"},{"location":"guide/contributors/commands/#run","title":"<code>run</code>","text":"<p>Run a command in the default virtual environment.</p> <pre><code>make run &lt;CMD&gt; [ARG...]\n</code></pre> <p>This command runs an arbitrary command inside the default virtual environment (<code>.venv</code>). It is especially useful to start a Python interpreter without having to first activate the virtual environment: <code>make run python</code>.</p> <p></p>"},{"location":"guide/contributors/commands/#multirun","title":"<code>multirun</code>","text":"<p>Run a command for all configured Python versions.</p> <pre><code>make multirun &lt;CMD&gt; [ARG...]\n</code></pre> <p>This command runs an arbitrary command inside the environments for all supported Python versions. It is especially useful for running tests.</p> <p></p>"},{"location":"guide/contributors/commands/#allrun","title":"<code>allrun</code>","text":"<p>Run a command in all virtual environments.</p> <pre><code>make multirun &lt;CMD&gt; [ARG...]\n</code></pre> <p>This command runs an arbitrary command inside the default environment, as well as the environments for all supported Python versions.</p> <p>This command is especially useful to install, remove or update dependencies in all environments at once. For example, if you want to install a dependency in editable mode, from a local source:</p> <pre><code>make allrun uv pip install -e ../other-project\n</code></pre> <p></p>"},{"location":"guide/contributors/commands/#3x","title":"<code>3.x</code>","text":"<p>Run a command in the virtual environment for Python 3.x.</p> <pre><code>make 3.x &lt;CMD&gt; [ARG...]\n</code></pre> <p>This command runs an arbitrary command inside the environment of the selected Python version. It can be useful if you want to run a task that usually runs in the default environment with a different Python version.</p> <p></p>"},{"location":"guide/contributors/commands/#clean","title":"<code>clean</code>","text":"<p>Delete build artifacts and cache files.</p> <pre><code>make clean\n</code></pre> <p>This command simply deletes build artifacts and cache files and folders such as <code>build/</code>, <code>.cache/</code>, etc.. The virtual environments (<code>.venv</code> and <code>.venvs/*</code>) are not removed by this command.</p> <p></p>"},{"location":"guide/contributors/commands/#vscode","title":"<code>vscode</code>","text":"<p>Configure VSCode to work on this project.</p> <pre><code>make vscode\n</code></pre> <p>This command configures the VSCode editor by copying the following files into the <code>.vscode</code> directory:</p> <ul> <li><code>launch.json</code>, for run configurations (to run debug sessions)</li> <li><code>settings.json</code>, for various editor settings like linting tools and their configuration</li> <li><code>tasks.json</code>, for running tasks directly from VSCode's interface</li> </ul> <p>Warning:     These files will be overwritten every time the command is run.</p>"},{"location":"guide/contributors/commands/#tasks","title":"Tasks","text":"<p>Tasks require the Python dependencies to be installed. They use various tools and libraries to assert code quality, run tests, serve the documentation locally, or build and publish distributions of your project. There are multiple ways to run tasks:</p> <ul> <li><code>make TASK</code>, the main, configured way to run a task</li> <li><code>make run duty TASK</code>, to run a task in the default environment</li> <li><code>make multirun duty TASK</code>, to run a task on all supported Python versions</li> <li><code>make allrun duty TASK</code>, to run a task in all environments</li> <li><code>make 3.x duty TASK</code>, to run a task on a specific Python version</li> </ul> <p></p>"},{"location":"guide/contributors/commands/#build","title":"<code>build</code>","text":"<p>Build source and wheel distributions.</p> <pre><code>make build\n</code></pre> <p>Build distributions of your project for the current version. The build task uses the <code>build</code> tool to build <code>.tar.gz</code> (Gzipped sources archive) and <code>.whl</code> (wheel) distributions of your project in the <code>dist</code> directory.</p> <p></p>"},{"location":"guide/contributors/commands/#changelog","title":"<code>changelog</code>","text":"<p>Update the changelog in-place with latest commits.</p> <pre><code>make changelog [bump=VERSION]\n</code></pre> <p>Update the changelog in-place. The changelog task uses git-changelog to read Git commits and parse their messages to infer the new version based on our commit message convention.</p> <p>The new version will be based on the types of the latest commits, unless a specific version is provided with the <code>bump</code> parameter.</p> <p>If the group of commits contains only bug fixes (<code>fix:</code>) and/or commits that are not interesting for users (<code>chore:</code>, <code>style:</code>, etc.), the changelog will gain a new patch entry. It means that the new suggested version will be a patch bump of the previous one: <code>0.1.1</code> becomes <code>0.1.2</code>.</p> <p>If the group of commits contains at least one feature (<code>feat:</code>), the changelog will gain a new minor entry. It means that the new suggested version will be a minor bump of the previous one: <code>0.1.1</code> becomes <code>0.2.0</code>.</p> <p>If there is, in the group of commits, a commit whose body contains something like <code>Breaking change</code>, the changelog will gain a new major entry, unless the version is still an \"alpha\" version (starting with 0), in which case it gains a minor entry. It means that the new suggested version will be a major bump of the previous one: <code>1.2.1</code> becomes <code>2.0.0</code>, but <code>0.2.1</code> is only bumped up to <code>0.3.0</code>. Moving from \"alpha\" status to \"beta\" or \"stable\" status is a choice left to the developers, when they consider the package is ready for it.</p> <p>The configuration for git-changelog is located at <code>config/git-changelog.toml</code>.</p> <p>Parameters:</p> <ul> <li> <code>bump</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Bump option passed to git-changelog.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#check","title":"<code>check</code>","text":"<p>Check it all!</p> <pre><code>make check\n</code></pre> <p>Composite command to run all the check commands:</p> <ul> <li><code>check-quality</code>, to check the code quality on all Python versions</li> <li><code>check-types</code>, to type-check the code on all Python versions</li> <li><code>check-docs</code>, to check the docs on all Python versions</li> <li><code>check-api</code>, to check for API breaking changes</li> </ul> <p></p>"},{"location":"guide/contributors/commands/#check-api","title":"<code>check-api</code>","text":"<p>Check for API breaking changes.</p> <pre><code>make check-api\n</code></pre> <p>Compare the current code to the latest version (Git tag) using Griffe, to search for API breaking changes since latest version. It is set to allow failures, and is more about providing information than preventing CI to pass.</p> <p>Parameters:</p> <ul> <li> <code>*cli_args</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Additional Griffe CLI arguments.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#check-docs","title":"<code>check-docs</code>","text":"<p>Check if the documentation builds correctly.</p> <pre><code>make check-docs\n</code></pre> <p>Build the docs with MkDocs in strict mode.</p> <p>The configuration for MkDocs is located at <code>mkdocs.yml</code>.</p> <p>This task builds the documentation with strict behavior: any warning will be considered an error and the command will fail. The warnings/errors can be about incorrect docstring format, or invalid cross-references.</p> <p></p>"},{"location":"guide/contributors/commands/#check-quality","title":"<code>check-quality</code>","text":"<p>Check the code quality.</p> <pre><code>make check-quality\n</code></pre> <p>Check the code quality using Ruff.</p> <p>The configuration for Ruff is located at <code>config/ruff.toml</code>. In this file, you can deactivate rules or activate others to customize your analysis. Rule identifiers always start with one or more capital letters, like <code>D</code>, <code>S</code> or <code>BLK</code>, then followed by a number.</p> <p>You can ignore a rule on a specific code line by appending a <code>noqa</code> comment (\"no quality analysis/assurance\"):</p> src/your_package/module.py<pre><code>print(\"a code line that triggers a Ruff warning\")  # noqa: ID\n</code></pre> <p>...where ID is the identifier of the rule you want to ignore for this line.</p> <p>Example:     src/your_package/module.py<pre><code>import subprocess\n</code></pre></p> <pre><code>```console\n$ make check-quality\n\u2717 Checking code quality (1)\n&gt; ruff check --config=config/ruff.toml src/ tests/ scripts/\nsrc/your_package/module.py:2:1: S404 Consider possible security implications associated with subprocess module.\n```\n\nNow add a comment to ignore this warning.\n\n```python title=\"src/your_package/module.py\"\nimport subprocess  # noqa: S404\n```\n\n```console\n$ make check-quality\n\u2713 Checking code quality\n```\n\nYou can disable multiple different warnings on a single line\nby separating them with commas, for example `# noqa: D300,D301`.\n</code></pre> <p>You can disable a warning globally by adding its ID into the list in <code>config/ruff.toml</code>.</p> <p>You can also disable warnings per file, like so:</p> config/ruff.toml<pre><code>[per-file-ignores]\n\"src/your_package/your_module.py\" = [\n    \"T201\",  # Print statement\n]\n</code></pre> <p></p>"},{"location":"guide/contributors/commands/#check-types","title":"<code>check-types</code>","text":"<p>Check that the code is correctly typed.</p> <pre><code>make check-types\n</code></pre> <p>Run type-checking on the code with Mypy.</p> <p>The configuration for Mypy is located at <code>config/mypy.ini</code>.</p> <p>If you cannot or don't know how to fix a typing error in your code, as a last resort you can ignore this specific error with a comment:</p> src/your_package/module.py<pre><code>print(\"a code line that triggers a Mypy warning\")  # type: ignore[ID]\n</code></pre> <p>...where ID is the name of the warning.</p> <p>Example:     src/your_package/module.py<pre><code>result = data_dict.get(key, None).value\n</code></pre></p> <pre><code>```console\n$ make check-types\n\u2717 Checking types (1)\n&gt; mypy --config-file=config/mypy.ini src/ tests/ scripts/\nsrc/your_package/module.py:2:1: Item \"None\" of \"Data | None\" has no attribute \"value\" [union-attr]\n```\n\nNow add a comment to ignore this warning.\n\n```python title=\"src/your_package/module.py\"\nresult = data_dict.get(key, None).value  # type: ignore[union-attr]\n```\n\n```console\n$ make check-types\n\u2713 Checking types\n```\n</code></pre> <p></p>"},{"location":"guide/contributors/commands/#coverage","title":"<code>coverage</code>","text":"<p>Report coverage as text and HTML.</p> <pre><code>make coverage\n</code></pre> <p>Combine coverage data from multiple test runs with Coverage.py, then generate an HTML report into the <code>htmlcov</code> directory, and print a text report in the console.</p> <p></p>"},{"location":"guide/contributors/commands/#docs","title":"<code>docs</code>","text":"<p>Serve the documentation (localhost:8000).</p> <pre><code>make docs\n</code></pre> <p>This task uses MkDocs to serve the documentation locally.</p> <p>Parameters:</p> <ul> <li> <code>*cli_args</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Additional MkDocs CLI arguments.</p> </li> <li> <code>host</code>               (<code>str</code>, default:                   <code>'127.0.0.1'</code> )           \u2013            <p>The host to serve the docs from.</p> </li> <li> <code>port</code>               (<code>int</code>, default:                   <code>8000</code> )           \u2013            <p>The port to serve the docs on.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#docs-deploy","title":"<code>docs-deploy</code>","text":"<p>Deploy the documentation to GitHub pages.</p> <pre><code>make docs-deploy\n</code></pre> <p>Use MkDocs to build and deploy the documentation to GitHub pages.</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force deployment, even from non-Insiders version.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#format","title":"<code>format</code>","text":"<p>Run formatting tools on the code.</p> <pre><code>make format\n</code></pre> <p>Format the code with Ruff. This command will also automatically fix some coding issues when possible.</p> <p></p>"},{"location":"guide/contributors/commands/#fuzz","title":"<code>fuzz</code>","text":"<p>Fuzz Griffe against generated Python code.</p> <p>Parameters:</p> <ul> <li> <code>ctx</code>               (<code>Context</code>)           \u2013            <p>The context instance (passed automatically).</p> </li> <li> <code>size</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>The size of the case set (number of cases to test).</p> </li> <li> <code>seeds</code>               (<code>_Seeds</code>, default:                   <code>_Seeds()</code> )           \u2013            <p>Seeds to test or exclude (comma-separated integers).</p> </li> <li> <code>min_seed</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Minimum value for the seeds range.</p> </li> <li> <code>max_seed</code>               (<code>int</code>, default:                   <code>1000000</code> )           \u2013            <p>Maximum value for the seeds range.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#publish","title":"<code>publish</code>","text":"<p>Publish source and wheel distributions to PyPI.</p> <pre><code>make publish\n</code></pre> <p>Publish the source and wheel distributions of your project to PyPI using Twine.</p> <p></p>"},{"location":"guide/contributors/commands/#release","title":"<code>release</code>","text":"<p>Release a new version of the project.</p> <pre><code>make release [version=VERSION]\n</code></pre> <p>This task will:</p> <ul> <li>Stage changes to <code>pyproject.toml</code> and <code>CHANGELOG.md</code></li> <li>Commit the changes with a message like <code>chore: Prepare release 1.0.0</code></li> <li>Tag the commit with the new version number</li> <li>Push the commit and the tag to the remote repository</li> <li>Build source and wheel distributions</li> <li>Publish the distributions to PyPI</li> <li>Deploy the documentation to GitHub pages</li> </ul> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The new version number to use. If not provided, you will be prompted for it.</p> </li> </ul> <p></p>"},{"location":"guide/contributors/commands/#test","title":"<code>test</code>","text":"<p>Run the test suite.</p> <pre><code>make test [match=EXPR]\n</code></pre> <p>Run the test suite with Pytest and plugins. Code source coverage is computed thanks to coveragepy.</p> <p>Parameters:</p> <ul> <li> <code>*cli_args</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Additional Pytest CLI arguments.</p> </li> <li> <code>match</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>A pytest expression to filter selected tests.</p> </li> </ul>"},{"location":"guide/contributors/setup/","title":"Environment setup","text":"<p>To work on the project, whether to update the code or the documentation, you will have to setup a development environment.</p>"},{"location":"guide/contributors/setup/#requirements","title":"Requirements","text":"<p>The only requirement is that you have Python and uv installed and available on your command line path.</p>  official installer pip pipx rye <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>See Installation methods.</p> <pre><code>pip install --user uv\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>pipx install uv\n</code></pre> <p>pipx allows to install and run Python applications in isolated environments.</p> <pre><code>rye install uv\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <p>Optionally, we recommend using direnv, which will add our <code>scripts</code> folder to your path when working on the project, allowing to call our <code>make</code> Python script with the usual <code>make</code> command.</p>"},{"location":"guide/contributors/setup/#fork-and-clone","title":"Fork and clone","text":"<p>Fork the repository on GitHub, then clone it locally:</p> GitHub CLIGit + SSHGit + HTTPS <pre><code>gh repo clone griffe\n</code></pre> <p>The <code>gh</code> GitHub CLI allows you to interact with GitHub on the command line.</p> <pre><code>git clone git@github.com:your-username/griffe\n</code></pre> <p>See the documentation on GitHub for Connecting with SSH and for Cloning a repository.</p> <pre><code>git clone https://github.com/your-username/griffe\n</code></pre> <p>See the documentation on GitHub for Cloning a repository.</p>"},{"location":"guide/contributors/setup/#install-dependencies","title":"Install dependencies","text":"<p>First, enter the repository.</p> <p>If you installed direnv:</p> <ul> <li>run <code>direnv allow</code></li> <li>run <code>make setup</code></li> </ul> <p>If you didn't install direnv, just run <code>./scripts/make setup</code>.</p> <p>The setup command will install all the Python dependencies required to work on the project. This command will create a virtual environment in the <code>.venv</code> folder, as well as one virtual environment per supported Python version in the <code>.venvs/3.x</code> folders. If you cloned the repository on the same file-system as uv's cache, everything will be hard linked from the cache, so don't worry about wasting disk space.</p>"},{"location":"guide/contributors/setup/#ide-setup","title":"IDE setup","text":"<p>If you work in VSCode, we provide a command to configure VSCode for the project.</p>"},{"location":"guide/contributors/workflow/","title":"Development workflow","text":"<p>This document describes our workflow when developing features, fixing bugs and updating the documentation. It also includes guidelines for pull requests on GitHub.</p>"},{"location":"guide/contributors/workflow/#features-and-bug-fixes","title":"Features and bug fixes","text":"<p>The development worklow is rather usual.</p> <p>For a new feature:</p> <ol> <li>create a new branch: <code>git switch -c feat-summary</code></li> <li>edit the code and the documentation</li> <li>write new tests</li> </ol> <p>For a bug fix:</p> <ol> <li>create a new branch: <code>git switch -c fix-summary</code></li> <li>write tests that fail but are expected to pass once the bug is fixed</li> <li>run <code>make test</code> to make sure the new tests fail</li> <li>fix the code</li> </ol> <p>For a docs update:</p> <ol> <li>create a new branch: <code>git switch -c docs-summary</code></li> <li>start the live reloading server: <code>make docs</code> (1)</li> <li>update the documentation</li> <li>preview changes at http://localhost:8000</li> </ol> <ol> <li>To speed-up the live reloading, disable mkdocstrings with <code>MKDOCSTRINGS_ENABLED=false make docs</code>.</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> </ol> <p>Once you are ready to commit, follow our commit message convention.</p> <p>Occasional contributors</p> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.</p>"},{"location":"guide/contributors/workflow/#breaking-changes-and-deprecations","title":"Breaking changes and deprecations","text":"<p>Breaking changes should generally be avoided. If we decide to add a breaking change anyway, we should first allow a deprecation period. To deprecate parts of the API, check Griffe's hints on how to deprecate things.</p> <p>Use <code>make check-api</code> to check if there are any breaking changes. All of them should allow deprecation periods. Run this command again until no breaking changes are detected.</p> <p>Deprecated code should also be marked as legacy code. We use Yore to mark legacy code. Similarly, code branches made to support older version of Python should be marked as legacy code using Yore too.</p> <p>Examples:</p> Remove function when we bump to 2.0<pre><code># YORE: Bump 2: Remove block.\ndef deprecated_function():\n    ...\n</code></pre> Simplify imports when Python 3.9 is EOL<pre><code># YORE: EOL 3.9: Replace block with line 4.\ntry:\n    import ...\nexcept ImportError:\n    import ...\n</code></pre> <p>Check Yore's docs, and Yore-comments in our own code base (<code>git grep -A1 YORE</code>) to learn how to use it.</p> <p>Occasional contributors</p> <p>If you are unsure about how to deprecate something or mark legacy code, let us do it during review.</p>"},{"location":"guide/contributors/workflow/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>type(scope): Subject\n\nBody.\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general. Example:</p> <pre><code>feat: Add CLI option to run in verbose mode\n</code></pre> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>This is the body of the commit message.\n\nIssue-10: https://github.com/namespace/project/issues/10\nRelated-to-PR-namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body.</p> <p>Occasional contributors</p> <p>If this convention seems unclear to you, just write the message of your choice, and we will rewrite it ourselves before merging.</p>"},{"location":"guide/contributors/workflow/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>Occasional contributors</p> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"guide/contributors/workflow/#release-process","title":"Release process","text":"<p>Occasional or even regular contributors don't have to read this, but can anyway if they are interested in our release process.</p> <p>Once we are ready for a new release (a few bugfixes and/or features merged in the main branch), maintainers should update the changelog. If our commit message convention was properly followed, the changelog can be automatically updated from the messages in the Git history with <code>make changelog</code>. This task updates the changelog in place to add a new version entry.</p> <p>Once the changelog is updated, maintainers should review the new version entry, to:</p> <ul> <li>(optionally) add general notes for this new version, like highlights</li> <li>insert Breaking changes and Deprecations sections if needed, before other sections</li> <li>add links to the relevant parts of the documentation</li> <li>fix typos or markup if needed</li> </ul> <p>Once the changelog is ready, a new release can be made with <code>make release</code>. If the version wasn't passed on the command-line with <code>make release version=x.x.x</code>, the task will prompt you for it. Use the same version as the one that was just added to the changelog. For example if the new version added to the changelog is <code>7.8.9</code>, use <code>make release version=7.8.9</code>.</p> <p>The release task will stage the changelog, commit, tag, push, then build distributions and upload them to PyPI.org, and finally deploy the documentation. If any of these steps fail, you can manually run each step with Git commands, then <code>make build</code>, <code>make publish</code> and <code>make docs-deploy</code>.</p>"},{"location":"guide/users/checking/","title":"Checking APIs","text":"<p>Griffe is able to compare two snapshots of your project to detect API breakages between the old and the new snapshot. By snapshot we mean a specific point in your Git history. For example, you can ask Griffe to compare your current code against a specific tag.</p>"},{"location":"guide/users/checking/#command-line","title":"Command-line","text":""},{"location":"guide/users/checking/#using-git","title":"Using Git","text":"<p>By default, Griffe will compare the current code to the latest tag:</p> <pre><code>$ griffe check mypackage\n</code></pre> <p>To specify another Git reference to check against, use the <code>--against</code> or <code>-a</code> option:</p> <pre><code>$ griffe check mypackage -a 0.2.0\n</code></pre> <p>You can specify a Git tag, commit (hash), or even a branch: Griffe will create a worktree at this reference in a temporary directory, and clean it up after finishing.</p> <p>If you want to also specify the base reference to use (instead of the current code), use the <code>--base</code> or <code>-b</code> option. Some examples:</p> <pre><code>$ griffe check mypackage -b HEAD -a 2.0.0\n$ griffe check mypackage -b 2.0.0 -a 1.0.0\n$ griffe check mypackage -b fix-issue-90 -a 1.2.3 \n$ griffe check mypackage -b 8afcfd6e \n</code></pre> <p>Important:</p> <p> Remember that the base is the most recent reference, and the one we compare it against is the oldest one.</p> <p>The package name you pass to <code>griffe check</code> must be found relative to the repository root. For Griffe to find packages in subfolders, pass the parent subfolder to the <code>--search</code> or <code>-s</code> option. Example for <code>src</code>-layouts:</p> <pre><code>$ griffe check -s src griffe\n</code></pre> <p>Example in a monorepo, within a deeper file tree:</p> <pre><code>$ griffe check -s back/services/identity-provider/src identity_provider\n</code></pre>"},{"location":"guide/users/checking/#using-pypi","title":"Using PyPI","text":"<p> Sponsors only \u2014  Insiders 1.1.0</p> <p>It's also possible to directly check packages from PyPI.org (or other indexes configured through <code>PIP_INDEX_URL</code>). This feature is available to sponsors only and requires that you install Griffe with the <code>pypi</code> extra:</p> <pre><code>$ pip install griffe[pypi]\n</code></pre> <p>The command syntax is:</p> <pre><code>$ griffe check package_name -b project-name==2.0 -a project-name==1.0\n</code></pre> <p>You can let Griffe guess the package name by passing an empty string:</p> <pre><code>$ griffe check \"\" -b project-name==2.0 -a project-name==1.0\n</code></pre> <p>PEP 508 version specifiers are supported (<code>&lt;</code>, <code>&lt;=</code>, <code>!=</code>, <code>==</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>~=</code>). For example, to compare v2 against the version just before it:</p> <pre><code>$ griffe check \"\" -b project-name==2.0 -a project-name&lt;2.0\n</code></pre> <p>Without a version specifier on the base reference, or without a base reference at all, Griffe will use the latest available version. The two following commands compare the latest version against v1:</p> <pre><code>$ griffe check \"\" -b project-name -a project-name==1.0\n$ griffe check \"\" -a project-name==1.0\n</code></pre> <p>Griffe will actually install packages in a cache directory. It means a few things: source distributions are supported, and only packages that are compatible with your current environment can be checked.</p>"},{"location":"guide/users/checking/#python-api","title":"Python API","text":"<p>To programmatically check for API breaking changes, you have to load two snapshots of your code base, for example using our <code>load_git()</code> utility, and then passing them both to the <code>find_breaking_changes()</code> function. This function will yield instances of <code>Breakage</code>. It's up to you how you want to use these breakage instances.</p> <pre><code>import griffe\n\nmy_pkg_v1 = griffe.load_git(\"my_pkg\", ref=\"v1\")\nmy_pkg_v2 = griffe.load_git(\"my_pkg\", ref=\"v2\")\n\nfor breaking_change in find_breaking_changes(my_pkg_v1, my_pkg_v2):\n    print(breaking_change.explain())\n</code></pre>"},{"location":"guide/users/checking/#in-ci","title":"In CI","text":"<p>It is of course possible to Griffe in CI (Continuous Integration) to make sure no breaking changes are introduced in pull/merge requests.</p>"},{"location":"guide/users/checking/#ci-github","title":"GitHub","text":"<p>Here is a quick example on how to use Griffe in a GitHub workflow:</p> <pre><code>jobs:\n  check-api:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    # Griffe requires that Git tags are available.\n    - run: git fetch --depth=1 --tags\n\n    - uses: actions/setup-python@v5\n      with:\n        python-version: \"3.11\"\n\n    # Install Griffe (use your preferred dependency manager).\n    - run: pip install griffe\n\n    - run: griffe check -ssrc your_package\n</code></pre> <p>The last step will fail the workflow if any breaking change is found. If you are part of Insiders, you can format the output for GitHub, to enjoy GitHub annotations in PRs. See GitHub format below.</p>"},{"location":"guide/users/checking/#detected-breakages","title":"Detected breakages","text":"<p>In this section, we will describe the breakages that Griffe detects, giving some code examples and hints on how to properly communicate breakages with deprecation messages before actually releasing them.</p> <p>Obviously, these explanations and the value of the hints we provide depend on your definition of what is a public Python API. There is no clear and generally agreed upon definition of \"public Python API\". A public Python API might vary from one project to another. In essence, your public API is what you say it is.</p> <p>However, we do have conventions like prefixing objects with an underscore to tell users these objects are part of the private API, or internals, and therefore should not be used. For the rest, Griffe can detect changes that will trigger immediate errors in your users code', and changes that might cause issues in your users' code. Although the latter sound less impactful, they do have a serious impact, because they can silently change the behavior of your users' code, leading to issues that are hard to detect, understand and fix.</p> <p>Knowing that every change is a breaking change, the more we detect and document (potentially) breaking changes in our changelogs, the better.</p>"},{"location":"guide/users/checking/#parameter-moved","title":"Parameter moved","text":"<p>Positional parameter was moved.</p> <p>Moving the order of positional parameters can silently break your users' code.</p> before<pre><code># your code\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: no immediate error, broken behavior\ngreet(\"hello\", \"world\")\n</code></pre> <p>Note</p> <p>Moving required parameters around is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The function expects a number of arguments, and the developer passes it this same number of arguments: the contract is fulfilled. But parameters very often have specific meaning, and changing their order will silently lead (no immediate error) to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>If you often add, move or remove parameters, consider making them keyword-only, so that their order doesn't matter.</p> before<pre><code>def greet(*, prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> after<pre><code>def greet(*, name, prefix):\n    print(prefix + \" \" + name)\n\n# still working as expected\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre>"},{"location":"guide/users/checking/#parameter-removed","title":"Parameter removed","text":"<p>Parameter was removed.</p> <p>Removing a parameter can immediately break your users' code.</p> before<pre><code># your code\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\n# user's code: immediate error\ngreet(\"hello\", \"world\")\n\n# even with keyword parameters: immediate error\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> <p>Hint</p> <p>Allow a deprecation period for the removed parameter by swallowing it in a variadic positional parameter, a variadic keyword parameter, or both.</p> positional-onlykeyword-onlypositional or keyword before<pre><code># your parameters are positional-only parameters (difficult deprecation)\ndef greet(prefix, name, /):\n    print(prefix + \" \" + name)\n\ngreet(\"hello\", \"world\")\n</code></pre> after<pre><code># swallow prefix using a variadic positional parameter\ndef greet(*args):\n    if len(args) == 2:\n        prefix, name = args\n    elif len(args) == 1:\n        prefix = None\n        name = args[0]\n    else:\n        raise ValueError(\"missing parameter 'name'\")\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(\"hello\", \"world\")\n</code></pre> before<pre><code># your parameters are keyword-only parameters (easy deprecation)\ndef greet(*, prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> after<pre><code># swallow prefix using a variadic keyword parameter\ndef greet(name, **kwargs):\n    prefix = kwargs.get(\"prefix\", None)\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre> before<pre><code># your parameters are positional or keyword parameters (very difficult deprecation)\ndef greet(prefix, name):\n    print(prefix + \" \" + name)\n\ngreet(\"hello\", name=\"world\")\n</code></pre> after<pre><code># no other choice than swallowing both forms...\n# ignoring the deprecated parameter becomes quite complex\ndef greet(*args, **kwargs):\n    if len(args) == 2:\n        prefix, name = args\n    elif len(args) == 1:\n        prefix = None\n        name = args[0]\n    if \"name\" in kwargs:\n        name = kwargs[\"name\"]\n    if \"prefix\" in kwargs:\n        prefix = kwargs[\"prefix\"]\n    if prefix is not None:\n        warnings.warn(DeprecationWarning, \"prefix is deprecated\")\n    print(\"hello \" + name)\n\n# still working as expected\ngreet(\"hello\", \"world\")\ngreet(\"hello\", name=\"world\")\ngreet(prefix=\"hello\", name=\"world\")\n</code></pre>"},{"location":"guide/users/checking/#parameter-changed-kind","title":"Parameter changed kind","text":"<p>Parameter kind was changed</p> <p>Changing the kind of a parameter to another (positional-only, keyword-only, positional or keyword, variadic positional, variadic keyword) can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\ndef greet2(name):\n    print(\"hello \" + name)\n\n# user's code: all working fine\ngreet(\"tim\")\ngreet(name=\"tim\")\ngreet2(\"tim\")\ngreet2(name=\"tim\")\n</code></pre> after<pre><code># your code\ndef greet(name, /):\n    print(\"hello \" + name)\n\ndef greet2(*, name):\n    print(\"hello \" + name)\n\n# user's code: working as expected\ngreet(\"tim\")\ngreet2(name=\"tim\")\n\n# immediate error\ngreet(name=\"tim\")\ngreet2(\"tim\")\n</code></pre> <p>Hint</p> <p>Although it actually is a breaking change, changing your positional or keyword parameters' kind to keyword-only makes your public function more robust to future changes (forward-compatibility).</p> <p>For functions with lots of optional parameters, and a few (one or two) required parameters, it can be a good idea to accept the required parameters as positional or keyword, while accepting the optional parameters as keyword-only parameters:</p> <pre><code>def greet(name, *, punctuation=False, bold=False, italic=False):\n    ...\n\n# simple cases are easy to write\ngreet(\"tim\")\ngreet(\"tiff\")\n\n# complex cases are never ambiguous\ngreet(\"tim\", italic=True, bold=True)\ngreet(name=\"tiff\", bold=True, punctuation=True)\n</code></pre> <p>Positional-only parameters are useful in some specific cases, such as when a function takes two or more numeric values, and their order does not matter, and naming the parameters would not make sense:</p> <pre><code>def multiply3(a, b, c, /):\n    return a * b * c\n\n# all the following are equivalent\nmultiply3(4, 2, 3)\nmultiply3(4, 3, 2)\nmultiply3(2, 3, 4)\n# etc.\n</code></pre>"},{"location":"guide/users/checking/#parameter-changed-default","title":"Parameter changed default","text":"<p>Parameter default was changed</p> <p>Changing the default value of a parameter can silently break your users' code.</p> before<pre><code># your code\ndef compute_something(value: int, to_float=True):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n\n# user's code: condition is entered\nif isinstance(compute_something(7), float):\n    ...\n</code></pre> after<pre><code># your code\ndef compute_something(value: int, to_float=False):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n\n# user's code: condition is not entered anymore\nif isinstance(compute_something(7), float):\n    ...\n</code></pre> <p>Note</p> <p>Changing default value of parameters is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. Not using the parameter still provides the argument with a default value: the contract is fulfilled. But default values very often have specific meaning, and changing them will silently lead (no immediate error) to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>Allow a deprecation period for the old default value by using a sentinel value to detect when the parameter wasn't used by the user:</p> in the coming release<pre><code>_sentinel = object()\n\ndef compute_something(value: int, to_float=_sentinel):\n    value = ...\n    if to_float is _sentinel:\n        to_float = True\n        warnings.warn(\n            DeprecationWarning,\n            \"default value of 'to_float' will change from True to False, \"\n            \"please provide 'to_float=True' if you want to retain the current behavior\"\n        )\n    if to_float:\n        return float(value)\n    return value\n</code></pre> <p>In a later release you can remove the sentinel, the deprecation warning, and set <code>False</code> as default to <code>to_float</code>.</p> in a later release<pre><code>def compute_something(value: int, to_float=False):\n    value = ...\n    if to_float:\n        return float(value)\n    return value\n</code></pre>"},{"location":"guide/users/checking/#parameter-changed-required","title":"Parameter changed required","text":"<p>Parameter is now required</p> <p>Changing an optional parameter to a required one (by removing its default value) can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name, prefix=\"hello\"):\n    print(prefix + \" \" + name)\n\n# user's code\ngreet(\"tiff\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: immediate error\ngreet(\"tiff\")\n</code></pre> <p>Hint</p> <p>Allow a deprecation period for the default value by using a sentinel value to detect when the parameter wasn't used by the user:</p> in the coming release<pre><code>_sentinel = object()\n\ndef greet(name, prefix=_sentinel):\n    if prefix is _sentinel:\n        prefix = \"hello\"\n        warnings.warn(DeprecationWarning, \"'prefix' will become required in the next release\")\n    print(prefix + \" \" + name)\n</code></pre> <p>In a later release you can remove the sentinel, the deprecation warning, and the default value of <code>prefix</code>.</p> in a later release<pre><code>def greet(name, prefix):\n    print(prefix + \" \" + name)\n</code></pre>"},{"location":"guide/users/checking/#parameter-added-required","title":"Parameter added required","text":"<p>Parameter was added as required</p> <p>Adding a new, required parameter can immediately break your users' code.</p> before<pre><code># your code\ndef greet(name):\n    print(\"hello \" + name)\n\n# user's code\ngreet(\"tiff\")\n</code></pre> after<pre><code># your code\ndef greet(name, prefix):\n    print(prefix + \" \" + name)\n\n# user's code: immediate error\ngreet(\"tiff\")\n</code></pre> <p>Hint</p> <p>You can delay (or avoid) and inform your users about the upcoming breakage by temporarily (or permanently) providing a default value for the new parameter:</p> in the coming release<pre><code>def greet(name, prefix=\"hello\"):\n    print(prefix + \" \" + name)\n</code></pre>"},{"location":"guide/users/checking/#return-changed-type","title":"Return changed type","text":"<p>Return types are incompatible</p> <p>Not yet supported!</p> <p> Telling if a type construct is compatible with another one is not trivial, especially statically. Support for this will be implemented later.</p>"},{"location":"guide/users/checking/#object-removed","title":"Object removed","text":"<p>Public object was removed</p> <p>Removing a public object from a module can immediately break your users' code.</p> before<pre><code># your/module.py\nspecial_thing = \"hey\"\n\n# user/module.py\nfrom your.module import special_thing\n\n# other/user/module.py\nfrom your import module\nprint(module.special_thing)\n</code></pre> after<pre><code># user/module.py: import error\nfrom your.module import special_thing\n\n# other/user/module.py: attribute error\nfrom your import module\nprint(module.special_thing)\n</code></pre> <p>Hint</p> <p>Allow a deprecation period by declaring a module-level <code>__getattr__</code> function that returns the given object while warning about its deprecation:</p> <pre><code>def __getattr__(name):\n    if name == \"special_thing\":\n        warnings.warn(DeprecationWarning, \"'special_thing' is deprecated and will be removed\")\n        return \"hey\"\n</code></pre>"},{"location":"guide/users/checking/#object-changed-kind","title":"Object changed kind","text":"<p>Public object points to a different kind of object</p> <p>Changing the kind (attribute, function, class, module) of a public object can silently break your users' code.</p> before<pre><code># your code\nclass Factory:\n    def __call__(self, ...):\n        ...\n\nfactory = Factory(...)\n\n# user's code: condition is entered\nif isinstance(factory, Factory):\n    ...\n</code></pre> after<pre><code># your code\nclass Factory:\n    ...\n\ndef factory(...):\n    ...\n\n# user's code: condition is not entered anymore\nif isinstance(factory, Factory):\n    ...\n</code></pre> <p>Note</p> <p>Changing the kind of an object is not really an API breakage, depending on our definition of API, since this won't always raise immediate errors like <code>TypeError</code>. The object is still here and accessed: the contract is fulfilled. But developers sometimes rely on the kind of an object, so changing it will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p>"},{"location":"guide/users/checking/#attribute-changed-type","title":"Attribute changed type","text":"<p>Attribute types are incompatible</p> <p>Not yet supported!</p> <p> Telling if a type construct is compatible with another one is not trivial, especially statically. Support for this will be implemented later.</p>"},{"location":"guide/users/checking/#attribute-changed-value","title":"Attribute changed value","text":"<p>Attribute value was changed</p> <p>Changing the value of an attribute can silently break your users' code.</p> before<pre><code># your code\nPY_VERSION = os.getenv(\"PY_VERSION\")\n\n# user's code: condition is entered\nif PY_VERSION is None:\n    ...\n</code></pre> after<pre><code># your code\nPY_VERSION = os.getenv(\"PY_VERSION\", \"3.8\")\n\n# user's code: condition is not entered anymore\nif PY_VERSION is None:\n    ...\n</code></pre> <p>Note</p> <p>Changing the value of an attribute is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The attribute is still here and accessed: the contract is fulfilled. But developers heavily rely on the value of public attributes, so changing it will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p> <p>Hint</p> <p>Make sure to document the change of value of the attribute in your changelog, particularly the previous and new range of values it can take.</p>"},{"location":"guide/users/checking/#class-removed-base","title":"Class removed base","text":"<p>Base class was removed</p> <p>Removing a class from another class' bases can silently break your users' code.</p> before<pre><code># your code\nclass A: ...\nclass B: ...\nclass C(A, B): ...\n\n# user's code: condition is entered\nif B in klass.__bases__:\n    ...\n</code></pre> after<pre><code># your code\nclass A: ...\nclass B: ...\nclass C(A): ...\n\n# user's code: condition is not entered anymore\nif B in klass.__bases__:\n    ...\n</code></pre> <p>Note</p> <p>Unless inherited members are lost in the process, removing a class base is not really an API breakage, depending on our definition of API, since this won't raise immediate errors like <code>TypeError</code>. The class is here, its members as well: the contract is fulfilled. But developers sometimes rely on the actual bases of a class, so changing them will lead to incorrect behavior, potentially making it difficult to detect, understand and fix the issue. That is why it is important to warn developers about such changes.</p>"},{"location":"guide/users/checking/#output-style","title":"Output style","text":"<p>Griffe supports writing detected breakages in multiple formats, or styles.</p> <p></p>"},{"location":"guide/users/checking/#one-line","title":"One-line","text":"<ul> <li>CLI: <code>-f oneline</code> / no flags</li> <li>API: <code>check(...)</code> / <code>check(..., style=\"oneline\")</code> / <code>check(..., style=ExplanationStyle.ONE_LINE)</code></li> </ul> <p>This is the default format. Griffe will print each detected breakage on a single line:</p> <pre><code>$ griffe check griffe -ssrc -b0.46.0.1.2.0 -a0.45.0.1.2.0\nsrc/griffe/mixins.py:303: ObjectAliasMixin.is_exported: Public object points to a different kind of object: function -&gt; attribute\nsrc/griffe/mixins.py:353: ObjectAliasMixin.is_public: Public object points to a different kind of object: function -&gt; attribute\nsrc/griffe/dataclasses.py:520: Object.has_labels(labels): Parameter kind was changed: positional or keyword -&gt; variadic positional\nsrc/griffe/diff.py:571: find_breaking_changes(ignore_private): Parameter default was changed: True -&gt; _sentinel\nsrc/griffe/extensions/base.py:463: load_extensions(exts): Parameter kind was changed: positional or keyword -&gt; variadic positional\nsrc/griffe/dataclasses.py:1073: Alias.has_labels(labels): Parameter kind was changed: positional or keyword -&gt; variadic positional\n</code></pre> <p></p>"},{"location":"guide/users/checking/#verbose","title":"Verbose","text":"<ul> <li>CLI: <code>-f verbose</code> / <code>-v</code></li> <li>API: <code>check(..., style=\"verbose\")</code> / <code>check(..., style=ExplanationStyle.VERBOSE)</code> / <code>check(..., verbose=True)</code></li> </ul> <p>Depending on the detected breakages, the lines might be hard to read (being too compact), so <code>griffe check</code> also accepts a <code>--verbose</code> or <code>-v</code> option to add some space to the output:</p> <pre><code>$ griffe check griffe -ssrc -b0.46.0.1.2.0 -a0.45.0.1.2.0 --verbose\nsrc/griffe/mixins.py:303: ObjectAliasMixin.is_exported:\nPublic object points to a different kind of object:\n  Old: function\n  New: attribute\n\nsrc/griffe/mixins.py:353: ObjectAliasMixin.is_public:\nPublic object points to a different kind of object:\n  Old: function\n  New: attribute\n\nsrc/griffe/dataclasses.py:520: Object.has_labels(labels):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n\nsrc/griffe/diff.py:571: find_breaking_changes(ignore_private):\nParameter default was changed:\n  Old: True\n  New: _sentinel\n\nsrc/griffe/extensions/base.py:463: load_extensions(exts):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n\nsrc/griffe/dataclasses.py:1073: Alias.has_labels(labels):\nParameter kind was changed:\n  Old: positional or keyword\n  New: variadic positional\n</code></pre> <p></p>"},{"location":"guide/users/checking/#markdown","title":"Markdown","text":"<p> Insiders 1.0.0</p> <ul> <li>CLI: <code>-f markdown</code></li> <li>API: <code>check(..., style=\"markdown\")</code> / <code>check(..., style=ExplanationStyle.MARKDOWN)</code></li> </ul> <p>The Markdown format is adapted for changelogs. It doesn't show the file and line number, and instead prints out the complete path of your API objects. With a bit of automation, you will be able to automatically insert a summary of breaking changes in your changelog entries.</p> OutputResult <pre><code>- `griffe.loader.GriffeLoader.resolve_aliases(only_exported)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.loader.GriffeLoader.resolve_aliases(only_exported)`: *Parameter default was changed*: `True` -&gt; `None`\n- `griffe.loader.GriffeLoader.resolve_aliases(only_known_modules)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.loader.GriffeLoader.resolve_aliases(only_known_modules)`: *Parameter default was changed*: `True` -&gt; `None`\n- `griffe.loader.GriffeLoader.resolve_aliases(max_iterations)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.loader.GriffeLoader.resolve_module_aliases(only_exported)`: *Parameter was removed*\n- `griffe.loader.GriffeLoader.resolve_module_aliases(only_known_modules)`: *Parameter was removed*\n- `griffe.git.tmp_worktree(commit)`: *Parameter was removed*\n- `griffe.git.tmp_worktree(repo)`: *Positional parameter was moved*: position: from 2 to 1 (-1)\n- `griffe.git.load_git(commit)`: *Parameter was removed*\n- `griffe.git.load_git(repo)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(submodules)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(try_relative_path)`: *Parameter was removed*\n- `griffe.git.load_git(extensions)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(search_paths)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(docstring_parser)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(docstring_options)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(lines_collection)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(modules_collection)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n- `griffe.git.load_git(allow_inspection)`: *Parameter kind was changed*: positional or keyword -&gt; keyword-only\n</code></pre> <ul> <li><code>griffe.loader.GriffeLoader.resolve_aliases(only_exported)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.loader.GriffeLoader.resolve_aliases(only_exported)</code>: Parameter default was changed: <code>True</code> -&gt; <code>None</code></li> <li><code>griffe.loader.GriffeLoader.resolve_aliases(only_known_modules)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.loader.GriffeLoader.resolve_aliases(only_known_modules)</code>: Parameter default was changed: <code>True</code> -&gt; <code>None</code></li> <li><code>griffe.loader.GriffeLoader.resolve_aliases(max_iterations)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.loader.GriffeLoader.resolve_module_aliases(only_exported)</code>: Parameter was removed</li> <li><code>griffe.loader.GriffeLoader.resolve_module_aliases(only_known_modules)</code>: Parameter was removed</li> <li><code>griffe.git.tmp_worktree(commit)</code>: Parameter was removed</li> <li><code>griffe.git.tmp_worktree(repo)</code>: Positional parameter was moved: position: from 2 to 1 (-1)</li> <li><code>griffe.git.load_git(commit)</code>: Parameter was removed</li> <li><code>griffe.git.load_git(repo)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(submodules)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(try_relative_path)</code>: Parameter was removed</li> <li><code>griffe.git.load_git(extensions)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(search_paths)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(docstring_parser)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(docstring_options)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(lines_collection)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(modules_collection)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>griffe.git.load_git(allow_inspection)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> </ul> <p></p>"},{"location":"guide/users/checking/#github","title":"GitHub","text":"<p> Insiders 1.0.0</p> <ul> <li>CLI: <code>-f github</code></li> <li>API: <code>check(..., style=\"github\")</code> / <code>check(..., style=ExplanationStyle.GITHUB)</code></li> </ul> <p>When running <code>griffe check</code> in CI, you can enable GitHub's annotations thanks to the GitHub output style. Annotations are displayed on specific lines of code. They are visible in the Checks tab. When you create an annotation for a file that is part of the pull request, the annotations are also shown in the Files changed tab.</p> Files changed tabChecks tab <p></p> <p></p> <pre><code>% python -m griffe check -fgithub -ssrc griffe\n::warning file=src/griffe/finder.py,line=58,title=Package.name::Attribute value was changed: `name` -&gt; unset\n::warning file=src/griffe/finder.py,line=60,title=Package.path::Attribute value was changed: `path` -&gt; unset\n::warning file=src/griffe/finder.py,line=62,title=Package.stubs::Attribute value was changed: `stubs` -&gt; `None`\n::warning file=src/griffe/finder.py,line=75,title=NamespacePackage.name::Attribute value was changed: `name` -&gt; unset\n::warning file=src/griffe/finder.py,line=77,title=NamespacePackage.path::Attribute value was changed: `path` -&gt; unset\n</code></pre>"},{"location":"guide/users/checking/#next-steps","title":"Next steps","text":"<p>If you are using a third-party library to mark objects as public, or if you follow conventions different than the one Griffe understands, you might get false-positives, or breaking changes could go undetected. In that case, you might be interested in extending how Griffe loads API data to support these third-party libraries or other conventions.</p>"},{"location":"guide/users/extending/","title":"Extending APIs","text":"<p>Griffe has an extension system that can be used to enhance or customize the data that Griffe collects. Extensions are written in Python.</p>"},{"location":"guide/users/extending/#using-extensions","title":"Using extensions","text":"<p>Extensions can be specified both on the command-line (in the terminal), and programmatically (in Python).</p>"},{"location":"guide/users/extending/#on-the-command-line","title":"On the command-line","text":"<p>On the command-line, you can specify extensions to use with the <code>-e</code>, <code>--extensions</code> option. This option accepts a single positional argument which can take two forms:</p> <ul> <li>a comma-separated list of extensions</li> <li>a JSON list of extensions</li> </ul> <p>Extensions can accept options: the comma-separated list does not allow to specify options, while the JSON list does. See examples below.</p> <p>With both forms, each extension refers to one of these three things:</p> <ul> <li>the name of a built-in extension's module, for example <code>dynamic_docstrings</code> (this is just an example, this built-in extension does not exist)</li> <li>the Python dotted-path to a module containing one or more extensions, or to an extension directly, for example <code>package.module</code> and <code>package.module.ThisExtension</code></li> <li>the file path to a Python script, and an optional extension name, separated by a colon, for example <code>scripts/griffe_exts.py</code> and <code>scripts/griffe_exts.py:ThisExtension</code></li> </ul> <p>The specified extension modules can contain more than one extension: Griffe will pick up and load every extension declared or imported within the modules. If options are specified for a module that contains multiple extensions, the same options will be passed to all the extensions, so extension writers must make sure that all extensions within a single module accept the same options. If they don't, Griffe will abort with an error.</p> <p>To specify options in the JSON form, use a dictionary instead of a string: the dictionary's only key is the extension identifier (built-in name, Python path, file path) and its value is a dictionary of options.</p> <p>Some examples:</p> <pre><code>griffe dump griffe -e pydantic,scripts/exts.py:DynamicDocstrings,griffe_attrs\n</code></pre> <pre><code>griffe check --search src griffe -e '[\n  {\"pydantic\": {\"schema\": true}},\n  {\n    \"scripts/exts.py:DynamicDocstrings\": {\n      \"paths\": [\"mypkg.mymod.myobj\"]\n    }\n  },\n  \"griffe_attrs\"\n]'\n</code></pre> <p>In the above two examples, <code>pydantic</code> would be a built-in extension, <code>scripts/exts.py:DynamicDocstrings</code> the file path plus name of a local extension, and <code>griffe_attrs</code> the name of a third-party package that exposes one or more extensions.</p>"},{"location":"guide/users/extending/#programmatically","title":"Programmatically","text":"<p>Within Python code, extensions can be specified with the <code>extensions</code> parameter of the <code>GriffeLoader</code> class or <code>load</code> function.</p> <p>The parameter accepts an instance of the <code>Extensions</code> class. Such an instance is created with the help of the <code>load_extensions</code> function, which itself accepts a list of strings, dictionaries, extension classes and extension instances.</p> <p>Strings and dictionaries are used the same way as on the command-line. Extension instances are used as such, and extension classes are instantiated without any options.</p> <p>Example:</p> <pre><code>import griffe\n\nfrom mypackage.extensions import ThisExtension, ThisOtherExtension\n\nextensions = griffe.load_extensions(\n    {\"pydantic\": {\"schema\": true}},\n    {\"scripts/exts.py:DynamicDocstrings\": {\"paths\": [\"mypkg.mymod.myobj\"]}},\n    \"griffe_attrs\",\n    ThisExtension(option=\"value\"),\n    ThisOtherExtension,\n)\n\ndata = griffe.load(\"mypackage\", extensions=extensions)\n</code></pre>"},{"location":"guide/users/extending/#in-mkdocs","title":"In MkDocs","text":"<p>MkDocs and its mkdocstrings plugin can be configured to use Griffe extensions:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - pydantic: {schema: true}\n          - scripts/exts.py:DynamicDocstrings:\n              paths: [mypkg.mymod.myobj]\n          - griffe_attrs\n</code></pre> <p>The <code>extensions</code> key accepts a list that is passed to the <code>load_extensions</code> function. See how to use extensions programmatically to learn more.</p>"},{"location":"guide/users/extending/#writing-extensions","title":"Writing extensions","text":"<p>In the next section we give a bit of context on how Griffe works, to show how extensions can integrate into the data collection process. Feel free to skip to the Events and hooks section or the Full example section if you'd prefer to see concrete examples first.</p>"},{"location":"guide/users/extending/#how-it-works","title":"How it works","text":"<p>To extract information from your Python sources, Griffe tries to build Abstract Syntax Trees by parsing the sources with <code>ast</code> utilities.</p> <p>If the source code is not available (the modules are built-in or compiled), Griffe imports the modules and builds object trees instead.</p> <p>Griffe then follows the Visitor pattern to walk the tree and extract information. For ASTs, Griffe uses its Visitor agent and for object trees, it uses its Inspector agent.</p> <p>Sometimes during the walk through the tree (depth-first order), both the visitor and inspector agents will trigger events. These events can be hooked on by extensions to alter or enhance Griffe's behavior. Some hooks will be passed just the current node being visited, others will be passed both the node and an instance of an Object subclass, such as a Module, a Class, a Function, or an Attribute. Extensions will therefore be able to modify these instances.</p> <p>The following flow chart shows an example of an AST visit. The tree is simplified: actual trees have a lot more nodes like <code>if/elif/else</code> nodes, <code>try/except/else/finally</code> nodes, and many more.</p> <pre><code>flowchart TB\nM(Module definition) --- C(Class definition) &amp; F(Function definition)\nC --- m(Function definition) &amp; A(Variable assignment)</code></pre> <p>The following flow chart shows an example of an object tree inspection. The tree is simplified as well: many more types of objects are handled.</p> <pre><code>flowchart TB\nM(Module) --- C(Class) &amp; F(Function)\nC --- m(Method) &amp; A(Attribute)</code></pre> <p>For a more concrete example, let say that we visit (or inspect) an AST (or object tree) for a given module, and that this module contains a single class, which itself contains a single method:</p> <ul> <li>the agent (visitor or inspector) will walk through the tree by starting with the module node</li> <li>it will instantiate a Module, then walk through its members, continuing with the class node</li> <li>it will instantiate a Class, then walk through its members, continuing with the function node</li> <li>it will instantiate a Function</li> <li>then it will go back up and finish walking since there are no more nodes to walk through</li> </ul> <p>Every time the agent enters a node, creates an object instance, or finishes handling members of an object, it will trigger an event.</p> <p>The flow of events is drawn in the following flowchart:</p> <pre><code>flowchart TB\nvisit_mod{{enter module node}}\nevent_mod_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_module_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_mod{{create module instance}}\nevent_mod_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_module_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nvisit_mod_members{{visit module members}}\nvisit_cls{{enter class node}}\nevent_cls_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_class_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_cls{{create class instance}}\nevent_cls_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_class_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nvisit_cls_members{{visit class members}}\nvisit_func{{enter func node}}\nevent_func_node{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_function_node'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_function_node&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\ncreate_func{{create function instance}}\nevent_func_instance{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_function_instance'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_function_instance&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nevent_cls_members{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_class_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_class_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\nevent_mod_members{{\"&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event&lt;br&gt;&lt;a href='/griffe/reference/griffe/extensions/#griffe.Extension.on_module_members'&gt;&lt;b&gt;&lt;code style='color: var(--md-accent-fg-color)'&gt;on_module_members&lt;/code&gt;&lt;/b&gt;&lt;/a&gt; event\"}}\n\nstart{start} --&gt; visit_mod\nvisit_mod --&gt; event_mod_node\nevent_mod_node --&gt; create_mod\ncreate_mod --&gt; event_mod_instance\nevent_mod_instance --&gt; visit_mod_members\nvisit_mod_members --1--&gt; visit_cls\nvisit_cls --&gt; event_cls_node\nevent_cls_node --&gt; create_cls\ncreate_cls --&gt; event_cls_instance\nevent_cls_instance --&gt; visit_cls_members\nvisit_cls_members --1--&gt; visit_func\nvisit_func --&gt; event_func_node\nevent_func_node --&gt; create_func\ncreate_func --&gt; event_func_instance\nevent_func_instance --&gt; visit_cls_members\nvisit_cls_members --2--&gt; event_cls_members\nevent_cls_members --&gt; visit_mod_members\nvisit_mod_members --2--&gt; event_mod_members\nevent_mod_members --&gt; finish{finish}\n\nclass event_mod_node event\nclass event_mod_instance event\nclass event_cls_node event\nclass event_cls_instance event\nclass event_func_node event\nclass event_func_instance event\nclass event_cls_members event\nclass event_mod_members event\nclassDef event stroke:#3cc,stroke-width:2</code></pre> <p>Hopefully this flowchart gives you a pretty good idea of what happens when Griffe collects data from a Python module. The next section will explain in more details the different events that are triggered, and how to hook onto them in your extensions.</p>"},{"location":"guide/users/extending/#events-and-hooks","title":"Events and hooks","text":"<p>There are two kinds of events in Griffe: load events and analysis events. Load events are scoped to the Griffe loader. Analysis events are scoped to the visitor and inspector agents (triggered during static and dynamic analysis).</p>"},{"location":"guide/users/extending/#load-events","title":"Load events","text":"<p>There are two load events:</p> <ul> <li><code>on_package_loaded</code>: The \"on package loaded\" event is triggered when the loader has finished loading a package entirely, i.e. when all its submodules were scanned and loaded. This event can be hooked by extensions which require the whole package to be loaded, to be able to navigate the object tree without raising lookup errors or alias resolution errors.</li> <li><code>on_wildcard_expansion</code>: The \"on wildcard expansion\" event is triggered for each alias that is created by expanding wildcard imports (<code>from ... import *</code>).</li> </ul>"},{"location":"guide/users/extending/#analysis-events","title":"Analysis events","text":"<p>There are 3 generic analysis events:</p> <ul> <li><code>on_node</code>: The \"on node\" events are triggered when the agent (visitor or inspector) starts handling a node in the tree (AST or object tree).</li> <li><code>on_instance</code>: The \"on instance\" events are triggered when the agent just created an instance of Module, Class, Function, or Attribute, and added it as a member of its parent. The \"on instance\" event is not triggered when an Alias is created.</li> <li><code>on_members</code>: The \"on members\" events are triggered when the agent just finished handling all the members of an object. Functions and attributes do not have members, so there are no \"on members\" events for these two kinds.</li> </ul> <p>There are also specific analysis events for each object kind:</p> <ul> <li><code>on_module_node</code></li> <li><code>on_module_instance</code></li> <li><code>on_module_members</code></li> <li><code>on_class_node</code></li> <li><code>on_class_instance</code></li> <li><code>on_class_members</code></li> <li><code>on_function_node</code></li> <li><code>on_function_instance</code></li> <li><code>on_attribute_node</code></li> <li><code>on_attribute_instance</code></li> </ul> <p>And a special event for aliases:</p> <ul> <li><code>on_alias</code>: The \"on alias\" event is triggered when an Alias was just created and added as a member of its parent object.</li> </ul> <p>Hooks are methods that are called when a particular event is triggered. To target a specific event, the hook must be named after it.</p> <p>Extensions are classes that inherit from Griffe's Extension base class and define some hooks as methods:</p> <pre><code>import ast\nimport griffe\n\n\nclass MyExtension(griffe.Extension):\n    def on_instance(\n        self,\n        node: ast.AST | griffe.ObjectNode,\n        obj: griffe.Object,\n        agent: griffe.Visitor | griffe.Inspector,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Do something with `node` and/or `obj`.\"\"\"\n</code></pre> <p>Hooks are always defined as methods of a class inheriting from Extension, never as standalone functions. IDEs should autocomplete the signature when you start typing <code>def</code> followed by a hook name.</p> <p>Since hooks are declared in a class, feel free to also declare state variables (or any other variable) in the <code>__init__</code> method:</p> <pre><code>import ast\nfrom griffe import Extension, Object, ObjectNode\n\n\nclass MyExtension(Extension):\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.state_thingy = \"initial stuff\"\n        self.list_of_things = []\n\n    def on_instance(\n        self,\n        node: ast.AST | griffe.ObjectNode,\n        obj: griffe.Object,\n        agent: griffe.Visitor | griffe.Inspector,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Do something with `node` and/or `obj`.\"\"\"\n</code></pre>"},{"location":"guide/users/extending/#staticdynamic-support","title":"Static/dynamic support","text":"<p>Extensions can support both static and dynamic analysis of modules. If a module is scanned statically, your extension hooks will receive AST nodes (from the ast module of the standard library). If the module is scanned dynamically, your extension hooks will receive object nodes. Similarly, your hooks will receive a reference to the analysis agent that calls them, either a Visitor or an Inspector.</p> <p>To support static analysis, dynamic analysis, or both, you can therefore check the type of the received node or agent:</p> <pre><code>import ast\nimport griffe\n\n\nclass MyExtension(griffe.Extension):\n    def on_instance(\n        self,\n        node: ast.AST | griffe.ObjectNode,\n        obj: griffe.Object,\n        agent: griffe.Visitor | griffe.Inspector,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Do something with `node` and/or `obj`.\"\"\"\n        if isinstance(node, ast.AST):\n            ...  # Apply logic for static analysis.\n        else:\n            ...  # Apply logic for dynamic analysis.\n</code></pre> <pre><code>import ast\nimport griffe\n\n\nclass MyExtension(Extension):\n    def on_instance(\n        self,\n        node: ast.AST | griffe.ObjectNode,\n        obj: griffe.Object,\n        agent: griffe.Visitor | griffe.Inspector,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Do something with `node` and/or `obj`.\"\"\"\n        if isinstance(agent, griffe.Visitor):\n            ...  # Apply logic for static analysis.\n        else:\n            ...  # Apply logic for dynamic analysis.\n</code></pre> <p>The preferred method is to check the type of the received node rather than the agent.</p> <p>Since hooks also receive instantiated modules, classes, functions and attributes, most of the time you will not need to use the <code>node</code> argument other than for checking its type and deciding what to do based on the result. And since we always add <code>**kwargs</code> to the hooks' signatures, you can drop any parameter you don't use from the signature:</p> <pre><code>import griffe\n\n\nclass MyExtension(Extension):\n    def on_instance(self, obj: griffe.Object, **kwargs) -&gt; None:\n        \"\"\"Do something with `obj`.\"\"\"\n        ...\n</code></pre>"},{"location":"guide/users/extending/#visiting-trees","title":"Visiting trees","text":"<p>Extensions provide basic functionality to help you visit trees:</p> <ul> <li><code>visit</code>: call <code>self.visit(node)</code> to start visiting an abstract syntax tree.</li> <li><code>generic_visit</code>: call <code>self.generic_visit(node)</code> to visit each subnode of a given node.</li> <li><code>inspect</code>: call <code>self.inspect(node)</code> to start visiting an object tree. Nodes contain references to the runtime objects, see <code>ObjectNode</code>.</li> <li><code>generic_inspect</code>: call <code>self.generic_inspect(node)</code> to visit each subnode of a given node.</li> </ul> <p>Calling <code>self.visit(node)</code> or <code>self.inspect(node)</code> will do nothing unless you actually implement methods that handle specific types of nodes:</p> <ul> <li> <p>for ASTs, methods must be named <code>visit_&lt;node_type&gt;</code> where <code>&lt;node_type&gt;</code> is replaced with the lowercase name of the node's class. For example, to allow visiting <code>ClassDef</code> nodes, you must implement the <code>visit_classdef</code> method:</p> <pre><code>import ast\nfrom griffe import Extension\n\n\nclass MyExtension(Extension):\n    def visit_classdef(node: ast.ClassDef) -&gt; None:\n        # Do something with the node...\n        ...\n        # ...then visit the subnodes\n        # (it only makes sense if you implement other methods\n        # such as visit_functiondef or visit_assign for example).\n        self.generic_visit(node)\n</code></pre> <p>See the list of existing AST classes to learn what method you can implement.</p> </li> <li> <p>for object trees, methods must be named <code>inspect_&lt;node_type&gt;</code>, where <code>&lt;node_type&gt;</code> is replaced with the string value of the node's kind. The different kinds are listed in the <code>ObjectKind</code> enumeration. For example, to allow inspecting coroutine nodes, you must implement the <code>inspect_coroutine</code> method:</p> <pre><code>from griffe import Extension, ObjectNode\n\n\nclass MyExtension(Extension):\n    def inspect_coroutine(node: ObjectNode) -&gt; None:\n        # Do something with the node...\n        ...\n        # ...then visit the subnodes if it makes sense.\n        self.generic_inspect(node)\n</code></pre> </li> </ul>"},{"location":"guide/users/extending/#triggering-other-extensions","title":"Triggering other extensions","text":"<p>If your extension creates new objects, you might want to trigger the other enabled extensions on these object instances. To do this you can use <code>agent.extensions.call</code>:</p> <pre><code>import ast\nimport griffe\n\n\nclass MyExtension(griffe.Extension):\n    def on_node(self, node: ast.AST | griffe.ObjectNode, agent: griffe.Visitor | griffe.Inspector, **kwargs) -&gt; None:\n        # New object created for whatever reason.\n        function = griffe.Function(...)\n\n        # Trigger other extensions.\n        agent.extensions.call(\"on_function_instance\", node=node, agent=agent, func=function, **kwargs)\n</code></pre>"},{"location":"guide/users/extending/#extra-data","title":"Extra data","text":"<p>All Griffe objects (modules, classes, functions, attributes) can store additional (meta)data in their <code>extra</code> attribute. This attribute is a dictionary of dictionaries. The first layer is used as namespacing: each extension writes into its own namespace, or integrates with other projects by reading/writing in their namespaces, according to what they support and document.</p> <pre><code>import griffe\n\nself_namespace = \"my_extension\"\n\n\nclass MyExtension(griffe.Extension):\n    def on_instance(self, obj: griffe.Object, **kwargs) -&gt; None:\n        obj.extra[self_namespace][\"some_key\"] = \"some_value\"\n</code></pre> <p>For example, mkdocstrings-python looks into the <code>mkdocstrings</code> namespace for a <code>template</code> key. Extensions can therefore provide a custom template value by writing into <code>extra[\"mkdocstrings\"][\"template\"]</code>:</p> <pre><code>import griffe\n\nself_namespace = \"my_extension\"\nmkdocstrings_namespace = \"mkdocstrings\"\n\n\nclass MyExtension(griffe.Extension):\n    def on_class_instance(self, cls: griffe.Class, **kwargs) -&gt; None:\n        obj.extra[mkdocstrings_namespace][\"template\"] = \"my_custom_template\"\n</code></pre> <p>Read more about mkdocstrings handler extensions.</p>"},{"location":"guide/users/extending/#options","title":"Options","text":"<p>Extensions can be made to support options. These options can then be passed from the command-line using JSON, from Python directly, or from other tools like MkDocs, in <code>mkdocs.yml</code>.</p> <pre><code>import griffe\n\n\nclass MyExtension(griffe.Extension):\n    def __init__(self, option1: str, option2: bool = False) -&gt; None:\n        super().__init__()\n        self.option1 = option1\n        self.option2 = option2\n\n    def on_attribute_instance(self, attr: griffe.Attribute, **kwargs) -&gt; None:\n        if self.option2:\n            ...  # Do something.\n</code></pre>"},{"location":"guide/users/extending/#logging","title":"Logging","text":"<p>To better integrate with Griffe and other tools in the ecosystem (notably MkDocs), use Griffe loggers to log messages:</p> <pre><code>import griffe\n\nlogger = griffe.get_logger(__name__)\n\n\nclass MyExtension(griffe.Extension):\n    def on_module_members(self, mod: griffe.Module, **kwargs) -&gt; None:\n        logger.info(\"Doing some work on module %s and its members\", mod.path)\n</code></pre>"},{"location":"guide/users/extending/#full-example","title":"Full example","text":"<p>The following example shows how one could write a \"dynamic docstrings\" extension that dynamically imports objects that declare their docstrings dynamically, to improve support for such docstrings. The extension is configurable to run only on user-selected objects.</p> <p>Package structure (or just write your extension in a local script):</p> <pre><code>\ud83d\udcc1 ./\n\u251c\u2500\u2500  pyproject.toml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 dynamic_docstrings/\n        \u251c\u2500\u2500  __init__.py\n        \u2514\u2500\u2500  extension.py\n</code></pre> ./src/dynamic_docstrings/extension.py<pre><code>import ast\nimport inspect\nimport griffe\n\nlogger = griffe.get_logger(__name__)\n\n\nclass DynamicDocstrings(griffe.Extension):\n    def __init__(self, object_paths: list[str] | None = None) -&gt; None:\n        self.object_paths = object_paths\n\n    def on_instance(\n        self,\n        node: ast.AST | griffe.ObjectNode,\n        obj: griffe.Object,\n        agent: griffe.Visitor | griffe.Inspector,\n        **kwargs,\n    ) -&gt; None:\n        if isinstance(node, griffe.ObjectNode):\n            return  # Skip runtime objects, their docstrings are already right.\n\n        if self.object_paths and obj.path not in self.object_paths:\n            return  # Skip objects that were not selected.\n\n        # Import object to get its evaluated docstring.\n        try:\n            runtime_obj = griffe.dynamic_import(obj.path)\n            docstring = runtime_obj.__doc__\n        except ImportError:\n            logger.debug(f\"Could not get dynamic docstring for {obj.path}\")\n            return\n        except AttributeError:\n            logger.debug(f\"Object {obj.path} does not have a __doc__ attribute\")\n            return\n\n        # Update the object instance with the evaluated docstring.\n        docstring = inspect.cleandoc(docstring)\n        if obj.docstring:\n            obj.docstring.value = docstring\n        else:\n            obj.docstring = griffe.Docstring(\n                docstring,\n                parent=obj,\n                docstring_parser=agent.docstring_parser,\n                docstring_options=agent.docstring_options,\n            )\n</code></pre> <p>You can then expose this extension in the top-level module of your package:</p> ./src/dynamic_docstrings/__init__.py<pre><code>from dynamic_docstrings.extension import DynamicDocstrings\n\n__all__ = [\"DynamicDocstrings\"]\n</code></pre> <p>This will allow users to load and use this extension by referring to it as <code>dynamic_docstrings</code> (your Python package name).</p> <p>See how to use extensions to learn more about how to load and use your new extension.</p>"},{"location":"guide/users/extending/#ast-nodes","title":"AST nodes","text":"<p> <ul> <li><code>Add</code></li> <li><code>alias</code></li> <li><code>And</code></li> <li><code>AnnAssign</code></li> <li><code>arg</code></li> <li><code>arguments</code></li> <li><code>Assert</code></li> <li><code>Assign</code></li> <li><code>AsyncFor</code></li> <li><code>AsyncFunctionDef</code></li> <li><code>AsyncWith</code></li> <li><code>Attribute</code></li> <li><code>AugAssign</code></li> <li><code>Await</code></li> <li><code>BinOp</code></li> <li><code>BitAnd</code></li> <li><code>BitOr</code></li> <li><code>BitXor</code></li> <li><code>BoolOp</code></li> <li><code>Break</code></li> <li><code>Bytes</code><sup>1</sup></li> <li><code>Call</code></li> <li><code>ClassDef</code></li> <li><code>Compare</code></li> <li><code>comprehension</code></li> <li><code>Constant</code></li> <li><code>Continue</code></li> <li><code>Del</code></li> <li><code>Delete</code></li> </ul> <p> <ul> <li><code>Dict</code></li> <li><code>DictComp</code></li> <li><code>Div</code></li> <li><code>Ellipsis</code><sup>1</sup></li> <li><code>Eq</code></li> <li><code>ExceptHandler</code></li> <li><code>Expr</code></li> <li><code>Expression</code><sup>1</sup></li> <li><code>ExtSlice</code><sup>2</sup></li> <li><code>FloorDiv</code></li> <li><code>For</code></li> <li><code>FormattedValue</code></li> <li><code>FunctionDef</code></li> <li><code>GeneratorExp</code></li> <li><code>Global</code></li> <li><code>Gt</code></li> <li><code>GtE</code></li> <li><code>If</code></li> <li><code>IfExp</code></li> <li><code>Import</code></li> <li><code>ImportFrom</code></li> <li><code>In</code></li> <li><code>Index</code><sup>2</sup></li> <li><code>Interactive</code><sup>3</sup></li> <li><code>Invert</code></li> <li><code>Is</code></li> <li><code>IsNot</code></li> <li><code>JoinedStr</code></li> <li><code>keyword</code></li> </ul> <p> <ul> <li><code>Lambda</code></li> <li><code>List</code></li> <li><code>ListComp</code></li> <li><code>Load</code></li> <li><code>LShift</code></li> <li><code>Lt</code></li> <li><code>LtE</code></li> <li><code>Match</code></li> <li><code>MatchAs</code></li> <li><code>match_case</code></li> <li><code>MatchClass</code></li> <li><code>MatchMapping</code></li> <li><code>MatchOr</code></li> <li><code>MatchSequence</code></li> <li><code>MatchSingleton</code></li> <li><code>MatchStar</code></li> <li><code>MatchValue</code></li> <li><code>MatMult</code></li> <li><code>Mod</code></li> <li><code>Module</code><sup>3</sup></li> <li><code>Mult</code></li> <li><code>Name</code></li> <li><code>NameConstant</code><sup>1</sup></li> <li><code>NamedExpr</code></li> <li><code>Nonlocal</code></li> <li><code>Not</code></li> <li><code>NotEq</code></li> <li><code>NotIn</code></li> <li><code>Num</code><sup>1</sup></li> </ul> <p> <ul> <li><code>Or</code></li> <li><code>Pass</code></li> <li><code>pattern</code><sup>3</sup></li> <li><code>Pow</code></li> <li><code>Print</code><sup>4</sup></li> <li><code>Raise</code></li> <li><code>Return</code></li> <li><code>RShift</code></li> <li><code>Set</code></li> <li><code>SetComp</code></li> <li><code>Slice</code></li> <li><code>Starred</code></li> <li><code>Store</code></li> <li><code>Str</code><sup>1</sup></li> <li><code>Sub</code></li> <li><code>Subscript</code></li> <li><code>Try</code></li> <li><code>TryExcept</code><sup>5</sup></li> <li><code>TryFinally</code><sup>6</sup></li> <li><code>Tuple</code></li> <li><code>UAdd</code></li> <li><code>UnaryOp</code></li> <li><code>USub</code></li> <li><code>While</code></li> <li><code>With</code></li> <li><code>withitem</code></li> <li><code>Yield</code></li> <li><code>YieldFrom</code></li> </ul> <p></p>"},{"location":"guide/users/extending/#next-steps","title":"Next steps","text":"<p>Extensions are a powerful mechanism to customize or enhance the data loaded by Griffe. But sometimes, all you need to do to improve the data is to make Griffe happy by following a few conventions. We therefore invite you to read our recommendations on public APIs, Python code best practices and docstrings.</p> <ol> <li> <p>Deprecated since Python 3.8.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Deprecated since Python 3.9.\u00a0\u21a9\u21a9</p> </li> <li> <p>Not documented.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p><code>print</code> became a builtin (instead of a keyword) in Python 3.\u00a0\u21a9</p> </li> <li> <p>Now <code>ExceptHandler</code>, in the <code>handlers</code> attribute of <code>Try</code> nodes.\u00a0\u21a9</p> </li> <li> <p>Now a list of expressions in the <code>finalbody</code> attribute of <code>Try</code> nodes.\u00a0\u21a9</p> </li> </ol>"},{"location":"guide/users/loading/","title":"Loading APIs","text":"<p>Griffe can load API data from both source code (static analysis) and objects at runtime through introspection (dynamic analysis). Both static and dynamic analysis can be used at the same time: Griffe will first try to find sources, and will fall back to introspection if it cannot find any. When Griffe finds compiled modules within a packages, it uses introspection again to extract API information. There are various options to configure how Griffe loads data, for example to force or disallow dynamic analysis, but first let see the interface.</p>"},{"location":"guide/users/loading/#the-load-function","title":"The <code>load</code> function","text":"<p>The main interface to load API data is Griffe's <code>load</code> function:</p> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\")\n</code></pre> <p>You can ask to load a specific object rather than a package:</p> <pre><code>import griffe\n\nmy_method = griffe.load(\"my_package.MyClass.my_method\")\n</code></pre> <p>Griffe will load the whole package anyway, but return the specified object directly, so that you don't have to access it manually. To manually access the object representing the method called <code>my_method</code>, you would have used the <code>my_package</code> variable instantiated before, like this:</p> <pre><code>my_method = my_package[\"MyClass.my_method\"]\n</code></pre> <p>The Navigating topic will show you all the ways Griffe objects can be navigated.</p> <p>Finally, you can even load packages or modules by passing absolute or relative file paths. This is useful when the module or package is not installed within the current Python environment and therefore cannot be found in the default search paths (see Search paths below).</p> <pre><code>import griffe\n\ngriffe.load(\"src/my_package\")\ngriffe.load(\"some_script.py\")\n</code></pre> <p>In case of ambiguity, you can instruct Griffe to ignore existing relative file paths with <code>try_relative_paths=False</code>. For example, when using the flat layout (in contrast to the src-layout), your Python package is in the root of the repository.</p> <pre><code>\ud83d\udcc1 ./\n\u251c\u2500\u2500 \ud83d\udcc1 my_package/\n\u2502   \u2514\u2500\u2500  __init__.py\n\u2514\u2500\u2500  pyproject.toml\n</code></pre> <p>Here if you ask Griffe to load <code>my_package</code>, it will find it as a relative path, in <code>./my_package</code>. If you want Griffe to use the version installed in your environment's site packages instead, set <code>try_relative_path</code> to false:</p> <pre><code>import griffe\n\nmy_installed_package = griffe.load(\"my_package\", try_relative_path=False)\n</code></pre>"},{"location":"guide/users/loading/#the-griffeloader-class","title":"The <code>GriffeLoader</code> class","text":"<p>The <code>load</code> function is a shortcut for instantiating the <code>GriffeLoader</code> class and calling its <code>load</code> method. Calling the <code>load</code> function multiple times will instantiate a new Griffe loader each time. If you care about efficiency, it is better to instantiate the loader yourself and use its <code>load</code> method:</p> <pre><code>import griffe\n\nloader = GriffeLoader()\nmy_package = loader.load(\"my_package\")\nmy_other_package = loader.load(\"my_other_package\")\n</code></pre> <p>Keeping a reference to the loader will reduce the number of IO operations on the file-system, as the contents of the directories that the loader searches into will be cached (only the lists of files and directories will be cached, not the file contents).</p> <p>Reusing the same loader will also help resolving aliases across different packages. See Alias resolution below.</p>"},{"location":"guide/users/loading/#search-paths","title":"Search paths","text":"<p>To specify in which directories Griffe should search for packages and modules, you can use the <code>search_paths</code> parameter on both the <code>load</code> function and the <code>GriffeLoader</code> class.</p> <code>load</code><code>GriffeLoader</code> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\", search_paths=[\"src\"])\n</code></pre> <pre><code>import griffe\n\nloader = GriffeLoader(search_paths=[\"src\"])\nmy_package = loader.load(\"my_package\")\n</code></pre> <p>By default it will search in the paths found in <code>sys.path</code>, which can be influenced through the <code>PYTHONPATH</code> environment variable.</p> <p>If Griffe cannot find sources for the specified object in the given search paths, it will try to import the specified object and use dynamic analysis on it (introspection). See Forcing dynamic analysis and Disallowing dynamic analysis.</p>"},{"location":"guide/users/loading/#forcing-dynamic-analysis","title":"Forcing dynamic analysis","text":"<p>Griffe always tries first to find sources for the specified object. Then, unless told otherwise, it uses static analysis to load API data, i.e. it parses the sources and visits the AST (Abstract Syntax Tree) to extract information. If for some reason you want Griffe to use dynamic analysis instead (importing and inspecting runtime objects), you can pass the <code>force_inspection=True</code> argument:</p> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\", force_inspection=True)\n</code></pre> <p> Forcing inspection can be useful when your code is highly dynamic, and static analysis has trouble keeping up.</p> <p>However we don't recommend forcing inspection, for a few reasons:</p> <ul> <li>dynamic analysis requires that you either mock your dependencies, or install them</li> <li>dynamic analysis will execute code, possibly arbitrary code if you import third-party dependencies, putting you at risk</li> <li>dynamic analysis will potentially consume more resources (CPU, RAM) since it executes code</li> <li>dynamic analysis will sometimes give you less precise or incomplete information</li> <li>it's possible to write Griffe extensions that will statically handle the highly dynamic parts of your code (like custom decorators) that Griffe doesn't understand by default</li> <li>if really needed, it's possible to handle only a subset of objects with dynamic analysis, while the rest is loaded with static analysis, again thanks to Griffe extensions</li> </ul> <p>The Extending topic will explain how to write and use extensions for Griffe.</p>"},{"location":"guide/users/loading/#disallowing-dynamic-analysis","title":"Disallowing dynamic analysis","text":"<p>If you want to be careful about what gets executed in the current Python process, you can choose to disallow dynamic analysis by passing the <code>allow_inspection=False</code> argument. If Griffe cannot find sources for a package, it will not try to import it and will instead fail with a <code>ModuleNotFoundError</code> directly.</p> <pre><code>import griffe\n\n# Here Griffe will fall back on dynamic analysis and import `itertools`.\ngriffe.load(\"itertools\")\n\n# While here it will raise `ModuleNotFoundError`.\ngriffe.load(\"itertools\", allow_inspection=False)\n</code></pre>"},{"location":"guide/users/loading/#alias-resolution","title":"Alias resolution","text":"What's that? <p>In Griffe, indirections to objects are called aliases. These indirections, or aliases, represent two kinds of objects: imported objects and inherited objects. Indeed, an imported object is \"aliased\" in the module that imports it, while its true location is in the module it was imported from. Similarly, a method inherited from a parent class is \"aliased\" in the subclass, while its true location is in the parent class.</p> <p>The name \"alias\" comes from the fact that imported objects can be aliased under a different name: <code>from X import A as B</code>. In the case of inherited members, this doesn't really apply, but we reuse the concept for conciseness.</p> <p>An <code>Alias</code> instance is therefore a pointer to another object. It has its own name, parent, line numbers, and stores the path to the target object. Thanks to this path, we can access the actual target object and all its metadata, such as name, parent, line numbers, docstring, etc.. Obtaining a reference to the target object is what we call \"alias resolution\".</p> <p>To summarize, alias resolution is a post-process task that resolves imports after loading everything.</p> <p>To resolve an alias, i.e. obtain a reference to the object it targets, we have to wait for this object to be loaded. Indeed, during analysis, objects are loaded in breadth-first order (in the object hierarchy, highest objects are loaded first, deepest ones are loaded last), so when we encounter an imported object, we often haven't loaded this object yet.</p> <p>Once a whole package is loaded, we are ready to try and resolve all aliases. But we don't have to resolve them. First, because the user might not need aliases to be resolved, and second, because each alias can be resolved individually and transparently when accessing its target object properties.</p> <p>Therefore, alias resolution is optional and enabled with the <code>resolve_aliases</code> parameter.</p> <p>Lets take an example.</p> File layout<pre><code>\ud83d\udcc1 ./\n\u2514\u2500\u2500 \ud83d\udcc1 my_package/\n    \u251c\u2500\u2500  __init__.py\n    \u2514\u2500\u2500  my_module.py\n</code></pre> my_package/__init__.py<pre><code>from my_package.my_module import my_function\n</code></pre> my_package/my_module.py<pre><code>def my_function():\n    print(\"hello\")\n</code></pre> <p>When loading this package, <code>my_package.my_function</code> will be an alias pointing at <code>my_package.my_module.my_function</code>:</p> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\")\nmy_package[\"my_function\"].resolved  # False\n</code></pre> <pre><code>import griffe\n\nmy_package = griffe.load(\"my_package\", resolve_aliases=True)\nmy_package[\"my_function\"].resolved  # True\nmy_package[\"my_function\"].target is my_package[\"my_module.my_function\"]  # True\n</code></pre> <p>The Navigating topic will tell you more about aliases and how they behave.</p>"},{"location":"guide/users/loading/#modules-collection","title":"Modules collection","text":"<p>In the first section of this page, we briefly mentioned that Griffe always loads the entire package containing the object you requested. One of the reasons it always loads entire packages and not just single, isolated objects, is that alias resolution requires all objects of a package to be loaded. Which means that if an alias points to an object that is part of another package, it can only be resolved if the other package is also loaded. For example:</p> File layout<pre><code>\ud83d\udcc1 ./\n\u251c\u2500\u2500 \ud83d\udcc1 package1/\n\u2502   \u2514\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 package2/\n    \u2514\u2500\u2500  __init__.py\n</code></pre> package1/__init__.py<pre><code>X = 0\n</code></pre> package2/__init__.py<pre><code>from package1 import X\n</code></pre> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; package2 = griffe.load(\"package2\", resolve_aliases=True)\n&gt;&gt;&gt; package2[\"X\"].target_path\n'package1.X'\n&gt;&gt;&gt; package2[\"X\"].resolved\nFalse\n&gt;&gt;&gt; package2[\"X\"].target\nTraceback (most recent call last):\n  File \"_griffe/dataclasses.py\", line 1375, in _resolve_target\n    resolved = self.modules_collection.get_member(self.target_path)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"_griffe/mixins.py\", line 84, in get_member\n    return self.members[parts[0]].get_member(parts[1:])  # type: ignore[attr-defined]\n           ~~~~~~~~~~~~^^^^^^^^^^\nKeyError: 'package1'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"_griffe/dataclasses.py\", line 1310, in target\n    self.resolve_target()\n  File \"_griffe/dataclasses.py\", line 1369, in resolve_target\n    self._resolve_target()\n  File \"_griffe/dataclasses.py\", line 1377, in _resolve_target\n    raise AliasResolutionError(self) from error\n_griffe.exceptions.AliasResolutionError: Could not resolve alias package2.X pointing at package1.X (in package2/__init__.py:1)\n</code></pre> <p>As you can see in the interpreter session above, Griffe did not resolve the <code>X</code> alias. When we tried to access its target object anyway, it failed with a <code>KeyError</code>, which was raised again as an <code>AliasResolutionError</code>.</p> <p>Lets try again, but this time by loading both packages.</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; package1 = griffe.load(\"package1\")  # nothing to resolve\n&gt;&gt;&gt; package2 = griffe.load(\"package2\", resolve_aliases=True)\n&gt;&gt;&gt; package2[\"X\"].target_path\n'package1.X'\n&gt;&gt;&gt; package2[\"X\"].resolved\nFalse  # Hmm?\n&gt;&gt;&gt; package2[\"X\"].target\nTraceback (most recent call last):\n...\n_griffe.exceptions.AliasResolutionError: Could not resolve alias package2.X pointing at package1.X (in package2/__init__.py:1)\n</code></pre> <p>The same exception again? What happened here? We loaded both packages, but Griffe still failed to resolve the alias. That is expected; here is the explanation.</p> <p>If you look closely at the first exception traceback, you will see that Griffe searched the target path in <code>self.modules_collection</code>. So what is this modules collection?</p> <p>Each instance of <code>GriffeLoader</code> holds a reference to an instance of <code>ModulesCollection</code>. If you don't create such a collection manually to pass it to the loader, it will instantiate one itself. All objects loaded with this loader are added to this very modules collection, and gain a reference to it.</p> <p>Since the <code>load</code> function is just a shortcut for creating a loader and calling its <code>load</code> method, when we called <code>griffe.load(...)</code> twice, it actually created two distinct collections of modules. When Griffe tried to resolve aliases of <code>package2</code>, it looked for <code>package1</code> in <code>package2</code>'s collection, and couldn't find it. Indeed, <code>package1</code> was in another modules collection.</p> <p>Therefore, to resolve aliases across different packages, these packages must be loaded within the same modules collection. In order to do that, you have a few options:</p> <ul> <li>instantiate a single loader, and use it to load both packages</li> <li>create your own modules collection, and pass it to the <code>load</code> function each time you call it</li> <li>create your own modules collection, and pass it to the different instances of <code>GriffeLoader</code> you create</li> </ul> Same loaderSame collection with <code>load</code>Same collection, different loaders <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; loader = griffe.GriffeLoader()\n&gt;&gt;&gt; package1 = loader.load(\"package1\")\n&gt;&gt;&gt; package2 = loader.load(\"package2\")\n&gt;&gt;&gt; loader.resolve_aliases()\n&gt;&gt;&gt; package2[\"X\"].resolved\nTrue\n&gt;&gt;&gt; package2[\"X\"].target\nAttribute('X', lineno=1, endlineno=1)\n</code></pre> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; collection = griffe.ModulesCollection()\n&gt;&gt;&gt; package1 = griffe.load(\"package1\", modules_collection=collection)\n&gt;&gt;&gt; package2 = griffe.load(\"package2\", modules_collection=collection, resolve_aliases=True)\n&gt;&gt;&gt; package2[\"X\"].resolved\nTrue\n&gt;&gt;&gt; package2[\"X\"].target\nAttribute('X', lineno=1, endlineno=1)\n</code></pre> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; collection = griffe.ModulesCollection()\n&gt;&gt;&gt; loader1 = griffe.GriffeLoader(modules_collection=collection, ...)\n&gt;&gt;&gt; package1 = loader1.load(\"package1\")\n&gt;&gt;&gt; loader2 = griffe.GriffeLoader(modules_collection=collection, ...)  # different parameters\n&gt;&gt;&gt; package2 = loader2.load(\"package2\")\n&gt;&gt;&gt; package2[\"X\"].resolved\nTrue\n&gt;&gt;&gt; package2[\"X\"].target\nAttribute('X', lineno=1, endlineno=1)\n</code></pre> <p>There is no preferred way, it depends on whether you need to instantiate different loaders with different parameters (search paths for example) while keeping every loaded module in the same collection, or if a single loader is enough, or if you explicitly need a reference to the collection, etc..</p>"},{"location":"guide/users/loading/#loading-external-packages-automatically","title":"Loading external packages automatically","text":"<p>By default, when resolving aliases, Griffe loaders will not be able to resolve aliases pointing at objects from \"external\" packages. By external, we mean that these packages are external to the current modules collection: they are not loaded. But sometimes users don't know in advance which packages need to be loaded in order to resolve aliases (and compute class inheritance). For these cases, Griffe loaders can be instructed to automatically load external packages. If we take the previous example again:</p> <pre><code>import griffe\n\npackage2 = griffe.load(\"package2\", resolve_aliases=True, resolve_external=True)\nprint(package2[\"X\"].target.name)  # X\n</code></pre> <p>Here Griffe automatically loaded <code>package1</code> while resolving aliases, even though we didn't explicitly load it ourselves.</p> <p>While automatically resolving aliases pointing at external packages can be convenient, we advise cautiousness: this can trigger the loading of a lot of external packages, recursively.</p> <p>One special case that we must mention is that Griffe will by default automatically load private sibling packages. For example, when resolving aliases for the <code>ast</code> module, Griffe will automatically try and load <code>_ast</code> too (if dynamic analysis is allowed, since this is a builtin module), even without <code>resolve_external=True</code>. If you want to prevent this behavior, you can pass <code>resolve_external=False</code> (it is <code>None</code> by default).</p>"},{"location":"guide/users/loading/#next-steps","title":"Next steps","text":"<p>Now that the API is loaded, you can start navigating it, serializing it or checking for API breaking changes. If you find out that the API data is incorrect or incomplete, you might want to learn how to extend it.</p>"},{"location":"guide/users/navigating/","title":"Navigating APIs","text":"<p>Griffe loads API data into data models. These models provide various attributes and methods to access or update specific fields. The different models are:</p> <ul> <li><code>Module</code>, representing Python modules;</li> <li><code>Class</code>, representing Python classes;</li> <li><code>Function</code>, representing Python functions and class methods;</li> <li><code>Attribute</code>, representing object attributes that weren't identified as modules, classes or functions;</li> <li><code>Alias</code>, representing indirections such as imported objects or class members inherited from parent classes.</li> </ul> <p>When loading an object, Griffe will give you back an instance of one of these models. A few examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; type(griffe.load(\"markdown\"))\n&lt;class '_griffe.models.Module'&gt;\n&gt;&gt;&gt; type(griffe.load(\"markdown.core.Markdown\"))\n&lt;class '_griffe.models.Class'&gt;\n&gt;&gt;&gt; type(griffe.load(\"markdown.Markdown\"))\n&lt;class '_griffe.models.Alias'&gt;\n&gt;&gt;&gt; type(griffe.load(\"markdown.core.markdown\"))\n&lt;class '_griffe.models.Function'&gt;\n&gt;&gt;&gt; type(griffe.load(\"markdown.markdown\"))\n&lt;class '_griffe.models.Alias'&gt;\n&gt;&gt;&gt; type(griffe.load(\"markdown.Markdown.references\"))\n&lt;class '_griffe.models.Attribute'&gt;\n</code></pre> <p>However deep the object is, Griffe loads the entire package. It means that in all the cases above, Griffe loaded the whole <code>markdown</code> package. The model instance Griffe gives you back is therefore part of a tree that you can navigate.</p>"},{"location":"guide/users/navigating/#moving-up-parents","title":"Moving up: parents","text":"<p>Each object holds a reference to its <code>parent</code> (except for the top-level module, for which the parent is <code>None</code>). Shortcuts are provided to climb up directly to the parent <code>module</code>, or the top-level <code>package</code>. As we have seen in the Loading chapter, Griffe stores all loaded modules in a modules collection; this collection can be accessed too, through the <code>modules_collection</code> attribute.</p>"},{"location":"guide/users/navigating/#moving-down-members","title":"Moving down: members","text":"<p>To access an object's members, there are a few options:</p> <ul> <li> <p>Access to regular members through the <code>members</code> attribute, which is a dictionary. The keys are member names, the values are Griffe models.</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.members[\"Markdown\"]\nAlias('Markdown', 'markdown.core.Markdown')\n&gt;&gt;&gt; markdown.members[\"core\"].members[\"Markdown\"]\nClass('Markdown', 46, 451)\n</code></pre> </li> <li> <p>Access to both regular and inherited members through the <code>all_members</code> attribute, which is a dictionary again. See Inherited members.</p> </li> <li> <p>Convenient dictionary-like item access, thanks to the subscript syntax <code>[]</code>. With this syntax, you will not only be able to chain accesses, but also merge them into a single access by using dot-separated paths to objects:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core\"][\"Markdown\"]  # chained access\nClass('Markdown', 46, 451)\n&gt;&gt;&gt; markdown[\"core.Markdown\"]  # merged access\nClass('Markdown', 46, 451)\n</code></pre> <p>The dictionary-like item access also accepts tuples of strings. So if for some reason you don't have a string equal to <code>\"core.Markdown\"</code> but a tuple equal to <code>(\"core\", \"Markdown\")</code> (for example obtained from splitting another string), you can use it too:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[(\"core\", \"Markdown\")]  # tuple access\nClass('Markdown', 46, 451)\n&gt;&gt;&gt; # Due to the nature of the subscript syntax,\n&gt;&gt;&gt; # you can even use implicit tuples.\n&gt;&gt;&gt; markdown[\"core\", \"Markdown\"]\nClass('Markdown', 46, 451)\n</code></pre> </li> <li> <p>Less convenient, but safer access to members while the object tree is being built (while a package is still being loaded), using the <code>get_member()</code> method.</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.get_member(\"core.Markdown\")\nClass('Markdown', 46, 451)\n</code></pre> <p>In particular, Griffe extensions should always use <code>get_member</code> instead of the subscript syntax <code>[]</code>. The <code>get_member</code> method only looks into regular members, while the subscript syntax looks into inherited members too (for classes), which cannot be correctly computed until a package is fully loaded (which is generally not the case when an extension is running).</p> </li> <li> <p>In addition to this, models provide the <code>attributes</code>, <code>functions</code>, <code>classes</code> or <code>modules</code> attributes, which return only members of the corresponding kind. These attributes are computed dynamically each time (they are Python properties).</p> </li> </ul> <p>The same way members are accessed, they can also be set:</p> <ul> <li>Dictionary-like item assignment: <code>markdown[\"thing\"] = ...</code>, also supporting dotted-paths and string tuples. This will (re)assign only regular members: inherited members (classes only) are re-computed everytime they are accessed.</li> <li>Safer method for extensions: <code>markdown.set_member(\"thing\", ...)</code>, also supporting dotted-paths and string tuples.</li> <li>Regular member assignment: <code>markdown.members[\"thing\"] = ...</code>. This is not recommended, as the assigned member's <code>parent</code> attribute will not be automatically updated.</li> </ul> <p>...and deleted:</p> <ul> <li>Dictionary-like item deletion: <code>del markdown[\"thing\"]</code>, also supporting dotted-paths and string tuples. This will delete only regular members: inherited members (classes only) are re-computed everytime they are accessed.</li> <li>Safer method for extensions: <code>markdown.del_member(\"thing\")</code>, also supporting dotted-paths and string tuples.</li> <li>Regular member deletion: <code>del markdown.members[\"thing\"]</code>. This is not recommended, as the <code>aliases</code> attribute of other objects in the tree will not be automatically updated.</li> </ul>"},{"location":"guide/users/navigating/#inherited-members","title":"Inherited members","text":"<p>Griffe supports class inheritance, both when visiting and inspecting modules.</p> <p>To access members of a class that are inherited from base classes, use the <code>inherited_members</code> attribute. Everytime you access inherited members, the base classes of the given class will be resolved, then the MRO (Method Resolution Order) will be computed for these base classes, and a dictionary of inherited members will be built. Make sure to store the result in a variable to avoid re-computing it everytime (you are responsible for the caching part). Also make sure to only access <code>inherited_members</code> once everything is loaded by Griffe, to avoid computing things too early. Don't try to access inherited members in extensions, while visiting or inspecting modules.</p> <p>Inherited members are aliases that point at the corresponding members in parent classes. These aliases will have their <code>inherited</code> attribute set to true.</p> <p>Important: only classes from already loaded packages will be used when computing inherited members. This gives users control over how deep into inheritance to go, by pre-loading packages from which you want to inherit members. For example, if <code>package_c.ClassC</code> inherits from <code>package_b.ClassB</code>, itself inheriting from <code>package_a.ClassA</code>, and you want to load <code>ClassB</code> members only:</p> <pre><code>import griffe\n\nloader = griffe.GriffeLoader()\n# note that we don't load package_a\nloader.load(\"package_b\")\nloader.load(\"package_c\")\n</code></pre> <p>If a base class cannot be resolved during computation of inherited members, Griffe logs a DEBUG message.</p> <p>If you want to access all members at once (both declared and inherited), use the <code>all_members</code> attribute. If you want to access only declared members, use the <code>members</code> attribute.</p> <p>Accessing the <code>attributes</code>, <code>functions</code>, <code>classes</code> or <code>modules</code> attributes will trigger inheritance computation, so make sure to only access them once everything is loaded by Griffe. Don't try to access inherited members in extensions, while visiting or inspecting modules.</p>"},{"location":"guide/users/navigating/#limitations","title":"Limitations","text":"<p>Currently, there are three limitations to our class inheritance support:</p> <ol> <li> <p>when visiting (static analysis), some objects are not yet properly recognized as classes, for example named tuples. If you inherit from a named tuple, its members won't be added to the inherited members of the inheriting class.</p> <pre><code>MyTuple = namedtuple(\"MyTuple\", \"attr1 attr2\")\n\n\nclass MyClass(MyTuple):\n    ...\n</code></pre> </li> <li> <p>when visiting (static analysis), subclasses using the same name as one of their parent classes will prevent Griffe from computing the MRO and therefore the inherited members. To circumvent that, give a different name to your subclass:</p> <pre><code>from package import SomeClass\n\n\n# instead of\nclass SomeClass(SomeClass):\n    ...\n\n\n# do\nclass SomeOtherClass(SomeClass):\n    ...\n</code></pre> </li> <li> <p>when inspecting (dynamic analysis), ephemeral base classes won't be resolved, and therefore their members won't appear in child classes. To circumvent that, assign these dynamic classes to variables:</p> <pre><code># instead of\nclass MyClass(namedtuple(\"MyTuple\", \"attr1 attr2\")):\n    ...\n\n\n# do\nMyTuple = namedtuple(\"MyTuple\", \"attr1 attr2\")\n\n\nclass MyClass(MyTuple):\n    ...\n</code></pre> </li> </ol> <p>We will try to lift these limitations in the future.</p>"},{"location":"guide/users/navigating/#aliases","title":"Aliases","text":"<p>Aliases represent indirections, such as objects imported from elsewhere, attributes, or methods inherited from parent classes. They are pointers to the object they represent. The path of the object they represent is stored in their <code>target_path</code> attribute. Once they are resolved, the target object can be accessed through their <code>target</code> attribute.</p> <p>Aliases can be found in objects' members. Each object can also access its own aliases (the aliases pointing at it) through its <code>aliases</code> attribute. This attribute is a dictionary whose keys are the aliases paths and values are the aliases themselves.</p> <p>Most of the time, aliases simply act as proxies to their target objects. For example, accessing the <code>docstring</code> of an alias will simply return the docstring of the object it targets.</p> <p>Accessing fields on aliases will trigger their resolution. If they are already resolved (their <code>target</code> attribute is set to the target object), the field is returned. If they are not resolved, their target path will be looked up in the modules collection, and if it is found, the object at this location will be assigned to the alias' <code>target</code> attribute. If it isn't found, an <code>AliasResolutionError</code> exception will be raised.</p> <p>Since merely accessing an alias field can raise an exception, it is often useful to check if an object is an alias before accessing its fields. There are multiple ways to check if an object is an alias:</p> <ul> <li>using the <code>is_alias</code> boolean (<code>Object.is_alias</code>, <code>Alias.is_alias</code>), which won't trigger resolution</li> <li>using <code>isinstance</code> to check if the object is an instance of <code>Alias</code></li> </ul> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; load = griffe.load(\"griffe.load\")\n&gt;&gt;&gt; load.is_alias\nTrue\n&gt;&gt;&gt; isinstance(load, griffe.Alias)\nTrue\n</code></pre> <p>The <code>kind</code> of an alias will only return <code>ALIAS</code> if the alias is not resolved and cannot be resolved within the current modules collection.</p> <p>You can of course also catch any raised exception with a regular try/except block:</p> <pre><code>try:\n    print(obj.source)\nexcept griffe.AliasResolutionError:\n    pass\n</code></pre> <p>To check if an alias is already resolved, you can use its <code>resolved</code> attribute.</p>"},{"location":"guide/users/navigating/#alias-chains","title":"Alias chains","text":"<p>Aliases can be chained. For example, if module <code>a</code> imports <code>X</code> from module <code>b</code>, which itself imports <code>X</code> from module <code>c</code>, then <code>a.X</code> is an alias to <code>b.X</code> which is an alias to <code>c.X</code>: <code>a.X</code> -&gt; <code>b.X</code> -&gt; <code>c.X</code>. To access the final target directly, you can use the <code>final_target</code> attribute. Most alias properties that act like proxies actually fetch the final target rather than the next one to return the final field.</p> <p>Sometimes, when a package makes use of complicated imports (wildcard imports from parents and submodules), or when runtime objects are hard to inspect, it is possible to end up with a cyclic chain of aliases. You could for example end up with a chain like <code>a.X</code> -&gt; <code>b.X</code> -&gt; <code>c.X</code> -&gt; <code>a.X</code>. In this case, the alias cannot be resolved, since the chain goes in a loop. Griffe will raise a <code>CyclicAliasError</code> when trying to resolve such cyclic chains.</p> <p>Aliases chains are never partially resolved: either they are resolved down to their final target, or none of their links are resolved.</p>"},{"location":"guide/users/navigating/#object-kind","title":"Object kind","text":"<p>The kind of an object (module, class, function, attribute or alias) can be obtained in several ways.</p> <ul> <li> <p>With the <code>kind</code> attribute and the <code>Kind</code> enumeration: <code>obj.kind is Kind.MODULE</code>.</p> </li> <li> <p>With the <code>is_kind()</code> method:</p> <ul> <li><code>obj.is_kind(Kind.MODULE)</code></li> <li><code>obj.is_kind(\"class\")</code></li> <li><code>obj.is_kind({\"function\", Kind.ATTRIBUTE})</code></li> </ul> <p>When given a set of kinds, the method returns true if the object is of one of the given kinds.</p> </li> <li> <p>With the <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, and <code>is_alias</code> attributes.</p> </li> </ul> <p>Additionally, it is possible to check if an object is a sub-kind of module, with the following attributes:</p> <ul> <li><code>is_init_module</code>, for <code>__init__.py</code> modules</li> <li><code>is_package</code>, for top-level packages</li> <li><code>is_subpackage</code>, for non-top-level packages</li> <li><code>is_namespace_package</code>, for top-level namespace packages</li> <li><code>is_namespace_subpackage</code>, for non-top-level namespace packages</li> </ul> <p>Finally, additional <code>labels</code> are attached to objects to further specify their kind. The <code>has_labels()</code> method can be used to check if an object has several specific labels.</p>"},{"location":"guide/users/navigating/#object-location","title":"Object location","text":"<p>An object is identified by its <code>path</code>, which is its location in the object tree. The path is composed of all the parent names and the object name, separated by dots, for example <code>mod.Class.meth</code>. This <code>path</code> is the <code>canonical_path</code> on regular objects. For aliases however, the <code>path</code> is where they are imported while the canonical path is where they come from. Example:</p> <pre><code># pkg1.py\nfrom pkg2 import A as B\n</code></pre> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; B = griffe.load(\"pkg1.B\")\n&gt;&gt;&gt; B.path\n'pkg1.B'\n&gt;&gt;&gt; B.canonical_path\n'pkg2.A'\n</code></pre>"},{"location":"guide/users/navigating/#source","title":"Source","text":"<p>Information on the actual source code of objects is available through the following attributes:</p> <ul> <li><code>filepath</code>, the absolute path to the module the object appears in, for example <code>~/project/src/pkg/mod.py</code></li> <li><code>relative_filepath</code>, the relative path to the module, compared to the current working directory, for example <code>src/pkg/mod.py</code></li> <li><code>relative_package_filepath</code>, the relative path to the module, compared to the parent of the top-level package, for example <code>pkg/mod.py</code></li> <li><code>lineno</code> and <code>endlineno</code>, the starting and ending line numbers of the object in the source</li> <li><code>lines</code>, the lines of code defining the object (or importing the alias)</li> <li><code>source</code>, the source lines concatenated as a single multiline string</li> </ul> <p>Each object holds a reference to a <code>lines_collection</code>. Similar to the modules collection, this lines collection is a dictionary whose keys are module file-paths and values are their contents as list of lines. The lines collection is populated by the loader.</p>"},{"location":"guide/users/navigating/#object-visibility","title":"Object visibility","text":"<p>Each object has fields that are related to their visibility within the API.</p> <ul> <li> <p><code>is_public</code>: whether this object is public (destined to be consumed by your users). For module-level objects, Griffe considers that the object is public if:</p> <ul> <li>it is listed in its parent module's <code>__all__</code> attribute</li> <li>or if its parent module does not declare <code>__all__</code>, and the object doesn't have a private name, and the object is not imported from elsewhere</li> </ul> <pre><code># package1/__init__.py\nfrom package2 import A  # not public\nfrom package1 import submodule  # not public\n\nb = 0  # public\n_c = 1  # not public\n__d = 2  # not public\n\ndef __getattr__(name: str):  # public\n    ...\n</code></pre> <p>For class-level objects, Griffe considers that the object is public if the object doesn't have a private name, and the object is not imported from elsewhere.</p> <pre><code># package1/__init__.py\nclass A:\n    from package1.module import X  # not public\n    from package2 import Y  # not public\n\n    b = 0  # public\n    _c = 1  # not public\n    __d = 2  # not public\n\n    def __eq__(self, other):  # public\n        ...\n</code></pre> </li> <li> <p><code>is_deprecated</code>: whether this object is deprecated and shouldn't be used.</p> </li> <li> <p><code>is_special</code>: whether this object has a special name like <code>__special__</code></p> </li> <li> <p><code>is_private</code>: whether this object has a private name like <code>_private</code> or <code>__private</code>, but not <code>__special__</code></p> </li> <li> <p><code>is_class_private</code>: whether this object has a class-private name like <code>__private</code> and is a member of a class</p> </li> </ul> <p>Since <code>is_private</code> only checks the name of the object, it is not mutually exclusive with <code>is_public</code>. It means an object can return true for both <code>is_public</code> and <code>is_private</code>. We invite Griffe users to mostly rely on <code>is_public</code> and <code>not is_public</code>.</p> <p>It is possible to force <code>is_public</code> and <code>is_deprecated</code> to return true or false by setting the <code>public</code> and <code>deprecated</code> fields respectively. These fields are typically set by extensions that support new ways of marking objects as public or deprecated.</p>"},{"location":"guide/users/navigating/#importsexports","title":"Imports/exports","text":"<p>Modules and classes populate their <code>imports</code> field with names that were imported from other modules. Similarly, modules populate their <code>exports</code> field with names that were exported by being listed into the module's <code>__all__</code> attribute. Each object then provides then <code>is_imported</code> and <code>is_exported</code> fields, which tell if an object was imported or exported respectively. Additionally, objects also provide an <code>is_wildcard_exposed</code> field that tells if an object is exposed to wildcard imports, i.e. will be imported when another module does <code>from this_module import *</code>.</p>"},{"location":"guide/users/navigating/#docstrings","title":"Docstrings","text":"<p>Each object has an optional <code>docstring</code> attached to it. To check whether it has one without comparing against <code>None</code>, the two following fields can be used:</p> <ul> <li><code>has_docstring</code>: whether this object has a docstring (even empty)</li> <li><code>has_docstrings</code>: same thing, but recursive; whether this object or any of its members has a docstring (even empty)</li> </ul> <p>Docstrings provide their cleaned-up <code>value</code> (de-indented string, stripped from leading and trailing newlines), as well as their starting and ending line numbers with <code>lineno</code> and <code>endlineno</code>.</p> <p>Docstrings can be parsed against several docstring-styles, which are micro-formats that allow documenting things such as parameters, returned values, raised exceptions, etc..</p> <p>When loading a package, it is possible to specify the docstring style to attach to every docstring (see the <code>docstring_parser</code> parameter of <code>griffe.load</code>). Accessing the <code>parsed</code> field of a docstring will use this style to parse the docstring and return a list of docstring sections. Each section has a <code>value</code> whose shape depends on the section kind. For example, parameter sections have a list of parameter representations as value, while a text section only has a string as value.</p> <p>After a package is loaded, it is still possible to change the style used for specific docstrings by either overriding their <code>parser</code> and <code>parser_options</code> attributes, or by calling their <code>parse()</code> method with a different style:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\", docstring_parser=\"google\")\n&gt;&gt;&gt; markdown[\"Markdown\"].docstring.parse(\"numpy\")\n[...]\n</code></pre> <p>Do note, however, that the <code>parsed</code> attribute is cached, and won't be reset when overriding the <code>parser</code> or <code>parser_options</code> values.</p> <p>Docstrings have a <code>parent</code> field too, that is a reference to their respective module, class, function or attribute.</p>"},{"location":"guide/users/navigating/#model-specific-fields","title":"Model-specific fields","text":"<p>Models have most fields in common, but also have specific fields.</p>"},{"location":"guide/users/navigating/#modules","title":"Modules","text":"<ul> <li><code>imports_future_annotations</code>: Whether the module imports future annotations, which changes the way we parse type annotations.</li> <li><code>overloads</code>: A dictionary to store overloads for module-level functions.</li> </ul>"},{"location":"guide/users/navigating/#classes","title":"Classes","text":"<ul> <li><code>bases</code>: A list of class bases in the form of expressions.</li> <li><code>resolved_bases</code>: A list of class bases, in the form of Class objects. Only the bases that were loaded are returned, the others are discarded.</li> <li><code>mro()</code>: A method to compute the Method Resolution Order in the form of a list of Class objects.</li> <li><code>overloads</code>: A dictionary to store overloads for class-level methods.</li> <li><code>decorators</code>: The decorators applied to the class.</li> <li><code>parameters</code>: The parameters of the class' <code>__init__</code> method, if any.</li> </ul>"},{"location":"guide/users/navigating/#functions","title":"Functions","text":"<ul> <li><code>decorators</code>: The decorators applied to the function.</li> <li><code>overloads</code>: The overloaded signatures of the function.</li> <li><code>parameters</code>: The parameters of the function.</li> <li><code>returns</code>: The type annotation of the returned value, in the form of an expression. The <code>annotation</code> field can also be used, for compatibility with attributes.</li> </ul>"},{"location":"guide/users/navigating/#attributes","title":"Attributes","text":"<ul> <li><code>annotation</code>: The type annotation of the attribute, in the form of an expression.</li> <li><code>value</code>: The value of the attribute, in the form of an expression.</li> <li><code>deleter</code>: The property deleter.</li> <li><code>setter</code>: The property setter.</li> </ul>"},{"location":"guide/users/navigating/#alias","title":"Alias","text":"<ul> <li><code>alias_lineno</code>: The alias line number (where the object is imported).</li> <li><code>alias_endlineno</code>: The alias ending line number (where the object is imported).</li> <li><code>target</code>: The alias target (a module, class, function or attribute).</li> <li><code>target_path</code>: The path of the alias target, as a string.</li> <li><code>wildcard</code>: Whether this alias represents a wildcard import, and if so from which module.</li> <li><code>resolve_target()</code>: A method that resolves the target when called.</li> </ul>"},{"location":"guide/users/navigating/#expressions","title":"Expressions","text":"<p>When parsing source code, Griffe builds enhanced ASTs for type annotations, decorators, parameter defaults, attribute values, etc.</p> <p>These \"expressions\" are very similar to what Python's ast module gives you back when parsing source code, with a few differences: attributes like <code>a.b.c.</code> are flattened, and names like <code>a</code> have a parent object attached to them, a Griffe object, allowing to resolve this name to its full path given the scope of its parent.</p> <p>You can write some code below and print annotations or attribute values with Rich's pretty printer to see how expressions look like.</p> <p> Editor (session: default) Run <pre>from griffe import temporary_visited_module\nfrom rich.pretty import pprint\n\ncode = \"\"\"\n    from dataclasses import dataclass\n    from random import randint\n\n    @dataclass\n    class Bar:\n        baz: int\n\n    def get_some_baz() -&gt; int:\n        return randint(0, 10)\n\n    foo: Bar = Bar(baz=get_some_baz())\n\"\"\"        \n\nwith temporary_visited_module(code) as module:\n    pprint(module[\"foo\"].annotation)\n    pprint(module[\"foo\"].value)</pre> Output Clear <pre><code></code></pre> </p> <p>Ultimately, these expressions are what allow downstream tools such as mkdocstrings' Python handler to render cross-references to every object it knows of, coming from the current code base or loaded from object inventories (objects.inv files).</p> <p>During static analysis, these expressions also allow analyzing decorators, dataclass fields, and many more things in great detail, and in a robust manner, to build third-party libraries support in the form of Griffe extensions.</p> <p>To learn more about expressions, read their API reference.</p>"},{"location":"guide/users/navigating/#modernization","title":"Modernization","text":"<p> Sponsors only \u2014  Insiders 1.2.0</p> <p>The Python language keeps evolving, and often library developers must continue supporting a few minor versions of Python. Therefore they cannot use some features that were introduced in the latest versions.</p> <p>Yet this doesn't mean they can't enjoy latest features in their own docs: Griffe allows to \"modernize\" expressions, for example by replacing <code>typing.Union</code> with PEP 604 type unions <code>|</code>. Thanks to this, downstream tools like mkdocstrings can automatically transform type annotations into their modern equivalent. This improves consistency in your docs, and shows users how to use your code with the latest features of the language.</p> <p>To modernize an expression, simply call its <code>modernize()</code> method. It returns a new, modernized expression. Some parts of the expression might be left unchanged, so be careful if you decide to mutate them.</p> <p>Modernizations applied:</p> <ul> <li><code>typing.Dict[A, B]</code> becomes <code>dict[A, B]</code></li> <li><code>typing.List[A]</code> becomes <code>list[A]</code></li> <li><code>typing.Set[A]</code> becomes <code>set[A]</code></li> <li><code>typing.Tuple[A]</code> becomes <code>tuple[A]</code></li> <li><code>typing.Union[A, B]</code> becomes <code>A | B</code></li> <li><code>typing.Optional[A]</code> becomes <code>A | None</code></li> </ul>"},{"location":"guide/users/navigating/#next-steps","title":"Next steps","text":"<p>In this chapter we saw many of the fields that compose our models, and how and why to use them. Now you might be interested in extending or serializing the API data, or checking for API breaking changes.</p>"},{"location":"guide/users/serializing/","title":"Serializing APIs","text":"<p>Griffe can be used to load API data and output it as JSON on standard output or in writable files. An example of what real data looks like can be found here: Griffe's full JSON dump. We also provide a JSON schema.</p>"},{"location":"guide/users/serializing/#command-line","title":"Command-line","text":"<p>The easiest way to load and serialize API data is to use the command-line tool:</p> <pre><code>$ griffe dump httpx fastapi\n{\n  \"httpx\": {\n    \"name\": \"httpx\",\n    ...\n  },\n  \"fastapi\": {\n    \"name\": \"fastapi\",\n    ...\n  }\n}\n</code></pre> <p>It will output a JSON-serialized version of the package's API data.</p> <p>Try it out on Griffe itself:</p> <pre><code>$ griffe dump griffe\n{\n  \"griffe\": {\n    \"name\": \"griffe\",\n    ...\n  }\n}\n</code></pre> <p>To output in a file instead of standard output, use the <code>-o</code>, <code>--output</code> option:</p> <pre><code>$ griffe dump griffe -o griffe.json\n</code></pre> <p>If you load multiple packages' signatures, you can dump each in its own file with a templated filepath:</p> <pre><code>$ griffe dump griffe -o './dumps/{package}.json'\n</code></pre> <p>By default, Griffe will search in <code>sys.path</code>, so if you installed it through pipx, there are few chances it will find your packages. To explicitly specify search paths, use the <code>-s, --search &lt;PATH&gt;</code> option. You can use it multiple times. You can also add the search paths to the <code>PYTHONPATH</code> environment variable. If Griffe can't find the packages, it will fail with a <code>ModuleNotFoundError</code>.</p> <p>See all the options for the <code>dump</code> command in the CLI reference.</p>"},{"location":"guide/users/serializing/#python-api","title":"Python API","text":"<p>If you have read through the Navigating chapter, you know about our five data models for modules, classes, functions, attributes and aliases. Each one of these model provide the two following methods:</p> <ul> <li><code>as_json</code>, which allows to serialize an object into JSON,</li> <li><code>from_json</code>, which allows loading JSON back into a model instance.</li> </ul> <p>These two methods are convenient wrappers around our JSON encoder and JSON decoder. The JSON encoder and decoder will give you finer-grain control over what you serialize or load, as the methods above are only available on data models, and not on sub-structures like decorators or parameters.</p> <p>Under the hood, <code>as_json</code> just calls <code>as_dict</code>, which converts the model instance into a dictionary, and then serializes this dictionary to JSON.</p> <p>When serializing an object, by default the JSON will only contain the fields required to load it back to a Griffe model instance. If you are not planning on loading back the data into our data models, or if you want to load them in a different implementation which is not able to infer back all the other fields, you can choose to serialize every possible field. We call this a full dump, and it is enabled with the <code>full</code> option of the encoder or the <code>as_json</code> method.</p>"},{"location":"guide/users/serializing/#schema","title":"Schema","text":"<p>For anything automated, we suggest relying on our JSON schema.</p> <p>When serializing multiple packages with the <code>dump</code> command, you get a map with package names as keys. Map values are the serialized objects (modules, classes, functions, etc.). They are maps too, with field names and values as key-value pairs.</p> <p>For example:</p> <pre><code>{\n  \"kind\": \"class\",\n  \"name\": \"Expr\",\n  \"lineno\": 82,\n  \"endlineno\": 171,\n  \"docstring\": {\n    \"value\": \"Base class for expressions.\",\n    \"lineno\": 84,\n    \"endlineno\": 84\n  },\n  \"labels\": [\n    \"dataclass\"\n  ],\n  \"members\": [\n    ...\n  ],\n  \"bases\": [],\n  \"decorators\": [\n    {\n      \"value\": {\n        \"name\": \"dataclass\",\n        \"cls\": \"ExprName\"\n      },\n      \"lineno\": 82,\n      \"endlineno\": 82\n    }\n  ]\n}\n</code></pre> <p>The <code>members</code> value, truncated here, just repeats the pattern: it's an array of maps. We use an array for members instead of a map to preserve order, which could be important to downstream tools.</p> <p>The other fields do not require explanations, except maybe for expressions. You will sometimes notice deeply nested structures with <code>cls</code> keys. These are serialized Griffe expressions. They represent actual code.</p>"},{"location":"guide/users/serializing/#next-steps","title":"Next steps","text":"<p>That's it! There is not much to say about serialization. We are interested in getting your feedback regarding serialization as we didn't see it being used a lot. Next you might be interested in learning how to check or extend your API data.</p>"},{"location":"guide/users/how-to/parse-docstrings/","title":"Using Griffe as a docstring-parsing library","text":"<p>You can use Griffe to parse arbitrary docstrings. You don't have to load anything through the Griffe loader. You just need to import the <code>Docstring</code> class. Then you can build a <code>Docstring</code> instance and call its <code>parse</code> method, choosing the parsing-style to use:</p> <pre><code>from griffe import Docstring\n\ntext = \"Hello I'm a docstring!\"\ndocstring = Docstring(text, lineno=1)\nparsed = docstring.parse(\"google\")\n</code></pre> <p>If you want to take advantage of the parsers ability to fetch annotations from the object from which the docstring originates, you can manually create the parent objects and link them to the docstring:</p> <pre><code>from griffe import Docstring, Function, Parameters, Parameter, ParameterKind\n\nfunction = Function(\n    \"func\",\n    parameters=Parameters(\n        Parameter(\"param1\", annotation=\"str\", kind=ParameterKind.positional_or_keyword),\n        Parameter(\"param2\", annotation=\"int\", kind=ParameterKind.keyword_only),\n    ),\n)\ntext = \"\"\"\nHello I'm a docstring!\n\nParameters:\n    param1: Description.\n    param2: Description.\n\"\"\"\ndocstring = Docstring(text, lineno=1, parent=function)\nparsed = docstring.parse(\"google\")\n</code></pre> <p>With this the parser will fetch the <code>str</code> and <code>int</code> annotations from the parent function's parameters.</p>"},{"location":"guide/users/how-to/selectively-inspect/","title":"Inspecting specific objects","text":"<p>Griffe by default parses and visits your code (static analysis) instead of importing it and inspecting objects in memory (dynamic analysis). There are various reasons why static analysis is generally a better approach, but sometimes it is insufficient to handle particularly dynamic objects. When this happpens and Griffe cannot handle specific objects, you have a few solutions:</p> <ol> <li>enable dynamic analysis for the whole package</li> <li>write a Griffe extension that dynamically handles just the problematic objects</li> <li>write a Griffe extension that statically handles the objects</li> </ol> <p>This document will help you achieve point 2.</p> <p>Enabling dynamic analysis for whole packages is not recommended, but it can be useful to do it once and check the results, to see if our dynamic analysis agent is able to handle your code natively. Whether it is or not is not very important, you will be able to move onto creating an extension that will selectively inspect the relevant objects in any case. It could just be a bit more difficult in the latter case, and if you have trouble writing the extension we invite you to create a Q&amp;A discussion to get guidance.</p> <p>Start by creating an extensions module (a simple Python file) somewhere in your repository, if you don't already have one. Within it, create an extension class:</p> <pre><code>import griffe\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n</code></pre> <p>Make it accept configuration options by declaring an <code>__init__</code> method:</p> <pre><code>import griffe\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n</code></pre> <p>Here we choose to store a list of strings, where each string is an object path, like <code>module.Class.method</code>. Feel free to store different values to help you filter objects according to your needs. For example, maybe you want to inspect all functions with a given label, in that case you could accept a single string which is the label name. Or you may want to inspect all functions decorated with a specific decorator, etc.</p> <p>With this <code>__init__</code> method, users (or simply yourself) will be able to configure the extension by passing a list of object paths. You could also hard-code everything in the extension if you don't want or need to configure it.</p> <p>Now that our extension accepts options, we implement its core functionality. We assume that the static analysis agent is able to see the objects we are interested in, and will actually create instances that represent them (Griffe objects). Therefore we hook onto the <code>on_instance</code> event, which runs each time a Griffe object is created.</p> <pre><code>import griffe\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        ...\n</code></pre> <p>Check out the available hooks to see if there more appropriate hooks for your needs.</p> <p>Lets now use our configuration option to decide whether to do something or skip:</p> <pre><code>import griffe\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path not in self.objects:\n            return\n</code></pre> <p>Now we know that only the objects we're interested in will be handled, so lets handle them.</p> <pre><code>import griffe\n\nlogger = griffe.get_logger(\"griffe_inspect_specific_objects\")  # (1)!\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path not in self.objects:\n            return\n\n        try:\n            runtime_obj = griffe.dynamic_import(obj.path)\n        except ImportError as error:\n            logger.warning(f\"Could not import {obj.path}: {error}\")  # (2)!\n            return\n</code></pre> <ol> <li>We integrate with Griffe's logging (which also ensures integration with MkDocs' logging) by creating a logger. The name should look like a package name, with underscores.</li> <li>We decide to log the exception as a warning (causing MkDocs builds to fail in <code>--strict</code> mode), but you could also log an error, or a debug message.</li> </ol> <p>Now that we have a reference to our runtime object, we can use it to alter the Griffe object.</p> <p>For example, we could use the runtime object's <code>__doc__</code> attribute, which could have been declared dynamically, to fix the Griffe object docstring:</p> <pre><code>import griffe\n\nlogger = griffe.get_logger(\"griffe_inspect_specific_objects\")\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path not in self.objects:\n            return\n\n        try:\n            runtime_obj = griffe.dynamic_import(obj.path)\n        except ImportError as error:\n            logger.warning(f\"Could not import {obj.path}: {error}\")\n            return\n\n        if obj.docstring:\n            obj.docstring.value = runtime_obj.__doc__\n        else:\n            obj.docstring = griffe.Docstring(runtime_obj.__doc__)\n</code></pre> <p>Or we could alter the Griffe object parameters in case of functions, which could have been modified by a signature-changing decorator:</p> <pre><code>import inspect\nimport griffe\n\nlogger = griffe.get_logger(\"griffe_inspect_specific_objects\")\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path not in self.objects:\n            return\n\n        try:\n            runtime_obj = griffe.dynamic_import(obj.path)\n        except ImportError as error:\n            logger.warning(f\"Could not import {obj.path}: {error}\")\n            return\n\n        # Update default values modified by decorator.\n        signature = inspect.signature(runtime_obj)\n        for param in signature.parameters:\n            if param.name in obj.parameters:\n                obj.parameters[param.name].default = repr(param.default)\n</code></pre> <p>We could also entirely replace the Griffe object obtained from static analysis by the same one obtained from dynamic analysis:</p> <pre><code>import griffe\n\n\nclass InspectSpecificObjects(griffe.Extension):\n    \"\"\"An extension to inspect just a few specific objects.\"\"\"\n\n    def __init__(self, objects: list[str]) -&gt; None:\n        self.objects = objects\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path not in self.objects:\n            return\n\n        inspected_module = griffe.inspect(obj.module.path, filepath=obj.filepath)\n        obj.parent.set_member(obj.name, inspected_module[obj.name])  # (1)!\n</code></pre> <ol> <li>This assumes the object we're interested in is declared at the module level.</li> </ol>"},{"location":"guide/users/how-to/set-docstring-styles/","title":"Setting the right docstring style for every docstring","text":"<p>Griffe attaches the specified docstring style and parsing options to each object in the tree of the package(s) you load. If your package(s) use several docstring styles, some of these objects will have the wrong style attached to them. This is problematic because other Griffe extensions rely on this attached style to parse docstrings and modify them. We plan to alleviate this limitation in the future (see issue-340), but the most robust thing you can do is to make sure each object has the right style attached, as easly as possible, so that other extensions can work without issue.</p> <p>There are currently two ways to make sure objects have the right docstring style attached as early as possible:</p> <ol> <li>Use the <code>auto</code> docstring style (currently only available to sponsors). Griffe will use regular expressions to infer the docstring style used. 100% accuracy is impossible to achieve, so it's possible that you get incorrect styles for some objects.</li> <li>Write and use a custom Griffe extension.</li> </ol> <p>This how-to provides a few extension-based solutions to correctly set docstring styles in your packages. Just make sure to enable these extensions in first position.</p>"},{"location":"guide/users/how-to/set-docstring-styles/#markup-comment","title":"Markup comment","text":"<p>Depending on the markup you use in docstrings, you can add a comment that tells Griffe which docstring style to use.</p> MarkdownreStructuredText <pre><code>def function():\n    \"\"\"Summary.\n\n    Body.\n\n    &lt;!-- style: google --&gt;\n    \"\"\"\n</code></pre> <pre><code>def function():\n    \"\"\"Summary.\n\n    Body.\n\n    .. style: google\n    \"\"\"\n</code></pre> <p>Your Griffe extension can then use regular expressions to search for such comments. For example with Markdown (HTML) comments: </p> <pre><code>import re\nimport griffe\n\n\nclass ApplyDocstringStyle(griffe.Extension):\n    def __init__(self, regex: str = \"&lt;!-- style: (google|numpy|sphinx) --&gt;\") -&gt; None:\n         self.regex = re.compile(regex)\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.docstring:\n            if match := self.regex.search(obj.docstring.value):\n                obj.docstring.parser = match.group(1)\n</code></pre>"},{"location":"guide/users/how-to/set-docstring-styles/#python-comment","title":"Python comment","text":"<p>You could also decide to add a trailing comment to your docstrings to indicate which style to use.</p> <pre><code>def function():\n    \"\"\"Summary.\n\n    Body.\n    \"\"\"  # style: google\n</code></pre> <p>Your extension can then pick up this comment to assign the right style:</p> <pre><code>import re\nimport griffe\n\n\nclass ApplyDocstringStyle(griffe.Extension):\n    def __init__(self, regex: str = \".*# style: (google|numpy|sphinx)$\") -&gt; None:\n         self.regex = re.compile(regex)\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.docstring:\n            if match := self.regex.search(obj.docstring.source):\n                obj.docstring.parser = match.group(1)\n</code></pre>"},{"location":"guide/users/how-to/set-docstring-styles/#explicit-configuration","title":"Explicit configuration","text":"<p>Finally, you could decide to map a list of objects to the docstring style they should use. Your extension can either accept options, or it could hard-code that list:</p> <pre><code>import griffe\nfrom fnmatch import fnmatch\n\nclass ApplyDocstringStyle(griffe.Extension):\n    def __init__(self, config: dict[str, str]):\n        self.instances = {}\n        self.globs = {}\n        for key, value in config.items():\n            if \"*\" in key:\n                self.globs[key] = value\n            else:\n                self.instances[key] = value\n\n    def on_instance(self, *, obj: griffe.Object, **kwargs) -&gt; None:\n        if obj.path in self.instances:\n            if obj.docstring:\n                obj.docsring.parser = self.instances[obj.path]\n         else:\n             for pattern, style in self.globs:\n                 if fnmatch(obj.path, pattern):\n                     if obj.docstring:\n                         obj.docstring.parser = style\n</code></pre> <p>Example configuration in MkDocs:</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - your_griffe_extension.py:\n              config:                \n                path.to.obj1: google\n                path.to.obj2: numpy\n                path.to.obj3.*: sphinx\n                path.to.obj4*: google\n</code></pre> <p>The benefit of this last solution is that it works for code you don't have control over. An alternative solution is to use the griffe-autodocstringstyle extension (sponsors only), which automatically assigns the <code>auto</code> style to all objects coming from sources found in a virtual environment.</p>"},{"location":"guide/users/how-to/support-decorators/","title":"Supporting custom decorators","text":"<p>Griffe aims to support the Python language itself, as well as its standard library. It means that built-in objects and objects from the standard library that can be used or are often used as decorators, should be supported natively or through official extensions, for example <code>@property</code>, <code>@functools.cache</code>, <code>@warnings.deprecated</code>, etc.</p> <p>Custom decorators however (the ones you define in your code-base) won't be supported by default, at least statically (dynamic analysis might be able to support them), because Griffe doesn't try to infer anything more than the obvious. Griffe is not a type-checker and so doesn't have the same inference abilities.</p> <p>Therefore, to support your own decorators (at least statically), you have to write Griffe extensions. Don't worry, extensions that support custom decorators are generally super easy to write.</p> <p>Lets assume we have a decorator whose path is <code>my_package.utils.enhance</code>. It is used throughout our code base like so:</p> <pre><code>from my_package.utils import enhance\n\n@enhance\ndef my_function() -&gt; ...:\n    ...\n</code></pre> <p>Start by creating an extensions module (a simple Python file) somewhere in your repository, if you don't already have one. Within it, create an extension class:</p> <pre><code>import griffe\n\n\nclass MyDecorator(griffe.Extension):\n    \"\"\"An extension to suport my decorator.\"\"\"\n</code></pre> <p>Now we can declare the <code>on_instance</code> hook, which receives any kind of Griffe object (<code>Module</code>, <code>Class</code>, <code>Function</code>, <code>Attribute</code>), or we could use a kind-specific hook such as <code>on_module_instance</code>, <code>on_class_instance</code>, <code>on_function_instance</code> and <code>on_attribute_instance</code>. For example, if you know your decorator is only ever used on class declarations, it would make sense to use <code>on_class_instance</code>.</p> <p>For the example, lets use the <code>on_function_instance</code> hook, which receives <code>Function</code> instances.</p> <pre><code>import griffe\n\n\nclass MyDecorator(griffe.Extension):\n    \"\"\"An extension to suport my decorator.\"\"\"\n\n    def on_function_instance(self, *, func: griffe.Function, **kwargs) -&gt; None:\n        ...\n</code></pre> <p>In this hook, we check if our function is decorated with our custom decorator:</p> <pre><code>import griffe\n\n\nclass MyDecorator(griffe.Extension):\n    \"\"\"An extension to suport my decorator.\"\"\"\n\n    def on_function_instance(self, *, func: griffe.Function, **kwargs) -&gt; None:\n        for decorator in func.decorators:\n            if decorator.callable_path == \"my_package.utils.enhance\":\n                ...  # Update the function attributes.\n</code></pre> <p>Now all that is left to do is to actually write the code that updates the function according to what the decorator is doing. We could update the function's docstring, or its return type, or its parameters: it all depends on your decorator and what it does to the objects it decorates.</p>"},{"location":"guide/users/recommendations/docstrings/","title":"Docstrings","text":"<p>Here are explanations on what docstrings are, and a few recommendations on how to write them. This guide uses the Google-style, because that is our preferred and recommended style, but you can also use any other supported style. Skip to the Styles section to learn about the existing docstring styles. We invite you to read their own style guides as they are full of examples and good advice.</p>"},{"location":"guide/users/recommendations/docstrings/#definition","title":"Definition","text":"<p>A docstring is a line or block of text describing objects such as modules, classes, functions and attributes. They are written below the object signature or assignment, or appear as first expression in a module:</p> module.py<pre><code>\"\"\"This is the module docstring.\"\"\"\n\na = 0\n\"\"\"This is an attribute docstring.\"\"\"\n\n\ndef b():\n    \"\"\"This is a function docstring.\"\"\"\n\n\nclass C:\n    \"\"\"This is a class docstring.\"\"\"\n\n    def d(self):\n        \"\"\"This is a method docstring.\"\"\"\n</code></pre>"},{"location":"guide/users/recommendations/docstrings/#multi-line-docstrings","title":"Multi-line docstrings","text":"<p>Each docstring can span multiple lines if it is wrapped in triple double-quotes (which is generally the case and the official recommendation even for single-line docstrings):</p> <pre><code>def function():\n    \"\"\"This is a longer docstring.\n\n    It spans on multiple lines.\n    Blank lines are allowed, too.\n    \"\"\"\n</code></pre> <p>When writing multi-line docstrings, it is recommended to write a short description on the first line, then separate the rest of the docstring with a blank line. The first line is called the summary, and the rest of docstring is called the body. The summary is useful to documentation generators and other tools to show the short description of an object.</p>"},{"location":"guide/users/recommendations/docstrings/#markup","title":"Markup","text":"<p>Docstrings are just text, so you can use any markup you want. The markup you choose will generally depend on what you decide to do with your docstrings: if you generate API documentation from your docstrings, and the documentation renderer expects Markdown, then you should write your docstrings in Markdown.</p> <p>Examples of markups are Markdown (which has many different implementations and many different \"flavors\"), reStructuredText, AsciiDoc, and Djot.</p> <p>For example, if you are using MkDocs and mkdocstrings to generate your API documentation, you should write your docstrings in Markdown. If you are using Sphinx, you should probably write your docstrings in reStructuredText, unless you are also using the MyST extension.</p> <p>Whatever markup you choose, try to stay consistent within your code base.</p>"},{"location":"guide/users/recommendations/docstrings/#styles","title":"Styles","text":"<p>Docstrings can be written for modules, classes, functions, and attributes. But there are other aspects of a Python API that need to be documented, such as function parameters, returned values, and raised exceptions, to name a few. We could document everything in natural language, but that would make it hard for downstream tools such as documentation generators to extract information in a structured way, to allow dedicated rendering such as tables for parameters.</p> <p>To compensate for the lack of structure in natural languages, docstring \"styles\" emerged. A docstring style is a micro-format for docstrings, allowing to structure the information by following a specific format. With the most popular Google and Numpydoc styles, information in docstrings is decomposed into sections of different kinds, for example \"parameter\" sections or \"return\" sections. Some kinds of section then support documenting multiple items, or support a single block of markup. For example, we can document multiple parameters in \"parameter\" sections, but a \"note\" section is only composed of a text block.</p> <p>Structuring the information in sections and items allows documentation-related tools to extract and provide this information in a structured way, by parsing the docstrings according to the style they follow. Griffe has parsers for Google-style, Numpydoc-style, and Sphinx-style docstrings. See the complete reference for these parsers and styles in the Docstrings reference. We recommend that you read the style guides mentioned here as they are full of examples and good advice too.</p> Google-style<pre><code>def greet(name: str, end: str = \"!\") -&gt; None:\n    \"\"\"Greet someone.\n\n    Parameters:\n        name: The name to greet.\n        end: The punctuation mark at the end.\n\n    Note:\n        Greetings are cool!\n    \"\"\"\n    print(f\"Hey {name}{end}\")\n\n\n\n\u200e\n</code></pre> Numpydoc-style<pre><code>def greet(name: str, end: str = \"!\") -&gt; None:\n    \"\"\"Greet someone.\n\n    Parameters\n    ----------\n    name\n        The name to greet.\n    end\n        The punctuation mark at the end.\n\n    Note\n    ----\n    Greetings are cool!\n    \"\"\"\n    print(f\"Hey {name}{end}\")\n</code></pre> <p>Our preferred style for docstrings is the Google-style, because it is in our opinion the most markup-agnostic style: it is based on any kind of markup or documentation generator. Our second choice would be the Numpydoc-style, for its readability.</p> <p>For the adventurers, have a look at PEP 727 (draft) and griffe-typingdoc, a Griffe extension to support PEP 727. PEP 727 proposes an alternative way to provide information in a structured way, that does not rely on a docstring micro-format. It takes advantage of <code>typing.Annotated</code> to attach documentation to any type-annotated object, like attributes, parameters and returned values. With PEP 727, docstrings styles and their sections aren't required anymore, and docstrings can be written in plain markup, without following any particular style. This makes it easier for tools like Griffe who then don't have to parse docstrings at all. The PEP is a bit controversial (lots of different opinions), so we invite you to make your own opinion by looking at real-world projects using it, such as FastAPI, or by reading the (very-long) discussion on discuss.python.org. The PEP was actually written by FastAPI's author, Sebasti\u00e1n Ram\u00edrez.</p> PEP 727<pre><code>from typing_extensions import Annotated, Doc\n\n\ndef greet(\n    name: Annotated[str, Doc(\"The name to greet.\"),\n    end: Annotated[str, Doc(\"The punctuation mark at the end.\")] = \"!\",\n) -&gt; None:\n    \"\"\"Greet someone.\n\n    &gt; [!NOTE]\n    &gt; Greetings are cool!\n    \"\"\" # (1)!\n    print(f\"Hey {name}{end}\")\n</code></pre> <ol> <li>Here we use the GitHub syntax for a \"note\" callout. It assumes our documentation renderer supports this syntax. The point is that we rely purely on Markdown rather than docstrings styles.</li> </ol>"},{"location":"guide/users/recommendations/docstrings/#general-tips","title":"General tips","text":"<p>Your docstrings will typically be used to document your API, either on a deployed (static) website, or locally, on the command line or in a Python interpreter. Therefore, when writing your docstrings, you should address the right audience: the users of your code. Try to stay succinct and give clear examples. Docstrings are not really the place to explain architectural or technical decisions made while developing the project: this information, while extremely valuable, is better written in code comments, where the audience is other developers working on the code base.</p> <p>Your docstrings will typically again be read online (HTML) or other types of documents such as manual pages or PDFs. Make sure to write complete sentences, with correct punctuation. That means for example, to start each parameter description with a capital letter, and to end it with a period.</p> <p>When documenting objects acting as namespaces (modules, classes, enumerations), prefer documenting each attribute separately than with an Attributes section in the namespace object docstring. For example, add a docstring to each enumeration value rather than describing each value in the docstring of the enumeration class.</p>"},{"location":"guide/users/recommendations/docstrings/#modules","title":"Modules","text":"<p>Module docstrings should briefly explain what the module contains, and for what purposes these objects can be used. If the documentation generator you chose does not support generating member summaries automatically, you might want to add docstrings sections for attributes, functions, classes and submodules.</p> package/__init__.py<pre><code>\"\"\"A generic package to demonstrate docstrings.\n\nThis package does not really exist, and is only used as a demonstration purpose for docstrings.\nAnyway, this package contains the following API, exposed directly at the top-level,\nmeaning you can import everything from `package` directly.\n\nAttributes:\n    ghost: A ghost wandering in this desolated land.\n    dummy: A dummy you can practice on. Not for ghosts.\n\nClasses:\n    Ghost: Ah, so this is where our ghost comes from.\n        Maybe create some additional ghosts so they can pass the time together?\n\nFunctions:\n    deploy(): Deploy something on the web (we're not sure what exactly).\n\"\"\"\n</code></pre> <p>Do the same thing for every other module of the package, except if you are hiding your module layout.</p>"},{"location":"guide/users/recommendations/docstrings/#classes-methods-properties","title":"Classes, methods, properties","text":"<p>Class docstrings follow the same logic as module docstrings. Explain what the class is used for, and maybe show a few of its attributes and methods thanks to sections of the same name. A class is already more concrete than a module, so we can maybe start adding usage examples too. Such examples should only show how to create instances of the class. Examples of use for methods can be written in each respective method.</p> <pre><code>class Ghost:\n    \"\"\"Ghosts that wander the earth.\n\n    Ghosts are meant to... we're actually unsure.\n    All we know is that, as a user, you might find it amusing to instantiate\n    a few of them and put them together to see what they do.\n\n    Methods:\n        wander: Wander the earth.\n        spook: Spook living organisms.\n        pass_through: Pass through anything.\n\n    Examples:\n        Create a new ghost with a cool nickname:\n\n        &gt;&gt;&gt; ghost = Ghost(nickname=\"Rattlesnake\")\n    \"\"\"\n\n    def wander(self) -&gt; None:\n        \"\"\"Wander the earth.\n\n        That's it, really.\n\n        Examples:\n            &gt;&gt;&gt; ghost.wander()\n        \"\"\"\n        ...\n\n    @property\n    def weight(self) -&gt; int:\n        \"\"\"The ghost's weight (spoiler: it's close to 0).\"\"\"\n        ...\n</code></pre> <p>Note that blocks of lines starting with <code>&gt;&gt;&gt;</code> or <code>...</code> are automatically parsed as code blocks by Griffe, until a blank line is found. This only works in Examples (plural!) sections. If you rely on Python-Markdown to convert Markdown to HTML (which is the case for MkDocs), you can use the markdown-pycon extension to recognize such <code>pycon</code> code blocks anywhere, without having to wrap them in fences. You can also choose to use explicit fences everywhere:</p> <pre><code>    \"\"\"\n    Examples:\n        Create a new ghost with a cool nickname:\n\n        ```pycon\n        &gt;&gt;&gt; ghost = Ghost(nickname=\"Rattlesnake\")\n        ```\n    \"\"\"\n</code></pre>"},{"location":"guide/users/recommendations/docstrings/#functions","title":"Functions","text":"<p>Function and method docstrings will typically describe their parameters and return values. For generators, it's also possible to describe what the generator yields and what it can receive, though the latter is not often used.</p> <pre><code>import datetime\nfrom typing import Generator, Iterator\n\n\nclass GhostOlympicGames:\n    ...\n\n\nclass GOGTicket:\n    ...\n\n\ndef organize_gog(date: datetime.date) -&gt; GhostOlympicGames:\n    \"\"\"Organize Olympic Games for Ghosts.\n\n    The ghost world is much simpler than the living world,\n    so it's super easy to organize big events like this.\n\n    Parameters:\n        date: The date of the games.\n\n    Returns:\n        The prepared games.\n    \"\"\"\n    ...\n\n\ndef yield_athletes(quantity: int) -&gt; Iterator[Ghost]:\n    \"\"\"Yield a certain quantity of athletes.\n\n    Parameters:\n        quantity: How many ghost athletes you want.\n\n    Yields:\n        Ghost athletes. They're just regular ghosts.\n    \"\"\"\n    ...\n\n\n\ndef gog_tickets_factory() -&gt; Generator[GOGTicket, int, None]:\n    \"\"\"Generate tickets for the GOG.\n\n    We value fairness: tickets are priced randomly.\n    Unless we send a specific price to the generator.\n\n    Yields:\n        Tickets for the games.\n\n    Receives:\n        Price for the next ticket, in ghost money (???).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"guide/users/recommendations/docstrings/#attributes","title":"Attributes","text":"<p>Attribute docstrings are written below their assignment. As usual, they should have a short summary, and an optional, longer body.</p> <pre><code>GHOST_MASS_CONSTANT: float = 1e-100\n\"\"\"The ghost mass constant.\n\nThis is a very small number. Use it scientifically\nfor all ghost-related things.\n\nNote:\n    There is actually nothing scientific about any of this.\n\"\"\" # (1)!\n</code></pre> <ol> <li>Our <code>Note</code> section here is parsed as an admonition. See Google-style admonitions for reference.</li> </ol> <p>Class and instance attributes can be documented the same way:</p> <pre><code>class GhostTown:\n    instances: str\n    \"\"\"All the existing towns.\"\"\"\n\n    def __init__(self, name: str, size: int) -&gt; None:\n        self.name = name\n        \"\"\"The town's name.\"\"\"\n\n        self.size = size\n        \"\"\"The town's size.\"\"\"\n</code></pre>"},{"location":"guide/users/recommendations/docstrings/#exceptions-warnings","title":"Exceptions, warnings","text":"<p>Callables that raise exceptions or emit warnings can document each of these exceptions and warnings. Documenting them informs your users that they could or should catch the raised exceptions, or that they could filter or configure warnings differently. The description next to each exception or warning should explain how or when they are raised or emitted.</p> <pre><code>def verify_spirit_chest():\n    \"\"\"Do a verification routine on the spirit chest.\n\n    Raises:\n        OverflowError: When the verification failed\n            and all the ghosts escaped from the spirit chest.\n    \"\"\"\n    ...\n\n\ndef negotiate_return_to_the_spirit_chest():\n    \"\"\"Negotiate with ghost for them to return in the spirit chest.\n\n    Warns:\n        ResourceWarning: When the ghosts refuse to go back in the chest\n            because the chest is too tight.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"guide/users/recommendations/docstrings/#going-further","title":"Going further","text":"<p>There are more sections and more features to discover and use. For a complete reference on docstring styles syntax, see our reference.</p>"},{"location":"guide/users/recommendations/public-apis/","title":"Public APIs","text":""},{"location":"guide/users/recommendations/public-apis/#what-is-a-public-api","title":"What is a public API?","text":"<p>An API (Application Programming Interface) in the interface with which developers interact with your software. In the Python world, the API of your Python library is the set of modules, classes, functions and other attributes made available to your users. For example, users can do <code>from your_library import this_function</code>: <code>this_function</code> is part of the API of <code>your_library</code>.</p> <p>Oftentimes, when you develop a library, you create functions, classes, etc. that are only useful internally: they are not supposed to be used by your users. Python does not provide easy or standard ways to actually prevent users from using internal objects, so, to distinguish public objects from internal objects, we usually rely on conventions, such as prefixing internal objects' names with an underscore, for example <code>def _internal_function(): ...</code>, to mark them as \"internal\".</p> <p>Prefixing an object's name with an underscore still does not prevent users from importing and using this object, but it informs them that they are not supposed to import and use it, and that this object might change or even disappear in the future, without notice.</p> <p>On the other hand, public objects are supposed to stay compatible with previous versions of your library for at least a definite amount of time, to prevent downstream code from breaking. Any change that could break downstream code is supposed to be communicated before it is actually released. Maintainers of the library usually allow a period of time where the public object can still be used as before, but will emit deprecation warnings when doing so, hinting users that they should upgrade their use of the object (or use another object that will replace it). This period of time is usually called a deprecation period.</p> <p>So, how do we mark an object as public? How do we inform our users which objects can safely be used, and which ones are subject to unnotified changes? Usually, we rely again on the underscore prefix convention: if an object isn't prefixed with an underscore, it means that it is public. But essentially, your public API is what you say it is. If you clearly document that a single function of your package is public, and that all others are subject to unnotified changes and whose usage by users is not supported, then your public API is composed of this single function, and nothing else. Public APIs are a matter of communication. Concretely, it's about deciding what parts of your code base are public, and communicating that clearly.</p> <p>Some components are obviously considered for the public API of a Python package:</p> <ul> <li>the module layout</li> <li>functions and their signature</li> <li>classes (their inheritance), their methods and signatures</li> <li>the rest of the module or class attributes, their types and values</li> </ul> <p>Other components should be considered for the public API but are often forgotten:</p> <ul> <li>CLI options: see The CLI is API too section</li> <li>logger names: users might rely on them to filter logs (see Logger names)</li> <li>exceptions raised: users definitely rely on them to catch errors</li> </ul> <p>Other components could be considered for the public API, but usually require too much maintenance:</p> <ul> <li>logging messages: users might rely on them to grep the logs</li> <li>exception messages: users might rely on them for various things</li> </ul> <p>Besides, logging and exception messages simply cannot allow deprecation periods where both old and new messages are emitted. Maintainers could however consider adding unique, short codes to messages for more robust consumption.</p> <p>Our recommendation \u2014 Communicate your public API, verify what you can.</p> <p>Take the time to learn about and use ways to declare, communicate and deprecate your public API. Your users will have an easier time using your library. On the maintenance side, you won't get bug reports for uses that are not supported, or you will be able to quickly close them by pointing at the documentation explaining what your public API is, or why something was deprecated, for how long, and how to upgrade.</p> <p>Automate verifications around your public API with tools like Griffe. Currently Griffe doesn't support checking CLI configuration options, logger names or raised exceptions. If you have the capacity to, verify these manually before each release. Griffe checks and API rules enforcement are a very good starting point.</p>"},{"location":"guide/users/recommendations/public-apis/#conventions","title":"Conventions","text":"<p>Python does not provide any standard way to declare public APIs. However we do have official recommendations and a few conventions.</p>"},{"location":"guide/users/recommendations/public-apis/#underscore-prefix","title":"Underscore prefix","text":"<p>In the Python ecosystem we very often prefix objects with an underscore to mark them as internal, or private. Objects that are not prefixed are then implicitly considered public. For example:</p> <pre><code>def public_function():\n    ...\n\ndef _internal_function():\n    ...\n</code></pre> <p>The exception to this rule is that imported objects are not considered public. For example:</p> <pre><code>from elsewhere import something\n</code></pre> <p>Even though <code>something</code> doesn't start with an underscore, it was imported so it is not considered public.</p>"},{"location":"guide/users/recommendations/public-apis/#__all__-list","title":"<code>__all__</code> list","text":"<p>There is another convention that lets you do the opposite: explicitly mark objects as public. This convention uses the <code>__all__</code> module-level attribute, which is a list of strings containing the names of the public objects.</p> package/module.py<pre><code>__all__ [\n    \"this_function\",\n    \"ThisClass\",\n]\n\ndef this_function():\n    ...\n\ndef this_other_function():\n    ...\n\nclass ThisClass:\n    ...\n\nclass ThisOtherClass:\n    ...\n</code></pre> <p>Here, even though <code>this_other_function</code> and <code>ThisOtherClass</code> are not prefixed with underscores, they are not considered public, because we explicitly and only marked <code>this_function</code> and <code>ThisClass</code> as public.</p> <p>Declaring <code>__all__</code> has another beneficial effect: it affects wildcard imports. When your users use wildcard imports to import things from one of your modules, Python will only import the objects that are listed in <code>__all__</code>. Without <code>__all__</code>, it would import all objects that are not prefixed with an underscore, including objects already imported from elsewhere. This can cause serious namespace pollution, and even slow down Python code when wildcard imports are chained. We actually recommend avoiding wildcard imports.</p> <p>By declaring <code>__all__</code>, your public API becomes explicit, and explicit is better than implicit. But <code>__all__</code> only works for module-level objects. Within classes, you will still have to rely on the underscore prefix convention to mark methods or attributes as internal/private.</p> <pre><code>class Thing:\n    def public_method(self):\n        ...\n\n    def _internal_method(self):\n        ...\n</code></pre>"},{"location":"guide/users/recommendations/public-apis/#redundant-aliases","title":"Redundant aliases","text":"<p>When you expose your public API in <code>__init__</code> modules by importing most objects from the underlying modules, it can be a bit tedious to import everything, and then list everything again in the <code>__all__</code> list attribute. For this reason, another convention emerged where objects imported and aliased with the same name are considered public.</p> my_package/__init__.py<pre><code>from elsewhere import something as something\nfrom my_package._internal_module import Thing as Thing\n</code></pre> <p>Here <code>Thing</code> and <code>something</code> are considered public even though they were imported. If <code>__all__</code> was defined, it would take precedence and redundant aliases wouldn't apply.</p>"},{"location":"guide/users/recommendations/public-apis/#wildcard-imports","title":"Wildcard imports","text":"<p>Same as for redundant aliases, this convention says that all objects imported thanks to wildcard imports are public. This can again be useful in <code>__init__</code> modules where you expose lots of objects declared in submodules.</p> my_package/__init__.py<pre><code>from my_package._internal_module1 import *\nfrom my_package._internal_module2 import *\n</code></pre> <p>Note that the wildcard imports logic stays the same, and imports either all objects that do not start with an underscore (imported objects included!), or all objects listed in <code>__all__</code> if it is defined. It doesn't care about other conventions such as redundant aliases, or the wildcard imports convention itself.</p> <p>Our recommendation \u2014 Use the underscore prefix and <code>__all__</code> conventions.</p> <p>Use both the underscore prefix convention for consistent naming at module and class levels, and the <code>__all__</code> convention for declaring your public API. We do not recommend using the redundant aliases convention, because it doesn't provide any information at runtime. We do not recommend the wildcard import convention either, for the same reason and for additional reasons mentioned here. We still provide the <code>griffe-public-redundant-aliases</code> and <code>griffe-public-wildcard-imports</code> extensions for those who would still like to rely on these conventions.</p> <p>Our recommendation matches PEP 8:</p> <p>To better support introspection, modules should explicitly declare the names in their public API using the <code>__all__</code> attribute. Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p> <p>Even with <code>__all__</code> set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still be prefixed with a single leading underscore.</p> <p>Concatenating <code>__all__</code> for easier maintenance of <code>__init__</code> modules.</p> <p>If you worry about maintenance of your <code>__init__</code> modules, know that you can very well concatenate <code>__all__</code> lists from submodules into the current one:</p> <pre><code>\ud83d\udcc1 my_package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  module.py\n\u251c\u2500\u2500 \ud83d\udcc1 subpackage1/\n\u2502   \u251c\u2500\u2500  __init__.py\n\u2502   \u2514\u2500\u2500  _module1a.py\n\u2514\u2500\u2500 \ud83d\udcc1 subpackage2/\n    \u251c\u2500\u2500  __init__.py\n    \u2514\u2500\u2500  _module2a.py\n</code></pre> my_package/subpackage1/__init__.py<pre><code>from my_package.subpackage1.module1a import this1a, that1a\n\n__all__ = [\"this1a\", \"that1a\"]\n</code></pre> my_package/subpackage2/__init__.py<pre><code>from my_package.subpackage2.module2a import this2a, that2a\n\n__all__ = [\"this2a\", \"that2a\"]\n</code></pre> my_package/__init__.py<pre><code>from my_package.module import this\nfrom my_package.subpackage1 import this1a, that1a, __all__ as subpackage1_all\nfrom my_package.subpackage2 import this2a, that2a, __all__ as subpackage2_all\n\n__all__ = [\"this\", *subpackage1_all, *subpackage2_all]\n\n# Griffe supports the `+` and `+=` operators too:\n# __all__ = [\"this\"] + subpackage1_all + subpackage2_all\n# __all__ = [\"this\"]; __all__ += subpackage1_all; __all__ += subpackage2_all \n</code></pre> <p>However we would argue that <code>this1a</code>, <code>that1a</code>, <code>this2a</code> and <code>that2a</code> should not be exposed publicly in more than one location. See our section on unique names and public locations.</p>"},{"location":"guide/users/recommendations/public-apis/#module-layout","title":"Module layout","text":"<p>We usually split the code of our packages into different modules. The code can be split according to domains, types of objects, logic, etc.: we don't have any recommendation on that. However, your package layout is part of your API, so it should be taken into account when deciding what you expose as your public API.</p> <p>Most of the time, packages implicitly expose their module layout in their public API. Indeed, when you start a new project, you create new modules but don't immediately think about making them private. Then the project grows organically, you add more modules, and users start actually relying on their layout, importing specific objects from specific modules. Now when you want to move objects around, to reorganize your layout, you introduce breaking changes. So you have to create a deprecation period where objects that moved around are still importable in the old locations, but emit deprecation warnings. A module-level <code>__getattr__</code> function is commonly used for that.</p> package/old_module.py<pre><code>import warnings\nfrom typing import Any\n\ndef __getattr__(name: str) -&gt; Any:\n    if name == \"my_object\":\n        warnings.warn(\n            \"Importing `my_object` from `old_module` is deprecated, import it from `new_module` instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n        from package.new_module import my_object\n\n        return my_object\n\n    raise AttributeError(f\"module 'old_module' has no attribute '{name}'\")\n</code></pre> <p>Such changes sometimes go unnoticed before the breaking change is released, because users don't enable deprecation warnings. These changes can also be confusing to users when they do notice the warnings: maybe they don't use the deprecated import themselves, and are not sure where to report the deprecated use. These changes also require time to upgrade, and time to maintain.</p> <p>What if we could make this easier?</p> <p>By hiding your module layout from your public API, you're removing all these pain points at once. Any object can freely move around without ever impacting users. Maintainers do not need to set deprecation periods where old and new uses are supported, or bump the major part of their semantic version when they stop supporting the old use. Hiding the module layout also removes the ambiguity of whether a submodule is considered public or not: PEP 8 doesn't mention anything about it, and it doesn't look like the <code>__all__</code> convention expects developers to list their submodules too. In the end it looks like submodules are only subject to the underscore prefix convention.</p> <p>So, how do we hide the module layout from the public API?</p> <p>The most common way to hide the module layout is to make all your modules private, by prefixing their name with an underscore:</p> <pre><code>\ud83d\udcc1 my_package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  _combat.py\n\u251c\u2500\u2500  _exploration.py\n\u2514\u2500\u2500  _sorcery.py\n</code></pre> <p>Then, you expose public objects in the top-level <code>__init__</code> module thanks to its <code>__all__</code> attribute:</p> my_package/__init__.py<pre><code>from my_package._combat import Combat\nfrom my_package._exploration import navigate\nfrom my_package._sorcery import cast_spell\n\n__all__ [\n    \"Combat\",\n    \"navigate\",\n    \"cast_spell\",\n]\n</code></pre> <p>Now, if you want to move <code>cast_spell</code> into the <code>_combat</code> module, you can do so without impacting users. You can even rename your modules. All you have to do when doing so is update your top-level <code>__init__</code> module to import the objects from the right locations.</p> <p>If you have more than one layer of submodules, you don't have to make the next layer private: only the first one is enough, as it informs users that they shouldn't import from this layer anyway:</p> <pre><code>\ud83d\udcc1 my_package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  _combat.py\n\u251c\u2500\u2500  _exploration.py\n\u2514\u2500\u2500 \ud83d\udcc1 _sorcery/\n    \u251c\u2500\u2500  __init__.py\n    \u251c\u2500\u2500  dark.py\n    \u2514\u2500\u2500  light.py\n</code></pre> <p>If you don't want to bother prefixing every module with an underscore, you could go one step further and do one of these two things:</p> <ul> <li> <p>move everything into an <code>_internal</code> directory:</p> <pre><code>\ud83d\udcc1 my_package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 _internal/\n    \u251c\u2500\u2500  __init__.py\n    \u251c\u2500\u2500  combat.py\n    \u251c\u2500\u2500  exploration.py\n    \u2514\u2500\u2500 \ud83d\udcc1 sorcery/\n        \u251c\u2500\u2500  __init__.py\n        \u251c\u2500\u2500  dark.py\n        \u2514\u2500\u2500  light.py\n</code></pre> </li> <li> <p>or move everything into a private package:</p> <pre><code>\ud83d\udcc1 my_package/\n\u2514\u2500\u2500  __init__.py\n\ud83d\udcc1 _my_package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  combat.py\n\u251c\u2500\u2500  exploration.py\n\u2514\u2500\u2500 \ud83d\udcc1 sorcery/\n    \u251c\u2500\u2500  __init__.py\n    \u251c\u2500\u2500  dark.py\n    \u2514\u2500\u2500  light.py\n</code></pre> </li> </ul> <p>Whatever hidden layout you choose (private modules, internals, private package), it is not very important, as you will be able to switch from one to another easily. In Griffe we chose to experiment and go with the private package approach. This highlighted a few shortcomings that we were able to address in both Griffe and mkdocstrings-python, so we are happy with the result.</p> <p>Top-level-only exposition doesn't play well with large packages.</p> <p>The fully hidden layout plays well with small to medium projects. If you maintain a large project, it can become very impractical for both you and your users to expose every single object in the top-level <code>__init__</code> module. For large projects, it therefore makes sense to keep at least one or two additional public layers in your module layout. Sometimes packages also implement many variations of the same abstract class, using the same name in many different modules: in these cases, the modules are effective namespaces that could be kept in the public API.</p> <p>Our recommendation \u2014 Hide your module layout early.</p> <p>Start hiding your module layout early! It is much easier to (partially) expose the layout later than to hide it after your users started relying on it. It will also make code reorganizations much easier.</p>"},{"location":"guide/users/recommendations/public-apis/#unique-names-and-public-locations","title":"Unique names and public locations","text":"<p>Whether or not you are planning to hide your module layout, as recommended in the previous section, one thing that will help both you and your users is making sure your object names are unique across your code base. Having unique names ensures that you can expose everything at the top-level module of your package without having to alias objects (using <code>from ... import x as y</code>). It will also ensure that your users don't end up importing multiple different objects with the same name, again having to alias them. Finally, it forces you to use meaningful names for your objects, names that don't need the context of the above namespaces (generally modules) to understand what they mean. For example, in Griffe we previously exposed <code>griffe.docstrings.utils.warning</code>. Exposing <code>warning</code> at the top-level made it very vague: what does it do? So we renamed it <code>docstring_warning</code>, which is much clearer.</p> <p>Ensuring unique names across a code base is sometimes not feasible, or not desirable; in this case, try to use namespacing while still hiding the module layout the best you can.</p> <p>In accordance with our recommendation on module layouts, it is also useful to ensure that a single public object is exposed in a single location. Ensuring a unique public location for each object removes any ambiguity on the user side as to where to import the object from. It also helps documentation generators that try to cross-reference objects: with several locations, they cannot know for sure which one is the best to reference (which path is best to use and display in the generated documentation). With a fully hidden layout, all objects are only exposed in the top-level module, so there is no ambiguity. With partially hidden layouts, or completely public layouts, make sure to declare your public API so that each object is only exposed in a single location. Example:</p> <pre><code>\ud83d\udcc1 my_package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500  module.py\n</code></pre> Multiple locations, badSingle location, goodSingle location (top-level), good <p>Here the <code>Hello</code> class is exposed in both <code>my_package.module</code> and <code>my_package</code>.</p> my_package/module.py<pre><code>__all__ [\"Hello\"]\n\nclass Hello:\n    ...\n</code></pre> my_package/__init__<pre><code>from my_package.module import Hello\n\n__all__ = [\"Hello\"]\n</code></pre> <p>Here the <code>Hello</code> class is only exposed in <code>my_package.module</code>.</p> my_package/module.py<pre><code>__all__ [\"Hello\"]\n\nclass Hello:\n    ...\n</code></pre> my_package/__init__<pre><code># Nothing to see here.\n</code></pre> <p>If you wanted to expose it in the top-level <code>__init__</code> module instead, then you should hide your module layout by making <code>module.py</code> private, renaming it <code>_module.py</code>, or using other hiding techniques such as described in the Module layout section.</p> <p>Here the <code>Hello</code> class is only exposed in <code>package</code>.</p> my_package/module.py<pre><code>__all__ = []\n\nclass Hello:\n    ...\n</code></pre> my_package/__init__<pre><code>from my_package.module import Hello\n\n__all__ = [\"Hello\"]\n</code></pre> <p>It feels weird to \"unpublicize\" the <code>Hello</code> class in <code>my_package.module</code> by declaring an empty <code>__all__</code>, so maybe the module should be made private instead: <code>my_package/_module.py</code>. See other hiding techniques in the Module layout section.</p> <p>Our recommendation \u2014 Expose public objects in single locations, use meaningful names.</p> <p>We recommend making sure that each public object is exposed in a single location. Ensuring unique names might be more tricky depending on the code base, so we recommend ensuring meaningful names at least, not requiring the context of modules above to understand what the objects are for.</p>"},{"location":"guide/users/recommendations/public-apis/#logger-names","title":"Logger names","text":"<p>The documentation of the standard <code>logging</code> library recommends to use <code>__name__</code> as logger name when obtaining a logger with <code>logging.getLogger()</code>, unless we have a specific reason for not doing that. Unfortunately, no examples of such specific reasons are given. So let us give one.</p> <p>Using <code>__name__</code> as logger names means that your loggers have the same name as your module paths. For example, the module <code>package/module.py</code>, whose path and <code>__name__</code> value are <code>package.module</code>, will have a logger with the same name, i.e. <code>package.module</code>. If your module layout is public, that's fine: renaming the module or moving it around is already a breaking change that you must document.</p> <p>However if your module layout is hidden, or if this particular module is private, then even though renaming it or moving it around is not breaking change, the change of name of its logger is. Indeed, by renaming your module (or moving it), you changed its <code>__name__</code> value, and therefore you changed its logger name.</p> <p>Now, users that were relying on this name (for example to silence WARNING-level logs and below coming from this particular module) will see their logic break without any error and without any deprecation warning.</p> <pre><code># For example, the following would have zero effect if `_module` was renamed `_other_module`.\npackage_module_logger = logging.getLogger(\"package._module\")\npackage_module_logger.setLevel(logging.ERROR)\n</code></pre> <p>Could we emit a deprecation warning when users obtain the logger with the old name? Unfortunately, there is no standard way to do that. This would require patching <code>logging.getLogger</code>, which means it would only work when users actually use this method, in a Python interpreter, and not for all the other ways logging can be configured (configuration files, configuration dicts, etc.).</p> <p>Since it is essentially impossible to deprecate a logger name, we recommend to avoid using <code>__name__</code> as logger name, at the very least in private modules.</p> <p>Our recommendation \u2014 Use a single logger.</p> <p>Absolutely avoid using <code>__name__</code> as logger name in private modules. If your module layout is hidden, or does not matter for logging purposes, just use the same logger everywhere by using your package name as logger name. Example: <code>logger = logging.getLogger(\"griffe\")</code>. Show your users how to temporarily alter your global logger (typically with context managers) so that altering subloggers becomes unnecessary. Maybe even provide the utilities to do that.</p>"},{"location":"guide/users/recommendations/public-apis/#documentation","title":"Documentation","text":"<p>Obviously, your public API should be documented. Each object should have a docstring that explains why the object is useful and how it is used. More on that in our docstrings recommendations. Docstrings work well for offline documentation; we recommend exposing your public API online too, for example with MkDocs and mkdocstrings' Python handler, or with other SSGs (Static Site Generators). Prefer a tool that is able to create a Sphinx-like inventory of objects (an <code>objects.inv</code> file) that will allow other projects to easily cross-reference your API from their own documentation. Make sure each and every object of your public API is documented in your web docs and therefore added to the objects inventory (and maybe that nothing else is added to this inventory as \"public API\").</p> <p>Our recommendation \u2014 Document your public API extensively.</p> <p>Write docstrings for each and every object of your public API. Deploy online documentation where each object is documented and added to an object inventory that can be consumed by third-party projects. If you find yourself reluctant to document a public object, it means that this object should maybe be internal instead.</p> <p>Our documentation framework of choice is of course MkDocs combined with our mkdocstrings plugin.</p>"},{"location":"guide/users/recommendations/public-apis/#ensuring-api-rules","title":"Ensuring API rules","text":"<p>If you already follow some of these recommendations, or if you decide to start following them, it might be a good idea to make sure that these recommendations keep being followed as your code base evolves. The intent of these recommendations, or \"rules\", can be captured in tests relatively easily thanks to Griffe.</p> <p>We invite you to check out our own test file: <code>test_internals.py</code>. This test module asserts several things:</p> <ul> <li>all public objects are exposed in the top-level <code>griffe</code> module</li> <li>all public objects have unique names</li> <li>all public objects have single locations</li> <li>all public objects are added to the inventory (which means they are documented in our API docs)</li> <li>no private object is added to the inventory</li> </ul> <p>Our recommendation \u2014 Test your API declaration early.</p> <p>The sooner you test your API declaration, the better your code base will evolve. This will force you to really think about how your API is exposed to your users. This will prevent mistakes like leaving a new object as public while you don't want users to start relying on it, or forgetting to expose a public object in your top-level module or to document it in your API docs.</p>"},{"location":"guide/users/recommendations/public-apis/#linters","title":"Linters","text":"<p>Depending on their configuration, many popular Python linters will warn you that you access or import private objects. This doesn't play well with hidden module layouts, where modules are private or moved under a private (sub-)package. Sometimes it doesn't even play well with private methods</p> <p>Our recommendation \u2014 Ignore \"protected access\" warnings for your own package, or make the warnings smarter.</p> <p>To users of linters, we recommend adding <code># noqa</code> comments on the relevant code lines, or globally disabling warnings related to \"private object access\" if per-line exclusion requires too much maintenance.</p> <p>To authors of linters, we recommend (if possible) making these warnings smarter: they shouldn't be triggered when private objects are accessed from within the same package. Marking objects as private is meant to prevent downstream code from using them, not to prevent the developers of the current package themselves from using them: they know what they are doing and should be allowed to use their own private objects without warnings. At the same time, they don't want to disable these warnings globally, so the warnings should be derived in multiple versions, or made smarter.</p>"},{"location":"guide/users/recommendations/public-apis/#the-cli-is-api-too","title":"The CLI is API too","text":"<p>This section deserves an entire article, but we will try to stay succinct here.</p> <p>Generally, we distinguish the API (Application Programming Interface) from the CLI (Command Line Interface), TUI (Textual User Interface) or GUI (Graphical User Interface). Contrary to TUIs or GUIs which are not likely to be controlled programmatically (they typically work with keyboard and mouse inputs), the CLI can easily be called by various scripts or programs, including from Python programs.</p> <p>Even if a project was not designed to be used programmatically (doesn't expose a public API), it is a certainty that with enough popularity, it will be used programmatically. And the CLI will even more so be used programmatically if there is no API. Even if there is an API, sometimes it makes more sense to hook into the CLI rather than the API (cross-language integrations, wrappers, etc.).</p> <p>Therefore, we urge everyone to consider their CLI as an API too. We urge everyone to always design their project as library-first APIs rather than CLI-first tools.</p> <p>The first user of your CLI as API is... you. When you declare your project's CLI entrypoint in pyproject.toml:</p> <pre><code>[project.scripts]\ngriffe = \"griffe:main\"\n</code></pre> <p>...this entrypoint ends up as a Python script in the <code>bin</code> directory of your virtual environment:</p> <pre><code>#!/media/data/dev/griffe/.venv/bin/python\n# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom griffe import main\nif __name__ == \"__main__\":\n    sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n    sys.exit(main())\n</code></pre> <p>In this script, we find our entrypoint, <code>griffe.main</code>, used programmatically.</p> <p>The second user of your CLI as API is... you again. When you write tests for your CLI, you import your entrypoints and call them by passing CLI options and arguments, maybe asserting the exit code raised with a <code>SystemExit</code> or the standard output/error thanks to pytest's capture fixtures. Some simplified examples from our own test suite:</p> tests/test_cli.py<pre><code>import pytest\nimport griffe\n\n\ndef test_main() -&gt; None:\n    assert griffe.main([\"dump\", \"griffe\", \"-s\", \"src\", \"-o/dev/null\"]) == 0\n\n\ndef test_show_help(capsys: pytest.CaptureFixture) -&gt; None:\n    with pytest.raises(SystemExit):\n        griffe.main([\"-h\"])\n    captured = capsys.readouterr()\n    assert \"griffe\" in captured.out\n\n\ndef test_show_version(capsys: pytest.CaptureFixture) -&gt; None:\n    with pytest.raises(SystemExit):\n        griffe.main([\"-V\"])\n    captured = capsys.readouterr()\n    assert griffe.get_version() in captured.out\n</code></pre> <p>Now, when you start testing the logic of your CLI subcommands, such as our <code>dump</code> subcommand above, you might feel like passing again and again through the command-line arguments parser (here <code>argparse</code>) is wasteful and redundant. It is important to test that your arguments are parsed correctly (as you expect them to be parsed), but they shouldn't have to be parsed when you are testing the underlying logic.</p> <p>It's a hint that your command-line arguments parsing (and command-line handling generally) should be decoupled from the logic below it: write functions with proper parameters! Then call these functions from your main CLI entrypoint, with the arguments obtained from parsing the command-line arguments and options. It will make testing and debugging much, much easier:</p> <pre><code>import argparse\nimport sys\n\n\ndef dump(...):\n    ...\n\n\ndef main(args: list[str] | None = None) -&gt; int:\n    parser = argparse.ArgumentParser(...)\n    opts = parser.parse_args(args)\n    if opts.subcommand == \"dump\":\n        return dump(opts.arg1, opts.arg2, ...)\n    elif ...\n\n    print(f\"Unknown subcommand {opts.subcommand}\", file=sys.stderr)\n    return 1\n</code></pre> <p>Now instead of having to call <code>main([\"dump\", \"...\"])</code> in your tests, you can directly call <code>dump(...)</code>, with all the benefits from static-typing and your IDE features, such as autocompletion, linting, etc..</p> <p>The third and next users of your CLI as API are your users: just as you made your own life easier, you made their life easier for when they want to call some subcommands of your tool programmatically. No more messing with lists of strings without autocompletion or linting, no more patching of <code>sys.argv</code>, no more following the maze of transformations applied by this fancy CLI framework before finally reaching the crux of the subcommand you want to call, no more trying to replicate these transformations yourself with the CLI framework's API to avoid copy-pasting the dozens of lines you're only interested in.</p> <p>Our recommendation \u2014 Decouple command-line parsing from your CLI entrypoints.</p> <p>Do not tie the command parsing logic with your program's logic. Create functions early, make them accept arguments using basic types (<code>int</code>, <code>str</code>, <code>list</code>, etc.) so that your users can call your main command or subcommands with a single import and single statement. Do not encode all the logic in a single big <code>main</code> function. Decoupling the CLI-parsing logic from your entrypoints will make them much easier to test and use programmatically. Consider your entrypoints part of your API!</p> <p>Our CLI framework of choice is Cappa.</p>"},{"location":"guide/users/recommendations/public-apis/#deprecations","title":"Deprecations","text":"<p>With time, the code base of your project evolves. You add features, you fix bugs, and you generally reorganize code. Some of these changes might make your project's public API incompatible with previous versions. In that case, you usually have to \"deprecate\" previous usage in favor of the new usage. That means you have to support both, and emit deprecation warnings when old usage is detected.</p> <p>There are many different ways of deprecating previous usage of code, which depend on the change itself. We invite you to read our Checking APIs chapter, which describes all the API changes Griffe is able to detect, and provides hints on how to allow deprecation periods for each kind of change.</p> <p>In addition to emitting deprecation warnings, you should also update the docstrings and documentation for the old usage to point at the new usage, add \"deprecated\" labels where possible, and mark objects as deprecated when possible.</p> <p>Our recommendation \u2014 Allow a deprecation period, document deprecations.</p> <p>Try allowing deprecation periods for every breaking change. Most changes can be made backward-compatible at the cost of writing legacy code. Use tools like Yore to manage legacy code, and standard utilities like <code>warnings.deprecated</code> to mark objects as deprecated. Griffe extensions such as griffe-warnings-deprecated can help you by dynamically augmenting docstrings for your API documentation.</p>"},{"location":"guide/users/recommendations/public-apis/#third-party-libraries","title":"Third-party libraries","text":"<p>A few third-party libraries directly or indirectly related to public APIs deserve to be mentioned here.</p> <p>public lets you decorate objects with <code>@public.add</code> to dynamically add them to <code>__all__</code>, so that you don't have to build a list of strings yourself. The \"public visibility\" marker is closer to each object, and might help avoid mistakes like forgetting to update <code>__all__</code> when an object is removed or renamed.</p> <p>modul, from Frost Ming, the author of PDM, goes one step further and actually hides attributes that are not marked \"exported\" from users: they won't be able to access un-exported attributes, leaving only the public API visible.</p> <p>Deprecated, which was probably a source of inspiration for PEP 702, allows decorating objects with <code>@deprecated</code> to mark them as deprecated. Such decorated callables will emit deprecation warnings when called. PEP 702's <code>warnings.deprecated</code> could be seen as its successor, bringing the feature directly into the standard library so that type checkers and other static analysis tools can converge on this way to mark objects as deprecated.</p> <p>slothy, which is less directly related to public APIs, but useful for the case where you are hiding your modules layout and exposing all your public API from the top-level <code>__init__</code> module. Depending on the size of your public API, and the time it takes to import everything (memory initializations, etc.), it might be interesting to make all these imports lazy. With a lazily imported public API, users who are only interested in a few objects of your public API won't have to pay the price of importing everything.</p>"},{"location":"guide/users/recommendations/python-code/","title":"Python code best practices","text":"<p>This document describes some best practices to adopt when using Griffe, or when writing Python code that will be analyzed by Griffe.</p>"},{"location":"guide/users/recommendations/python-code/#avoid-member-submodule-name-shadowing","title":"Avoid member-submodule name shadowing","text":"<p>Sometimes we find that an <code>__init__</code> module defines or imports an object which has the same name as a submodule of the parent package.</p> <p>Case 1</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 subpackage/\n    \u251c\u2500\u2500  __init__.py\n    \u2514\u2500\u2500  thing.py\n</code></pre> package/subpackage/__init__.py<pre><code>thing = \"thing from init module\"\n</code></pre> package/subpackage/thing.py<pre><code>other_thing = \"other thing from thing submodule\"\n</code></pre> <p>We recommend not doing that.</p> <p>Why? Because the <code>package.subpackage.thing</code> submodule can eventually shadow the <code>package.subpackage.thing</code> attribute. Try this:</p> <pre><code># Replicate the file tree from above.\nmkdir -p package/subpackage\necho 'thing = \"thing from init module\"' &gt; package/subpackage/__init__.py\necho 'other_thing = \"other thing from thing submodule\"' &gt; package/subpackage/thing.py\n# Run a Python interpreter.\npython\n</code></pre> <pre><code>&gt;&gt;&gt; from package import subpackage\n&gt;&gt;&gt; subpackage.thing\n'thing from init module'\n&gt;&gt;&gt; # OK, but...\n&gt;&gt;&gt; from package.subpackage.thing import other_thing\n&gt;&gt;&gt; subpackage.thing\n&lt;module 'package.subpackage.thing' from 'package/subpackage/thing.py'&gt;\n</code></pre> <p>By simply importing from the <code>thing</code> submodule, the <code>thing</code> attribute of <code>subpackage</code> was overwritten by the <code>thing</code> submodule.</p> <p>Case 2</p> <p>In a particular case though, the situation improves: if we import <code>thing</code> in the init module instead of declaring it, then further imports will not overwrite anything:</p> package/subpackage/__init__.py<pre><code>from package.subpackage.thing import thing\n</code></pre> package/subpackage/thing.py<pre><code>thing = \"thing from thing submodule\"\n</code></pre> <pre><code># Update the modules.\necho 'from package.subpackage.thing import thing' &gt; package/subpackage/__init__.py\necho 'thing = \"thing from thing submodule\"' &gt; package/subpackage/thing.py\n# Run a Python interpreter.\npython\n</code></pre> <pre><code>&gt;&gt;&gt; from package import subpackage\n&gt;&gt;&gt; subpackage.thing\n'thing from thing'\n&gt;&gt;&gt; # OK\n&gt;&gt;&gt; from package.subpackage.thing import thing\n&gt;&gt;&gt; subpackage.thing\n'thing from thing'\n&gt;&gt;&gt; # Still OK\n</code></pre> <p>From an API perspective, and given that both cases are very similar but differ in behavior, we recommend not doing that either.</p> <p>If the goal is to isolate a single object into its own module, to then expose it in the parent module, then it would make sense that this object is the only object of the submodule to be exposed in the public API, and therefore the submodule could be marked as private by prefixing its name with an underscore:</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 subpackage/\n    \u251c\u2500\u2500  __init__.py\n    \u2514\u2500\u2500  _thing.py\n</code></pre> <p>With this, there is no ambiguity as to what <code>subpackage.thing</code> points to.</p> <p>For the reasons mentioned above, Griffe does not support this kind of name shadowing. During static analysis, the submodule will take precedence over the attribute. During dynamic analysis, Griffe's behavior is undefined.</p>"},{"location":"guide/users/recommendations/python-code/#avoid-wildcard-imports","title":"Avoid wildcard imports","text":"<p>Wildcard imports allow importing from a module all objects that do not start with an underscore <code>_</code>, or all objects that are listed in the module's <code>__all__</code> attribute, if it is defined.</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500  module.py\n</code></pre> <p>Explicitly exposed to wildcard imports</p> package/module.py<pre><code>__all__ = [\n    \"SomeClass\",\n    \"some_function\",\n    \"some_attribute\",\n]\n\nclass SomeClass: ...\nclass SomeOtherClass: ...\n\ndef some_function(): ...\ndef some_other_function(): ...\n\nsome_attribute = 0\nsome_other_attribute = 1\n</code></pre> <p>Implicitly exposed to wildcard imports</p> package/module.py<pre><code>class SomeClass: ...\nclass _SomeOtherClass: ...\n\ndef some_function(): ...\ndef _some_other_function(): ...\n\nsome_attribute = 0\n_some_other_attribute = 1\n</code></pre> <p>In both cases, using a wildcard import will only import <code>SomeClass</code>, <code>some_function</code> and <code>some_attribute</code>, and not their \"other\" counterparts:</p> package/__init__.py<pre><code>from package.module import *\n</code></pre> <p>While we recommend declaring your public API with <code>__all__</code> lists, we do not recommend using wildcard imports.</p> <p>In the implicit case, any other object imported in <code>module.py</code> will also be exported by the wildcard:</p> package/module.py<pre><code>from somewhere_else import this, that\n\nclass SomeClass: ...\nclass _SomeOtherClass: ...\n\ndef some_function(): ...\ndef _some_other_function(): ...\n\nsome_attribute = 0\n_some_other_attribute = 1\n</code></pre> <p>Here, <code>this</code> and <code>that</code> will also be imported when we do <code>from package.module import *</code>. To prevent that, we would have to alias these names as such:</p> package/module.py<pre><code>from somewhere_else import this as _this, that as _that\n</code></pre> <p>...which is not ideal.</p> <p>It gets even worse if <code>module.py</code> itself uses wildcard imports:</p> package/module.py<pre><code>from somewhere_else import *\n</code></pre> <p>Now using <code>from package.module import *</code> will import all objects that do not start with an underscore declared in the module, but also all the objects imported by it that do not start with an underscore, and also all the objects imported by the modules of the imported objects that do not start with an underscore, etc., recursively. Soon enough, we end up with dozens and dozens of objects exposed in <code>package</code>, while just a few of them are useful/meaningful to users.</p> <p>Not only that, but it also increases the risk of creating cycles in imports. Python can handle some of these cycles, but static analysis tools such as Griffe can have a much harder time trying to resolve them.</p> <p>In the explicit case, the situation improves, as only the objects listed in <code>__all__</code> will be exported to the modules that wildcard imports them. It effectively stops namespace pollution, but it does not remove the risk of cyclic imports, only decreases it.</p> <p>We have seen code bases where parent modules wildcard imports from submodules, while these submodules also wildcard imports from the parent modules... Python somehow handles this, but it is hell to handle statically, and it is just too error prone (cyclic imports, name shadowing, namespaces become dependent on the order of imports, etc.).</p> <p>For these reasons, we recommend not using wildcard imports. Instead, we recommend declaring your public API explicitly with <code>__all__</code>, and combining <code>__all__</code> lists together if needed:</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  module.py\n\u2514\u2500\u2500  other_module.py\n</code></pre> <p>Completely explicit:</p> package/__init__.py<pre><code>from package.module import only, needed, objects\nfrom package.other_module import some, more\n\n__all__ = [\n    \"only\",\n    \"needed\",\n    \"some\",\n    \"function\",\n]\n\ndef function(): ...\n</code></pre> <p>Combining <code>__all__</code> lists:</p> package/__init__.py<pre><code>from package.module import only, needed, objects, __all__ as module_all\nfrom package.other_module import some, more, __all__ as other_module_all\n\n__all__ = [\n    *module_all,\n    *other_module_all,\n    \"function\",\n]\n\ndef function(): ...\n</code></pre> <p>Most Python linting tools allow you to forbid the use of wildcard imports.</p>"},{"location":"guide/users/recommendations/python-code/#prefer-canonical-imports","title":"Prefer canonical imports","text":"<p>Within your own code base, we recommend using canonical imports. By canonical, we mean importing objects from the module they are declared in, and not from another module that also imports them.</p> <p>Given the following tree:</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  module_a.py\n\u2514\u2500\u2500  module_b.py\n</code></pre> package/module_a.py<pre><code>from package.module_b import thing\n</code></pre> package/module_b.py<pre><code>thing = True\n</code></pre> <p>Don't do that:</p> package/__init__.py<pre><code>from package.module_a import thing  # Indirect import, bad.\n</code></pre> <p>Instead, do this:</p> package/__init__.py<pre><code>from package.module_b import thing  # Canonical import, good.\n</code></pre> <p>We especially recommend canonical imports over indirect imports from sibling modules passing through the parent:</p> package/__init__.py<pre><code>from package.module_a import thing  # Canonical import, good.\n</code></pre> package/module_a.py<pre><code>thing = True\n</code></pre> package/module_b.py<pre><code>from package import thing  # Indirect import passing through parent, bad.\n\n# Do this instead:\nfrom package.module_a import thing  # Canonical import, good.\n</code></pre> <p>Similarly, avoid exposing the API of external packages from your own package and recommending to use this indirect API.</p> package.py<pre><code>import numpy as np\n\n__all__ = [\"np\"]  # Bad.\n\n# Recommending users to do `from package import np`\n# or `import package; package.np.etc`: bad.\n</code></pre> <p>Instead, let users import Numpy themselves, with <code>import numpy as np</code>. This will help other analysis tools, for example to detect that Numpy is used directly and should therefore be listed as a dependency. To quote PEP 8:</p> <p>Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module\u2019s API, such as os.path or a package\u2019s <code>__init__</code> module that exposes functionality from submodules.</p> <p>Emphasis on exposes functionality from submodules: PEP 8 does not state exposing functionality from external packages.</p> <p>Using canonical imports provides several benefits:</p> <ul> <li>it can reduce the risk of cyclic imports</li> <li>it can increase performance by reducing hoops and importing less things (for example by not passing through a parent module that imports many things from siblings modules)</li> <li>it makes the code more readable and easier to refactor (less indirections)</li> <li>it makes the life of static analysis tools easier (less indirections)</li> </ul> <p>We recommend using the canonical-imports tool to automatically rewrite your imports as canonical.</p> <p>Note however that we recommend using public imports (importing from the \"public\" locations rather than the canonical ones) when:</p> <ul> <li>importing from other packages</li> <li>importing from your own package within your tests suite</li> </ul> <p>Apply these recommendations at your discretion: there may be other special cases where it might not make sense to use canonical imports.</p>"},{"location":"guide/users/recommendations/python-code/#make-your-compiled-objects-tell-their-true-location","title":"Make your compiled objects tell their true location","text":"<p>Python modules can be written in other languages (C, C++, Rust) and compiled. To extract information from such compiled modules, we have to use dynamic analysis, since sources are not available.</p> <p>A practice that seems common in projects including compiled modules in their distributions is to make the compiled modules private (prefix their names with an underscore), and to expose their objects from a public module higher-up in the module layout, for example by wildcard importing everything from it.</p> <pre><code>\ud83d\udcc1 package/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  module.py\n\u2514\u2500\u2500  _module.cpython-312-x86_64-linux-gnu.so\n</code></pre> package/module.py<pre><code>from package._module import *\n</code></pre> <p>Since the objects are exposed in <code>package.module</code> instead of <code>package._module</code>, developers sometimes decide to make their compiled objects lie about their location, and make them say that they are defined in <code>package.module</code> instead of <code>package._module</code>. Example:</p> <pre><code>&gt;&gt;&gt; from package._module import MyObject\n&gt;&gt;&gt; MyObject.__module__\n'package.module'\n</code></pre> <p>Don't do that.</p> <p>When using dynamic analysis and inspecting modules, Griffe must distinguish objects that were declared in the inspected module from objects that were imported from other modules. The reason is that if we didn't care where objects come from, we could end up inspecting the same objects and their members again and again, since they can be imported in many places. This could lead to infinite loops, recursivity errors, and would generally decrease performance.</p> <p>So, when Griffe inspects a member of the compiled <code>_module</code>, and this member lies and says it comes from <code>package.module</code>, Griffe thinks it was imported. It means that Griffe will record the object as an indirection, or alias, instead of visiting it in-place. But that is wrong: the object was actually declared in the module, and should not have been recorded as an indirection.</p> <p>Fortunately, we were able to put some guard-rails in place, which means that the case above where the compiled and public modules have the same name, except for the leading underscore, is supported, and will not trigger errors. But other cases where modules have different names will trigger issues, and we have to special case them in Griffe itself, after issues are reported.</p> <p>Please, use your framework features to correctly set the <code>__module__</code> attribute of your objects (functions, classes and their methods too) as their canonical location, not their public location or any other location in the final package.</p> <p>For example with PyO3:</p> <pre><code>// Your module is compiled and added as `_module` into `package`,\n// but its objects are exposed in `package` or `package.module`.\n// Set `module = \"package._module\"`, not `module = \"package\"` or `module = \"package.module\"`!\n#[pyclass(name = \"MyClass\", module = \"package._module\")]\nstruct MyClass {\n    // ...\n}\n</code></pre> <p>Some modules of the standard library are guilty of this too, and do so inconsistently (<code>ast</code> and <code>_ast</code>, <code>io</code> and <code>_io</code>, depending on the Python version...). For this reason, when checking if an object was declared in the currently inspected module, Griffe ultimately considers that any qualified name is equal to itself with each component stripped from leading underscores:</p> <pre><code>a.b.c == _a.b.c\na.b.c == _a._b._c\na.__b._c == __a.b.c\n...\n</code></pre> <p>When the qualified name of the object's parent module and the currently inspected module match like above, the object is inspected in-place (added as a member of the currently inspected module) instead of created as an alias.</p>"},{"location":"guide/users/recommendations/python-code/#avoid-forward-references-in-base-classes","title":"Avoid forward references in base classes","text":"<p>Python's type system will let you use forward references in generic types when they are used as base classes. For example:</p> Before Python 3.12Python 3.12+ <pre><code>from typing import TypeVar, Generic\n\nT = TypeVar('T')\n\n\nclass Foo(Generic[T]):\n    ...\n\n\nclass FooBar(Foo['Bar']):\n    ...\n\n\nclass Bar:\n    ...\n</code></pre> <pre><code>class Foo[T]:\n    ...\n\n\nclass FooBar(Foo['Bar']):\n    ...\n\n\nclass Bar:\n    ...\n</code></pre> <p>While Griffe will load this code without error, the <code>'Bar'</code> forward reference won't be resolved to the actual <code>Bar</code> class. As a consequence, downstream tools like documentation renderers won't be able to output a link to the <code>Bar</code> class. We therefore recommend to avoid using forward references in base classes, if possible.</p> <p>Instead, you can try one of the following approach:</p> <ul> <li>declare or import the <code>Bar</code> class earlier</li> <li> <p>declare a proper type:</p> <pre><code>class Foo[T]:\n    ...\n\n\ntype TBar = Bar\n\n\nclass FooBar(Foo[TBar]):\n    ...\n\n\nclass Bar:\n    ...\n</code></pre> </li> <li> <p>make <code>FooBar</code> generic again but with a default type:</p> <pre><code>class Foo[T]:\n    ...\n\n\nclass FooBar[T=Bar](Foo[T]):\n    ...\n\n\nclass Bar:\n    ...\n</code></pre> </li> </ul>"},{"location":"insiders/","title":"Insiders","text":"<p>Griffe follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>Griffe Insiders is a private fork of Griffe, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are granted access to this private repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Griffe and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 8 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> mkdocstrings/griffe-public-redundant-aliases \u2014 [Project] Mark objects imported with redundant aliases as public</li> <li> mkdocstrings/griffe-public-wildcard-imports \u2014 [Project] Mark wildcard imported objects as public</li> <li> mkdocstrings/griffe-runtime-objects \u2014 [Project] Make runtime objects available through <code>extra</code></li> <li> mkdocstrings/griffe-autodocstringstyle \u2014 [Project] Set docstring style to <code>auto</code> for external packages</li> <li> mkdocstrings/griffe-sphinx \u2014 [Project] Parse Sphinx-comments above attributes as docstrings</li> <li> Automatic detection of docstring style</li> <li> Expressions modernization</li> <li> Check API of Python packages from PyPI</li> </ul> <p>These are just the features related to this project. See the complete feature list on the author's main Insiders page.</p> <p>Additionally, your sponsorship will give more weight to your upvotes on issues, helping us prioritize work items in our backlog. For more information on how we prioritize work, see this page: Backlog management.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: By default, when you're sponsoring @pawamoy through a GitHub organization, all the publicly visible members of the organization will be invited to join our private repositories. If you wish to only grant access to a subset of users, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub accounts of the users that should be granted access.</p> <p>Tip: to ensure that access is not tied to a particular individual GitHub account, you can create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being granted access to our private repositories, the bot account can create private forks of our private repositories into your own organization, which all members of your organization will have access to.</p> <p>You can cancel your sponsorship anytime.<sup>4</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for Griffe. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or  planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<ul> <li> Check API of Python packages from PyPI</li> <li> Expressions modernization</li> <li> Automatic detection of docstring style</li> <li> mkdocstrings/griffe-autodocstringstyle \u2014 [Project] Set docstring style to <code>auto</code> for external packages</li> <li> mkdocstrings/griffe-public-redundant-aliases \u2014 [Project] Mark objects imported with redundant aliases as public</li> <li> mkdocstrings/griffe-public-wildcard-imports \u2014 [Project] Mark wildcard imported objects as public</li> <li> mkdocstrings/griffe-runtime-objects \u2014 [Project] Make runtime objects available through <code>extra</code></li> <li> mkdocstrings/griffe-sphinx \u2014 [Project] Parse Sphinx-comments above attributes as docstrings</li> </ul>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> mkdocstrings/griffe2md \u2014 [Project] Output API docs to Markdown using Griffe</li> <li> mkdocstrings/griffe-inherited-docstrings \u2014 [Project] Griffe extension for inheriting docstrings</li> </ul>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> Markdown output format for the <code>griffe check</code> command</li> <li> GitHub output format for the <code>griffe check</code> command</li> <li> mkdocstrings/griffe-pydantic \u2014 [Project] Griffe extension for Pydantic</li> <li> mkdocstrings/griffe-tui \u2014 [Project] A textual user interface for Griffe</li> <li> mkdocstrings/griffe-warnings-deprecated \u2014 [Project] Griffe extension for <code>@warnings.deprecated</code> (PEP 702)</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use Griffe locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with Griffe. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as Griffe?</p> <p>Yes. Whether you're an individual or a company, you may use Griffe Insiders precisely under the same terms as Griffe, which are given by the ISC license. However, we kindly ask you to respect our fair use policy:</p> <ul> <li>Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, privately fork or mirror it, but please don't make the source code public, as it would counteract the sponsorware strategy.</li> <li>If you cancel your subscription, your access to the private repository is revoked, and you will miss out on all future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks.</li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by Griffe.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Griffe, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#griffe-insiders","title":"Griffe Insiders","text":""},{"location":"insiders/changelog/#1.3.1","title":"1.3.1 December 31, 2024","text":"<ul> <li> <p>Accept per-style docstring options instead of generic options when docstring style is set to <code>auto</code>.     In MkDocs, apply the following change:</p> <pre><code> docstring_style: auto\n docstring_options:\n-  ignore_init_summary: true\n+  per_style_options:\n+    google:\n+      ignore_init_summary: true\n</code></pre> </li> </ul> <p></p>"},{"location":"insiders/changelog/#1.3.0","title":"1.3.0 August 09, 2024","text":"<ul> <li>Automatic docstring style detection</li> </ul>"},{"location":"insiders/changelog/#1.2.0","title":"1.2.0 March 11, 2024","text":"<ul> <li>Expressions modernization</li> </ul>"},{"location":"insiders/changelog/#1.1.0","title":"1.1.0 March 02, 2024","text":"<ul> <li>Check API of Python packages by downloading them from PyPI</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 January 16, 2024","text":"<ul> <li>Add Markdown and GitHub output formats to the check command</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>Griffe Insiders is a compatible drop-in replacement for Griffe, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-the-insiders-tool","title":"with the <code>insiders</code> tool","text":"<p><code>insiders</code> is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>Griffe Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/griffe.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/griffe.git\n</code></pre> How to get a GitHub personal access token? <p> The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use Griffe Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/griffe\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e griffe\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of Griffe which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#griffe","title":"griffe","text":"<p>Griffe package.</p> <p>Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.</p> <p>The entirety of the public API is exposed here, in the top-level <code>griffe</code> module.</p> <p>All messages written to standard output or error are logged using the <code>logging</code> module. Our logger's name is set to <code>\"griffe\"</code> and is public (you can rely on it). You can obtain the logger from the standard <code>logging</code> module: <code>logging.getLogger(\"griffe\")</code>. Actual logging messages are not part of the public API (they might change without notice).</p> <p>Raised exceptions throughout the package are part of the public API (you can rely on them). Their actual messages are not part of the public API (they might change without notice).</p> <p>The following paragraphs will help you discover the package's content.</p>"},{"location":"reference/api/#griffe--cli-entrypoints","title":"CLI entrypoints","text":"<p>Griffe provides a command-line interface (CLI) to interact with the package. The CLI entrypoints can be called from Python code.</p> <ul> <li><code>griffe.main</code>: Run the main program.</li> <li><code>griffe.check</code>: Check for API breaking changes in two versions of the same package.</li> <li><code>griffe.dump</code>: Load packages data and dump it as JSON.</li> </ul>"},{"location":"reference/api/#griffe--loaders","title":"Loaders","text":"<p>To load API data, Griffe provides several high-level functions.</p> <ul> <li><code>griffe.load</code>: Load and return a Griffe object.</li> <li><code>griffe.load_git</code>: Load and return a module from a specific Git reference.</li> <li><code>griffe.load_pypi</code>: Load and return a module from a specific package version downloaded using pip.</li> </ul>"},{"location":"reference/api/#griffe--models","title":"Models","text":"<p>The data loaded by Griffe is represented by several classes.</p> <ul> <li><code>griffe.Module</code>: The class representing a Python module.</li> <li><code>griffe.Class</code>: The class representing a Python class.</li> <li><code>griffe.Function</code>: The class representing a Python function or method.</li> <li><code>griffe.Attribute</code>: The class representing a Python attribute.</li> <li><code>griffe.Alias</code>: This class represents an alias, or indirection, to an object declared in another module.</li> </ul> <p>Additional classes are available to represent other concepts.</p> <ul> <li><code>griffe.Decorator</code>: This class represents a decorator.</li> <li><code>griffe.Parameters</code>: This class is a container for parameters.</li> <li><code>griffe.Parameter</code>: This class represent a function parameter.</li> </ul>"},{"location":"reference/api/#griffe--agents","title":"Agents","text":"<p>Griffe is able to analyze code both statically and dynamically, using the following \"agents\". However most of the time you will only need to use the loaders above.</p> <ul> <li><code>griffe.visit</code>: Parse and visit a module file.</li> <li><code>griffe.inspect</code>: Inspect a module.</li> </ul>"},{"location":"reference/api/#griffe--serializers","title":"Serializers","text":"<p>Griffe can serizalize data to dictionary and JSON.</p> <ul> <li><code>griffe.Object.as_json</code></li> <li><code>griffe.Object.from_json</code></li> <li><code>griffe.JSONEncoder</code>: JSON encoder for Griffe objects.</li> <li><code>griffe.json_decoder</code>: JSON decoder for Griffe objects.</li> </ul>"},{"location":"reference/api/#griffe--api-checks","title":"API checks","text":"<p>Griffe can compare two versions of the same package to find breaking changes.</p> <ul> <li><code>griffe.find_breaking_changes</code>: Find breaking changes between two versions of the same API.</li> <li><code>griffe.Breakage</code>: Breakage classes can explain what broke from a version to another.</li> </ul>"},{"location":"reference/api/#griffe--extensions","title":"Extensions","text":"<p>Griffe supports extensions. You can create your own extension by subclassing the <code>griffe.Extension</code> class.</p> <ul> <li><code>griffe.load_extensions</code>: Load configured extensions.</li> <li><code>griffe.Extension</code>: Base class for Griffe extensions.</li> </ul>"},{"location":"reference/api/#griffe--docstrings","title":"Docstrings","text":"<p>Griffe can parse docstrings into structured data.</p> <p>Main class:</p> <ul> <li><code>griffe.Docstring</code>: This class represents docstrings.</li> </ul> <p>Docstring section and element classes all start with <code>Docstring</code>.</p> <p>Docstring parsers:</p> <ul> <li><code>griffe.parse</code>: Parse the docstring.</li> <li><code>griffe.parse_auto</code>: Parse a docstring by automatically detecting the style it uses.</li> <li><code>griffe.parse_google</code>: Parse a Google-style docstring.</li> <li><code>griffe.parse_numpy</code>: Parse a Numpydoc-style docstring.</li> <li><code>griffe.parse_sphinx</code>: Parse a Sphinx-style docstring.</li> </ul>"},{"location":"reference/api/#griffe--exceptions","title":"Exceptions","text":"<p>Griffe uses several exceptions to signal errors.</p> <ul> <li><code>griffe.GriffeError</code>: The base exception for all Griffe errors.</li> <li><code>griffe.LoadingError</code>: Exception for loading errors.</li> <li><code>griffe.NameResolutionError</code>: Exception for names that cannot be resolved in a object scope.</li> <li><code>griffe.UnhandledEditableModuleError</code>: Exception for unhandled editables modules, when searching modules.</li> <li><code>griffe.UnimportableModuleError</code>: Exception for modules that cannot be imported.</li> <li><code>griffe.AliasResolutionError</code>: Exception for aliases that cannot be resolved.</li> <li><code>griffe.CyclicAliasError</code>: Exception raised when a cycle is detected in aliases.</li> <li><code>griffe.LastNodeError</code>: Exception raised when trying to access a next or previous node.</li> <li><code>griffe.RootNodeError</code>: Exception raised when trying to use siblings properties on a root node.</li> <li><code>griffe.BuiltinModuleError</code>: Exception raised when trying to access the filepath of a builtin module.</li> <li><code>griffe.ExtensionError</code>: Base class for errors raised by extensions.</li> <li><code>griffe.ExtensionNotLoadedError</code>: Exception raised when an extension could not be loaded.</li> <li><code>griffe.GitError</code>: Exception raised for errors related to Git.</li> </ul>"},{"location":"reference/api/#griffe--expressions","title":"Expressions","text":"<p>Griffe stores snippets of code (attribute values, decorators, base class, type annotations) as expressions. Expressions are basically abstract syntax trees (AST) with a few differences compared to the nodes returned by <code>ast</code>. Griffe provides a few helpers to extract expressions from regular AST nodes.</p> <ul> <li><code>griffe.get_annotation</code>: Get a type annotation as expression.</li> <li><code>griffe.get_base_class</code>: Get a base class as expression.</li> <li><code>griffe.get_condition</code>: Get a condition as expression.</li> <li><code>griffe.get_expression</code>: Get an expression from an AST node.</li> <li><code>griffe.safe_get_annotation</code>: Get a type annotation as expression, safely (returns <code>None</code> on error).</li> <li><code>griffe.safe_get_base_class</code>: Get a base class as expression, safely (returns <code>None</code> on error).</li> <li><code>griffe.safe_get_condition</code>: Get a condition as expression, safely (returns <code>None</code> on error).</li> <li><code>griffe.safe_get_expression</code>: Get an expression from an AST node, safely (returns <code>None</code> on error).</li> </ul> <p>The base class for expressions.</p> <ul> <li><code>griffe.Expr</code></li> </ul> <p>Expression classes all start with <code>Expr</code>.</p>"},{"location":"reference/api/#griffe--loggers","title":"Loggers","text":"<p>If you want to log messages from extensions, get a logger with <code>get_logger</code>. The <code>logger</code> attribute is used by Griffe itself. You can use it to temporarily disable Griffe logging.</p> <ul> <li><code>griffe.logger</code>: Our global logger, used throughout the library.</li> <li><code>griffe.get_logger</code>: Create and return a new logger instance.</li> </ul>"},{"location":"reference/api/#griffe--helpers","title":"Helpers","text":"<p>To test your Griffe extensions, or to load API data from code in memory, Griffe provides the following helpers.</p> <ul> <li><code>griffe.temporary_pyfile</code>: Create a Python file containing the given code in a temporary directory.</li> <li><code>griffe.temporary_pypackage</code>: Create a package containing the given modules in a temporary directory.</li> <li><code>griffe.temporary_visited_module</code>: Create and visit a temporary module with the given code.</li> <li><code>griffe.temporary_visited_package</code>: Create and visit a temporary package.</li> <li><code>griffe.temporary_inspected_module</code>: Create and inspect a temporary module with the given code.</li> <li><code>griffe.temporary_inspected_package</code>: Create and inspect a temporary package.</li> </ul>"},{"location":"reference/cli/","title":"CLI reference","text":""},{"location":"reference/cli/#cli-griffe","title":"griffe","text":"<p>Signatures for entire Python programs. </p> <p>Global Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit. Commands also accept the -h/--help option.</li> <li><code>-V</code>, <code>--version</code>: show program's version number and exit</li> <li><code>--debug-info</code>: Print debug information.</li> </ul> <p>Commands:</p>"},{"location":"reference/cli/#cli-dump","title":"dump","text":"<p>Load package-signatures and dump them as JSON.</p> <p>Search Options:</p> <ul> <li><code>-s</code>, <code>--search</code>: Paths to search packages into.</li> <li><code>-y</code>, <code>--sys-path</code>: Whether to append <code>sys.path</code> to search paths specified with <code>-s</code>.</li> </ul> <p>Loading Options:</p> <ul> <li><code>-B</code>, <code>--find-stubs-packages</code>: Whether to look for stubs-only packages and merge them with concrete ones.</li> <li><code>-e</code>, <code>--extensions</code>: A list of extensions to use.</li> <li><code>-X</code>, <code>--no-inspection</code>: Disallow inspection of builtin/compiled/not found modules. Default: <code>True</code>.</li> <li><code>-x</code>, <code>--force-inspection</code>: Force inspection of everything, even when sources are found.</li> </ul> <p>Dump Options:</p> <ul> <li><code>packages</code> <code>PACKAGE</code>: Packages to find, load and dump.</li> <li><code>-f</code>, <code>--full</code>: Whether to dump full data in JSON.</li> <li><code>-o</code>, <code>--output</code>: Output file. Supports templating to output each package in its own file, with <code>{package}</code>. Default: <code>sys.stdout</code>.</li> <li><code>-d</code>, <code>--docstyle</code>: The docstring style to parse.</li> <li><code>-D</code>, <code>--docopts</code>: The options for the docstring parser.</li> <li><code>-r</code>, <code>--resolve-aliases</code>: Whether to resolve aliases.</li> <li><code>-I</code>, <code>--resolve-implicit</code>: Whether to resolve implicitly exported aliases as well. Aliases are explicitly exported when defined in <code>__all__</code>.</li> <li><code>-U</code>, <code>--resolve-external</code>: Always resolve aliases pointing to external/unknown modules (not loaded directly).Default is to resolve only from one module to its private sibling (<code>ast</code> -&gt; <code>_ast</code>).</li> <li><code>--no-resolve-external</code>: Never resolve aliases pointing to external/unknown modules (not loaded directly).Default is to resolve only from one module to its private sibling (<code>ast</code> -&gt; <code>_ast</code>). Default: <code>True</code>.</li> <li><code>-S</code>, <code>--stats</code>: Show statistics at the end.</li> </ul> <p>Debugging Options:</p> <ul> <li><code>-L</code>, <code>--log-level</code> <code>LEVEL</code>: Set the log level: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>. Default: <code>INFO</code>.</li> </ul> <p>Common Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> </ul>"},{"location":"reference/cli/#cli-check","title":"check","text":"<p>Check for API breakages or possible improvements.</p> <p>Search Options:</p> <ul> <li><code>-s</code>, <code>--search</code>: Paths to search packages into.</li> <li><code>-y</code>, <code>--sys-path</code>: Whether to append <code>sys.path</code> to search paths specified with <code>-s</code>.</li> </ul> <p>Loading Options:</p> <ul> <li><code>-B</code>, <code>--find-stubs-packages</code>: Whether to look for stubs-only packages and merge them with concrete ones.</li> <li><code>-e</code>, <code>--extensions</code>: A list of extensions to use.</li> <li><code>-X</code>, <code>--no-inspection</code>: Disallow inspection of builtin/compiled/not found modules. Default: <code>True</code>.</li> <li><code>-x</code>, <code>--force-inspection</code>: Force inspection of everything, even when sources are found.</li> </ul> <p>Debugging Options:</p> <ul> <li><code>-L</code>, <code>--log-level</code> <code>LEVEL</code>: Set the log level: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>. Default: <code>INFO</code>.</li> </ul> <p>Common Options:</p> <ul> <li><code>-h</code>, <code>--help</code>: Show this help message and exit.</li> </ul> <p>Check Options:</p> <ul> <li><code>package</code> <code>PACKAGE</code>: Package to find, load and check, as path.</li> <li><code>-a</code>, <code>--against</code> <code>REF</code>: Older Git reference (commit, branch, tag) to check against. Default: load latest tag.</li> <li><code>-b</code>, <code>--base-ref</code> <code>BASE_REF</code>: Git reference (commit, branch, tag) to check. Default: load current code.</li> <li><code>--color</code>: Force enable colors in the output.</li> <li><code>--no-color</code>: Force disable colors in the output.</li> <li><code>-v</code>, <code>--verbose</code>: Verbose output.</li> <li><code>-f</code>, <code>--format</code>: Output format.</li> </ul>"},{"location":"reference/docstrings/","title":"Docstrings","text":"<p>Griffe provides different docstring parsers allowing to extract even more structured data from source code.</p> <p>The available parsers are:</p> <ul> <li><code>google</code>, to parse Google-style docstrings, see Napoleon's documentation</li> <li><code>numpy</code>, to parse Numpydoc docstrings, see Numpydoc's documentation</li> <li><code>sphinx</code>, to parse Sphinx-style docstrings, see Sphinx's documentation</li> <li><code>auto</code> (sponsors only), to automatically detect the docstring style, see Auto-style</li> </ul> <p>Most of the time, the syntax specified in the aforementioned docs is supported. In some cases, the original syntax is not supported, or is supported but with subtle differences. We will try to document these differences in the following sections.</p> <p>No assumption is made on the markup used in docstrings: it's retrieved as regular text. Tooling making use of Griffe can then choose to render the text as if it is Markdown, or AsciiDoc, or reStructuredText, etc..</p>"},{"location":"reference/docstrings/#google-style","title":"Google-style","text":"<p>Google-style docstrings, see Napoleon's documentation.</p>"},{"location":"reference/docstrings/#google-syntax","title":"Syntax","text":"<p>Sections are written like this:</p> <pre><code>section identifier: optional section title\n    section contents\n</code></pre> <p>All sections identifiers are case-insensitive. All sections support multiple lines in descriptions, as well as blank lines. The first line must not be blank. Each section must be separated from contents above by a blank line.</p> <p>\u274c This is invalid and will be parsed as regular markup:</p> <pre><code>Some text.\nNote: # (1)!\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <ol> <li>Missing blank line above.</li> </ol> <p>\u274c This is invalid and will be parsed as regular markup:</p> <pre><code>Some text.\n\nNote: # (1)!\n\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <ol> <li>Extraneous blank line below.</li> </ol> <p>\u2705 This is valid and will parsed as a text section followed by a note admonition:</p> <pre><code>Some text.\n\nNote:\n    Some information.\n\n    Blank lines allowed.\n</code></pre> <p>Find out possibly invalid section syntax by grepping for \"reasons\" in Griffe debug logs:</p> <pre><code>griffe dump -Ldebug -o/dev/null -fdgoogle your_package 2&gt;&amp;1 | grep reasons\n</code></pre> <p>Some sections support documenting multiple items (attributes, parameters, etc.). When multiple items are supported, each item description can use multiple lines, and continuation lines must be indented once more so that the parser is able to differentiate items.</p> <pre><code>def foo(a, b):\n    \"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n            Continuation line 1.\n\n            Continuation line 2.\n        b: Here's b.\n    \"\"\"\n</code></pre> <p>It's possible to start a description with a newline if you find it less confusing:</p> <pre><code>def foo(a, b):\n    \"\"\"Foo.\n\n    Parameters:\n        a:\n            Here's a.\n            Continuation line 1.\n\n            Continuation line 2.\n        b: Here's b.\n    \"\"\"\n</code></pre>"},{"location":"reference/docstrings/#google-admonitions","title":"Admonitions","text":"<p>When a section identifier does not match one of the supported sections, the section is parsed as an \"admonition\" (or \"callout\").</p> <p>Identifiers are case-insensitive, however singular and plural forms are distinct. For example, <code>Note:</code> is not the same as <code>Notes:</code>.</p> <p>In particular, <code>Examples</code> is parsed as the Examples section, while <code>Example</code> is parsed as an admonition whose kind is <code>example</code>.</p> <p>The kind is obtained by lower-casing the identifier and replacing spaces with dashes. For example, an admonition whose identifier is <code>See also:</code> will have a kind equal to <code>see-also</code>.</p> <p>Custom section titles are preserved in admonitions: <code>Tip: Check this out:</code> is parsed as a <code>tip</code> admonition with <code>Check this out:</code> as title.</p> <p>It is up to any downstream documentation renderer to make use of these kinds and titles.</p>"},{"location":"reference/docstrings/#google-options","title":"Parser options","text":"<p>The parser accepts a few options:</p> <ul> <li><code>ignore_init_summary</code>: Ignore the first line in <code>__init__</code> methods' docstrings. Useful when merging <code>__init__</code> docstring into class' docstrings with mkdocstrings-python's <code>merge_init_into_class</code> option. Default: false.</li> <li><code>returns_multiple_items</code>: Parse Returns sections and Yields sections as if they contain multiple items. It means that continuation lines must be indented. Default: true.</li> <li><code>returns_named_value</code>: Whether to parse <code>thing: Description</code> in Returns sections and Yields sections as a name and description, rather than a type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>. Default: true.</li> <li><code>receives_multiple_items</code>: Parse Receives sections as if they contain multiple items. It means that continuation lines must be indented. Default: true.</li> <li><code>receives_named_value</code>: Whether to parse <code>thing: Description</code> in Receives sections as a name and description, rather than a type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>. Default: true.</li> <li><code>returns_type_in_property_summary</code>: Whether to parse the return type of properties at the beginning of their summary: <code>str: Summary of the property</code>. Default: false.</li> <li><code>trim_doctest_flags</code>: Remove the doctest flags written as comments in <code>pycon</code> snippets within a docstring. These flags are used to alter the behavior of doctest when testing docstrings, and should not be visible in your docs. Default: true.</li> <li><code>warn_unknown_params</code>: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.</li> </ul>"},{"location":"reference/docstrings/#google-sections","title":"Sections","text":"<p>The following sections are supported.</p>"},{"location":"reference/docstrings/#google-section-attributes","title":"Attributes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nAttributes:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n\nfoo: int = 0\nbar: bool = True\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Attributes:\n        foofoo: Description for `foofoo`.\n        barbar: Description for `barbar`.\n    \"\"\"\n\n    foofoo: int = 0\n\n    def __init__(self):\n        self.barbar: bool = True\n</code></pre> <p>Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My module.\n\nAttributes:\n    foo (Integer): Description for `foo`.\n    bar (Boolean): Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting an attribute with <code>attr_name (attr_type): Attribute description</code>, <code>attr_type</code> will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"reference/docstrings/#google-section-functions","title":"Functions/Methods","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nFunctions:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n\n\ndef foo():\n    return \"foo\"\n\n\ndef bar(baz: int) -&gt; int:\n    return baz * 2\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Methods:\n        foofoo: Description for `foofoo`.\n        barbar: Description for `barbar`.\n    \"\"\"\n\n    def foofoo(self):\n        return \"foofoo\"\n\n    @staticmethod\n    def barbar():\n        return \"barbar\"\n</code></pre> <p>It's possible to write the function/method signature as well as its name:</p> <pre><code>\"\"\"\nFunctions:\n    foo(): Description for `foo`.\n    bar(baz=1): Description for `bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important parameters.</p>"},{"location":"reference/docstrings/#google-section-classes","title":"Classes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nClasses:\n    Foo: Description for `foo`.\n    Bar: Description for `bar`.\n\"\"\"\n\n\nclass Foo:\n    ...\n\n\nclass Bar:\n    def __init__(self, baz: int) -&gt; int:\n        return baz * 2\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Classes:\n        FooFoo: Description for `foofoo`.\n        BarBar: Description for `barbar`.\n    \"\"\"\n\n    class FooFoo:\n        ...\n\n    class BarBar:\n        ...\n</code></pre> <p>It's possible to write the class signature as well as its name:</p> <pre><code>\"\"\"\nFunctions:\n    Foo(): Description for `Foo`.\n    Bar(baz=1): Description for `Bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.</p>"},{"location":"reference/docstrings/#google-section-modules","title":"Modules","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Modules sections allow to document submodules of a module. They should be used in modules docstrings only.</p> <pre><code>\ud83d\udcc1 my_pkg/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  foo.py\n\u2514\u2500\u2500  bar.py\n</code></pre> my_pkg/__init__.py<pre><code>\"\"\"My package.\n\nModules:\n    foo: Description for `foo`.\n    bar: Description for `bar`.\n\"\"\"\n</code></pre>"},{"location":"reference/docstrings/#google-section-examples","title":"Examples","text":"<p>Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nExamples:\n    Some explanation of what is possible.\n\n    &gt;&gt;&gt; print(\"hello!\")\n    hello!\n\n    Blank lines delimit prose vs. console blocks.\n\n    &gt;&gt;&gt; a = 0\n    &gt;&gt;&gt; a += 1\n    &gt;&gt;&gt; a\n    1\n\"\"\"\n</code></pre> <p>Not the same as Example sections.</p> <p>Example (singular) sections are parsed as admonitions. Console code blocks will only be understood in Examples (plural) sections.</p>"},{"location":"reference/docstrings/#google-section-parameters","title":"Parameters","text":"<ul> <li>Aliases: Args, Arguments, Params</li> <li>Multiple items allowed</li> </ul> <p>Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.</p> <pre><code>def foo(a: int, b: str):\n    \"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n    \"\"\"\n</code></pre> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Foo:\n    \"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n    \"\"\"\n\n    foo: int\n    bar: str\n</code></pre> <p>Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My function.\n\nParameters:\n    foo (Integer): Description for `foo`.\n    bar (String): Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting a parameter with <code>param_name (param_type): Parameter description</code>, <code>param_type</code> will be resolved using the scope of the function (or class). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"reference/docstrings/#google-section-other-parameters","title":"Other Parameters","text":"<ul> <li>Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params</li> <li>Multiple items allowed</li> </ul> <p>Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are, but can also be useful in decorators / to document returned callables.</p> <pre><code>def foo(a, b, **kwargs):\n    \"\"\"Foo.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n\n    Other parameters:\n        c (int): Here's c.\n        d (bool): Here's d.\n    \"\"\"\n</code></pre> <pre><code>def foo(a, b):\n    \"\"\"Returns a callable.\n\n    Parameters:\n        a: Here's a.\n        b: Here's b.\n\n    Other parameters: Parameters of the returned callable:\n        c (int): Here's c.\n        d (bool): Here's d.\n    \"\"\"\n\n    def inner(c, d):\n        ...\n\n    return inner\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See the same tip for parameters.</p>"},{"location":"reference/docstrings/#google-section-raises","title":"Raises","text":"<ul> <li>Aliases: Exceptions</li> <li>Multiple items allowed</li> </ul> <p>Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.</p> <pre><code>def foo(a: int):\n    \"\"\"Foo.\n\n    Parameters:\n        a: A value.\n\n    Raises:\n        ValueError: When `a` is less than 0.\n    \"\"\"\n    if a &lt; 0:\n        raise ValueError(\"message\")\n</code></pre> <p>Exceptions names are resolved using the function's scope.</p> <p><code>ValueError</code> and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example <code>my_exceptions.MyCustomException</code> or <code>MyCustomException</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"reference/docstrings/#google-section-warns","title":"Warns","text":"<ul> <li>Aliases: Warnings</li> <li>Multiple items allowed</li> </ul> <p>Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.</p> <pre><code>import warnings\n\n\ndef foo():\n    \"\"\"Foo.\n\n    Warns:\n        UserWarning: To annoy users.\n    \"\"\"\n    warnings.warn(\"Just messing with you.\", UserWarning)\n</code></pre> <p>Warnings names are resolved using the function's scope.</p> <p><code>UserWarning</code> and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example <code>my_warnings.MyCustomWarning</code> or <code>MyCustomWarning</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"reference/docstrings/#google-section-yields","title":"Yields","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Iterator\n\n\ndef foo() -&gt; Iterator[int]:\n    \"\"\"Foo.\n\n    Yields:\n        Integers from 0 to 9.\n    \"\"\"\n    for i in range(10):\n        yield i\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code> or <code>typing.Iterator</code>. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>from datetime import datetime\n\n\ndef foo() -&gt; Iterator[tuple[float, float, datetime]]:\n    \"\"\"Foo.\n\n    Yields:\n        x: Absissa.\n        y: Ordinate.\n        t: Time.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>You have to indent each continuation line when documenting yielded values, even if there's only one value yielded:</p> <pre><code>\"\"\"Foo.\n\nYields:\n    partial_result: Some partial result.\n        A longer description of details and other information\n        for this partial result.\n\"\"\"\n</code></pre> <p>If you don't want to indent continuation lines for the only yielded value, use the <code>returns_multiple_items=False</code> parser option.</p> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nYields:\n    x (int): Absissa.\n    y (int): Ordinate.\n    t (int): Timestamp.\n\"\"\"\n</code></pre> <p>If you want to specify the type without a name, you still have to wrap the type in parentheses:</p> <pre><code>\"\"\"Foo.\n\nYields:\n    (int): Absissa.\n    (int): Ordinate.\n    (int): Timestamp.\n\"\"\"\n</code></pre> <p>If you don't want to wrap the type in parentheses, use the <code>returns_named_value=False</code> parser option. Setting it to false will disallow specifying a name.</p> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#google-section-receives","title":"Receives","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Receives sections allow to document values that can be sent to generators using their <code>send</code> method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Generator\n\n\ndef foo() -&gt; Generator[int, str, None]:\n    \"\"\"Foo.\n\n    Receives:\n        reverse: Reverse the generator if `\"reverse\"` is received.\n\n    Yields:\n        Integers from 0 to 9.\n\n    Examples:\n        &gt;&gt;&gt; gen = foo()\n        &gt;&gt;&gt; next(gen)\n        0\n        &gt;&gt;&gt; next(gen)\n        1\n        &gt;&gt;&gt; next(gen)\n        2\n        &gt;&gt;&gt; gen.send(\"reverse\")\n        2\n        &gt;&gt;&gt; next(gen)\n        1\n        &gt;&gt;&gt; next(gen)\n        0\n        &gt;&gt;&gt; next(gen)\n        Traceback (most recent call last):\n          File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n        StopIteration\n    \"\"\"\n    for i in range(10):\n        received = yield i\n        if received == \"reverse\":\n            for j in range(i, -1, -1):\n                yield j\n            break\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code>. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; Generator[int, tuple[str, bool], None]:\n    \"\"\"Foo.\n\n    Receives:\n        mode: Some mode.\n        flag: Some flag.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>You have to indent each continuation line when documenting received values, even if there's only one value received:</p> <pre><code>\"\"\"Foo.\n\nReceives:\n    data: Input data.\n        A longer description of what this data actually is,\n        and what it isn't.\n\"\"\"\n</code></pre> <p>If you don't want to indent continuation lines for the only received value, use the <code>receives_multiple_items=False</code> parser option.</p> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReceives:\n    mode (ModeEnum): Some mode.\n    flag (int): Some flag.\n\"\"\"\n</code></pre> <p>If you want to specify the type without a name, you still have to wrap the type in parentheses:</p> <pre><code>\"\"\"Foo.\n\nReceives:\n    (ModeEnum): Some mode.\n    (int): Some flag.\n\"\"\"\n</code></pre> <p>If you don't want to wrap the type in parentheses, use the <code>receives_named_value=False</code> parser option. Setting it to false will disallow specifying a name.</p> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#google-section-returns","title":"Returns","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>import random\n\n\ndef foo() -&gt; int:\n    \"\"\"Foo.\n\n    Returns:\n        A random integer.\n    \"\"\"\n    return random.randint(0, 100)\n</code></pre> <p>Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; tuple[bool, float]:\n    \"\"\"Foo.\n\n    Returns:\n        success: Whether it succeeded.\n        precision: Final precision.\n\n    ...\n    \"\"\"\n    ...\n</code></pre> <p>You have to indent each continuation line when documenting returned values, even if there's only one value returned:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    success: Whether it succeeded.\n        A longer description of what is considered success,\n        and what is considered failure.\n\"\"\"\n</code></pre> <p>If you don't want to indent continuation lines for the only returned value, use the <code>returns_multiple_items=False</code> parser option.</p> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    success (int): Whether it succeeded.\n    precision (Decimal): Final precision.\n\"\"\"\n</code></pre> <p>If you want to specify the type without a name, you still have to wrap the type in parentheses:</p> <pre><code>\"\"\"Foo.\n\nReturns:\n    (int): Whether it succeeded.\n    (Decimal): Final precision.\n\"\"\"\n</code></pre> <p>If you don't want to wrap the type in parentheses, use the <code>returns_named_value=False</code> parser option. Setting it to false will disallow specifying a name.</p> <p>Types in docstrings are resolved using the docstrings' function scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#numpydoc-style","title":"Numpydoc-style","text":"<p>Numpydoc docstrings, see Numpydoc's documentation</p>"},{"location":"reference/docstrings/#numpydoc-syntax","title":"Syntax","text":"<p>Sections are written like this:</p> <pre><code>section identifier\n------------------\nsection contents\n</code></pre> <p>All sections identifiers are case-insensitive. All sections support multiple lines in descriptions.</p> <p>Some sections support documenting items items. Item descriptions start on a new, indented line. When multiple items are supported, each item description can use multiple lines.</p> <pre><code>def foo(a, b):\n    \"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n        Continuation line 1.\n\n        Continuation line 2.\n    b\n        Here's b.\n    \"\"\"\n</code></pre> <p>For items that have an optional name and type, several syntaxes are supported:</p> <ul> <li> <p>specifying both the name and type:</p> <pre><code>\"\"\"\nname : type\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying just the name:</p> <pre><code>\"\"\"\nname\n    description\n\"\"\"\n</code></pre> <p>or</p> <pre><code>\"\"\"\nname :\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying just the type:</p> <pre><code>\"\"\"\n: type\n    description\n\"\"\"\n</code></pre> </li> <li> <p>specifying neither the name nor type:</p> <pre><code>\"\"\"\n:\n    description\n\"\"\"\n</code></pre> </li> </ul>"},{"location":"reference/docstrings/#numpydoc-admonitions","title":"Admonitions","text":"<p>When a section identifier does not match one of the supported sections, the section is parsed as an \"admonition\" (or \"callout\").</p> <p>Identifiers are case-insensitive, however singular and plural forms are distinct, except for notes and warnings. In particular, <code>Examples</code> is parsed as the Examples section, while <code>Example</code> is parsed as an admonition whose kind is <code>example</code>.</p> <p>The kind is obtained by lower-casing the identifier and replacing spaces with dashes. For example, an admonition whose identifier is <code>See also</code> will have a kind equal to <code>see-also</code>.</p> <p>It is up to any downstream documentation renderer to make use of these kinds.</p>"},{"location":"reference/docstrings/#numpydoc-options","title":"Parser options","text":"<p>The parser accepts a few options:</p> <ul> <li><code>ignore_init_summary</code>: Ignore the first line in <code>__init__</code> methods' docstrings. Useful when merging <code>__init__</code> docstring into class' docstrings with mkdocstrings-python's <code>merge_init_into_class</code> option. Default: false.</li> <li><code>trim_doctest_flags</code>: Remove the doctest flags written as comments in <code>pycon</code> snippets within a docstring. These flags are used to alter the behavior of doctest when testing docstrings, and should not be visible in your docs. Default: true.</li> <li><code>warn_unknown_params</code>: Warn about parameters documented in docstrings that do not appear in the signature. Default: true.</li> </ul>"},{"location":"reference/docstrings/#numpydoc-sections","title":"Sections","text":"<p>The following sections are supported.</p>"},{"location":"reference/docstrings/#numpydoc-section-attributes","title":"Attributes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Attributes sections allow to document attributes of a module, class, or class instance. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nAttributes\n----------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n\nfoo: int = 0\nbar: bool = True\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Attributes\n    ----------\n    foofoo\n        Description for `foofoo`.\n    barbar\n        Description for `barbar`.\n    \"\"\"\n\n    foofoo: int = 0\n\n    def __init__(self):\n        self.barbar: bool = True\n</code></pre> <p>Type annotations are fetched from the related attributes definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My module.\n\nAttributes\n----------\nfoo : Integer\n    Description for `foo`.\nbar : Boolean\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting an attribute with <code>attr_name : attr_type</code>, <code>attr_type</code> will be resolved using the scope of the docstrings' parent object (class or module). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"reference/docstrings/#numpydoc-section-functions","title":"Functions/Methods","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Functions or Methods sections allow to document functions of a module, or methods of a class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nFunctions\n---------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n\n\ndef foo():\n    return \"foo\"\n\n\ndef bar(baz: int) -&gt; int:\n    return baz * 2\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Methods\n    -------\n    foofoo\n        Description for `foofoo`.\n    barbar\n        Description for `barbar`.\n    \"\"\"\n\n    def foofoo(self):\n        return \"foofoo\"\n\n    @staticmethod\n    def barbar():\n        return \"barbar\"\n</code></pre> <p>It's possible to write the function/method signature as well as its name:</p> <pre><code>\"\"\"\nFunctions\n---------\nfoo()\n    Description for `foo`.\nbar(baz=1)\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important parameters.</p>"},{"location":"reference/docstrings/#numpydoc-section-classes","title":"Classes","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Classes sections allow to document classes of a module or class. They should be used in modules and classes docstrings only.</p> <pre><code>\"\"\"My module.\n\nClasses\n-------\nFoo\n    Description for `foo`.\nBar\n    Description for `bar`.\n\"\"\"\n\n\nclass Foo:\n    ...\n\n\nclass Bar:\n    def __init__(self, baz: int) -&gt; int:\n        return baz * 2\n\n\nclass MyClass:\n    \"\"\"My class.\n\n    Classes\n    -------\n    FooFoo\n        Description for `foofoo`.\n    BarBar\n        Description for `barbar`.\n    \"\"\"\n\n    class FooFoo:\n        ...\n\n    class BarBar:\n        ...\n</code></pre> <p>It's possible to write the class signature as well as its name:</p> <pre><code>\"\"\"\nFunctions\n---------\nFoo()\n    Description for `Foo`.\nBar(baz=1)\n    Description for `Bar`.\n\"\"\"\n</code></pre> <p>The signatures do not have to match the real ones: you can shorten them to only show the important initialization parameters.</p>"},{"location":"reference/docstrings/#numpydoc-section-modules","title":"Modules","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Modules sections allow to document submodules of a module. They should be used in modules docstrings only.</p> <pre><code>\ud83d\udcc1 my_pkg/\n\u251c\u2500\u2500  __init__.py\n\u251c\u2500\u2500  foo.py\n\u2514\u2500\u2500  bar.py\n</code></pre> my_pkg/__init__.py<pre><code>\"\"\"My package.\n\nModules\n-------\nfoo\n    Description for `foo`.\nbar\n    Description for `bar`.\n\"\"\"\n</code></pre>"},{"location":"reference/docstrings/#numpydoc-section-examples","title":"Examples","text":"<p>Examples sections allow to add examples of Python code without the use of markup code blocks. They are a mix of prose and interactive console snippets. They can be used in every docstring.</p> <pre><code>\"\"\"My module.\n\nExamples\n--------\nSome explanation of what is possible.\n\n&gt;&gt;&gt; print(\"hello!\")\nhello!\n\nBlank lines delimit prose vs. console blocks.\n\n&gt;&gt;&gt; a = 0\n&gt;&gt;&gt; a += 1\n&gt;&gt;&gt; a\n1\n\"\"\"\n</code></pre>"},{"location":"reference/docstrings/#numpydoc-section-parameters","title":"Parameters","text":"<ul> <li>Aliases: Args, Arguments, Params</li> <li>Multiple items allowed</li> </ul> <p>Parameters sections allow to document parameters of a function. They are typically used in functions docstrings, but can also be used in dataclasses docstrings.</p> <pre><code>def foo(a: int, b: str):\n    \"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n    \"\"\"\n</code></pre> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Foo:\n    \"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n    \"\"\"\n\n    foo: int\n    bar: str\n</code></pre> <p>Type annotations are fetched from the related parameters definitions. You can override those by adding types between parentheses before the colon:</p> <pre><code>\"\"\"My function.\n\nParameters\n----------\nfoo : Integer\n    Description for `foo`.\nbar : String\n    Description for `bar`.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>When documenting a parameter with <code>param_name : param_type</code>, <code>param_type</code> will be resolved using the scope of the function (or class). For example, a type of <code>list[str]</code> will be parsed just as if it was an actual Python annotation. You can therefore use complex types (available in the current scope) in docstrings, for example <code>Optional[Union[int, Tuple[float, float]]]</code>.</p>"},{"location":"reference/docstrings/#numpydoc-section-other-parameters","title":"Other Parameters","text":"<ul> <li>Aliases: Keyword Args, Keyword Arguments, Other Args, Other Arguments, Other Params</li> <li>Multiple items allowed</li> </ul> <p>Other parameters sections allow to document secondary parameters such as variadic keyword arguments, or parameters that should be of lesser interest to the user. They are used the same way Parameters sections are.</p> <pre><code>def foo(a, b, **kwargs):\n    \"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        Here's a.\n    b\n        Here's b.\n\n    Other parameters\n    ----------------\n    c : int\n        Here's c.\n    d : bool\n        Here's d.\n    \"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See the same tip for parameters.</p>"},{"location":"reference/docstrings/#numpydoc-section-raises","title":"Raises","text":"<ul> <li>Aliases: Exceptions</li> <li>Multiple items allowed</li> </ul> <p>Raises sections allow to document exceptions that are raised by a function. They are usually only used in functions docstrings.</p> <pre><code>def foo(a: int):\n    \"\"\"Foo.\n\n    Parameters\n    ----------\n    a\n        A value.\n\n    Raises\n    ------\n    ValueError\n        When `a` is less than 0.\n    \"\"\"\n    if a &lt; 0:\n        raise ValueError(\"message\")\n</code></pre> <p>Exceptions names are resolved using the function's scope.</p> <p><code>ValueError</code> and other built-in exceptions are resolved as such. You can document custom exception, using the names available in the current scope, for example <code>my_exceptions.MyCustomException</code> or <code>MyCustomException</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"reference/docstrings/#numpydoc-section-warns","title":"Warns","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Warns sections allow to document warnings emitted by the following code. They are usually only used in functions docstrings.</p> <pre><code>import warnings\n\n\ndef foo():\n    \"\"\"Foo.\n\n    Warns\n    -----\n    UserWarning\n        To annoy users.\n    \"\"\"\n    warnings.warn(\"Just messing with you.\", UserWarning)\n</code></pre> <p>Warnings names are resolved using the function's scope.</p> <p><code>UserWarning</code> and other built-in warnings are resolved as such. You can document custom warnings, using the names available in the current scope, for example <code>my_warnings.MyCustomWarning</code> or <code>MyCustomWarning</code> directly, depending on what you imported/defined in the current module.</p>"},{"location":"reference/docstrings/#numpydoc-section-yields","title":"Yields","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Yields sections allow to document values that generator yield. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Iterator\n\n\ndef foo() -&gt; Iterator[int]:\n    \"\"\"Foo.\n\n    Yields\n    ------\n    :\n        Integers from 0 to 9.\n    \"\"\"\n    for i in range(10):\n        yield i\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code> or <code>typing.Iterator</code>. If your generator yields tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>from datetime import datetime\n\n\ndef foo() -&gt; Iterator[tuple[float, float, datetime]]:\n    \"\"\"Foo.\n\n    Yields\n    ------\n    x\n        Absissa.\n    y\n        Ordinate.\n    t\n        Time.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nYields\n------\nx : int\n    Absissa.\ny : int\n    Ordinate.\nt : int\n    Timestamp.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#numpydoc-section-receives","title":"Receives","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Receives sections allow to document values that can be sent to generators using their <code>send</code> method. They should be used only in generators docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>from typing import Generator\n\n\ndef foo() -&gt; Generator[int, str, None]:\n    \"\"\"Foo.\n\n    Receives\n    --------\n    reverse\n        Reverse the generator if `\"reverse\"` is received.\n\n    Yields\n    ------\n    :\n        Integers from 0 to 9.\n\n    Examples\n    --------\n    &gt;&gt;&gt; gen = foo()\n    &gt;&gt;&gt; next(gen)\n    0\n    &gt;&gt;&gt; next(gen)\n    1\n    &gt;&gt;&gt; next(gen)\n    2\n    &gt;&gt;&gt; gen.send(\"reverse\")\n    2\n    &gt;&gt;&gt; next(gen)\n    1\n    &gt;&gt;&gt; next(gen)\n    0\n    &gt;&gt;&gt; next(gen)\n    Traceback (most recent call last):\n        File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n    StopIteration\n    \"\"\"\n    for i in range(10):\n        received = yield i\n        if received == \"reverse\":\n            for j in range(i, -1, -1):\n                yield j\n            break\n</code></pre> <p>Type annotations are fetched from the function return annotation when the annotation is <code>typing.Generator</code>. If your generator is able to receive tuples, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; Generator[int, tuple[str, bool], None]:\n    \"\"\"Foo.\n\n    Receives\n    --------\n    mode\n        Some mode.\n    flag\n        Some flag.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReceives\n--------\nmode : ModeEnum\n    Some mode.\nflag : int\n    Some flag.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' parent scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#numpydoc-section-returns","title":"Returns","text":"<ul> <li>Multiple items allowed</li> </ul> <p>Returns sections allow to document values returned by functions. They should be used only in functions docstrings. Documented items can be given a name when it makes sense.</p> <pre><code>import random\n\n\ndef foo() -&gt; int:\n    \"\"\"Foo.\n\n    Returns\n    -------\n    :\n        A random integer.\n    \"\"\"\n    return random.randint(0, 100)\n</code></pre> <p>Type annotations are fetched from the function return annotation. If your function returns tuples of values, you can document each item of the tuple separately, and the type annotation will be fetched accordingly:</p> <pre><code>def foo() -&gt; tuple[bool, float]:\n    \"\"\"Foo.\n\n    Returns\n    -------\n    success\n        Whether it succeeded.\n    precision\n        Final precision.\n    \"\"\"\n    ...\n</code></pre> <p>Type annotations can as usual be overridden using types in parentheses in the docstring itself:</p> <pre><code>\"\"\"Foo.\n\nReturns\n-------\nsuccess : int\n    Whether it succeeded.\nprecision : Decimal\n    Final precision.\n\"\"\"\n</code></pre> <p>Types in docstrings are resolved using the docstrings' function scope.</p> <p>See previous tips for types in docstrings.</p>"},{"location":"reference/docstrings/#auto-style","title":"Auto-style","text":"<p> Sponsors only \u2014  Insiders 1.3.0.</p> <p>Automatic style detection. This parser will first try to detect the style used in the docstring, and call the corresponding parser on it.</p>"},{"location":"reference/docstrings/#auto-options","title":"Parser options","text":"<p>The parser accepts a few options:</p> <ul> <li><code>method</code>: The method to use to detect the style and infer the parser. Method 'heuristics' will use regular expressions, while method 'max_sections' will parse the docstring with all parsers specified in <code>style_order</code> and return the one who parsed the most sections. Default: <code>\"heuristics\"</code>.</li> <li><code>style_order</code>: If multiple parsers parsed the same number of sections, <code>style_order</code> is used to decide which one to return. Default: <code>[\"sphinx\", \"google\", \"numpy\"]</code>.</li> <li><code>default</code>: If heuristics fail, the <code>default</code> parser is returned. The <code>default</code> parser is never used with the 'max_sections' method. Default: <code>None</code>.</li> <li>Any other option is passed down to the detected parser, if any.</li> </ul> <p>For non-Insiders versions, <code>default</code> is returned if specified, else the first parser in <code>style_order</code> is returned. If <code>style_order</code> is not specified, <code>None</code> is returned.</p>"},{"location":"reference/docstrings/#parsers-features","title":"Parsers features","text":"<p>Want to contribute?</p> <p>Each red cross is a link to an issue on the bugtracker. You will find some guidance on how to add support for the corresponding item.</p> <p>The sections are easier to deal in that order:</p> <ul> <li>Raises, Warns (multiple items, no names, single type each)</li> <li>Attributes, Other Parameters, Parameters (multiple items, one name and one optional type each)</li> <li>Returns (multiple items, optional name and/or type each, annotation to split when multiple names)</li> <li>Receives, Yields (multiple items, optional name and/or type each, several types of annotations to split when multiple names)</li> </ul> <p>\"Examples\" section are a bit different as they require to parse the examples. But you can probably reuse the code in the Google parser. We can probably even factorize the examples parsing into a single function.</p> <p>You can tackle several items at once in a single PR, as long as they relate to a single parser or a single section (a line or a column of the following tables).</p>"},{"location":"reference/docstrings/#sections","title":"Sections","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u2705 Functions \u2705 \u2705 \u274c Methods \u2705 \u2705 \u274c Classes \u2705 \u2705 \u274c Modules \u2705 \u2705 \u274c Examples \u2705 \u2705 \u274c Parameters \u2705 \u2705 \u2705 Other Parameters \u2705 \u2705 \u274c Raises \u2705 \u2705 \u2705 Warns \u2705 \u2705 \u274c Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u2705"},{"location":"reference/docstrings/#getting-annotationsdefaults-from-parent","title":"Getting annotations/defaults from parent","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u274c Functions / / / Methods / / / Classes / / / Modules / / / Examples / / / Parameters \u2705 \u2705 \u2705 Other Parameters \u2705 \u2705 \u274c Raises / / / Warns / / / Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u2705"},{"location":"reference/docstrings/#cross-references-for-annotations-in-docstrings","title":"Cross-references for annotations in docstrings","text":"Section Google Numpy Sphinx Attributes \u2705 \u2705 \u274c Functions \u274c \u274c / Methods \u274c \u274c / Classes \u274c \u274c / Modules / / / Examples / / / Parameters \u2705 \u2705 \u274c Other Parameters \u2705 \u2705 \u274c Raises \u2705 \u2705 \u274c Warns \u2705 \u2705 \u274c Yields \u2705 \u2705 \u274c Receives \u2705 \u2705 \u274c Returns \u2705 \u2705 \u274c"},{"location":"reference/api/agents/","title":"Agents","text":"<p>Griffe is able to analyze code both statically and dynamically.</p>"},{"location":"reference/api/agents/#main-api","title":"Main API","text":""},{"location":"reference/api/agents/#griffe.visit","title":"visit","text":"<pre><code>visit(\n    module_name: str,\n    filepath: Path,\n    code: str,\n    *,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n) -&gt; Module\n</code></pre> <p>Parse and visit a module file.</p> <p>We provide this function for static analysis. It uses a <code>NodeVisitor</code>-like class, the <code>Visitor</code>, to compile and parse code (using <code>compile</code>) then visit the resulting AST (Abstract Syntax Tree).</p> Important <p>This function is generally not used directly. In most cases, users can rely on the <code>GriffeLoader</code> and its accompanying <code>load</code> shortcut and their respective options to load modules using static analysis.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>The module, with its members populated.</p> </li> </ul> Referenced by: <ul> <li> Reference <ul> <li> <code></code>\u00a0griffe Agents </li> <li> Python API Loaders <code></code>\u00a0load </li> </ul> </li> </ul>"},{"location":"reference/api/agents/#griffe.visit(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>)           \u2013            <p>The module name (as when importing [from] it).</p>"},{"location":"reference/api/agents/#griffe.visit(filepath)","title":"<code>filepath</code>","text":"(<code>Path</code>)           \u2013            <p>The module file path.</p>"},{"location":"reference/api/agents/#griffe.visit(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The module contents.</p>"},{"location":"reference/api/agents/#griffe.visit(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use when visiting the AST.</p>"},{"location":"reference/api/agents/#griffe.visit(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional parent of this module.</p>"},{"location":"reference/api/agents/#griffe.visit(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/agents/#griffe.visit(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.visit(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.visit(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/agents/#griffe.inspect","title":"inspect","text":"<pre><code>inspect(\n    module_name: str,\n    *,\n    filepath: Path | None = None,\n    import_paths: Sequence[str | Path] | None = None,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n) -&gt; Module\n</code></pre> <p>Inspect a module.</p> <p>Sometimes we cannot get the source code of a module or an object, typically built-in modules like <code>itertools</code>. The only way to know what they are made of is to actually import them and inspect their contents.</p> <p>Sometimes, even if the source code is available, loading the object is desired because it was created or modified dynamically, and our static agent is not powerful enough to infer all these dynamic modifications. In this case, we load the module using introspection.</p> <p>Griffe therefore provides this function for dynamic analysis. It uses a <code>NodeVisitor</code>-like class, the <code>Inspector</code>, to inspect the module with <code>inspect.getmembers()</code>.</p> <p>The inspection agent works similarly to the regular <code>Visitor</code> agent, in that it maintains a state with the current object being handled, and recursively handle its members.</p> Important <p>This function is generally not used directly. In most cases, users can rely on the <code>GriffeLoader</code> and its accompanying <code>load</code> shortcut and their respective options to load modules using dynamic analysis.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>The module, with its members populated.</p> </li> </ul> Referenced by: <ul> <li> Reference <ul> <li> <code></code>\u00a0griffe Agents </li> <li> Python API Loaders <code></code>\u00a0load </li> </ul> </li> </ul>"},{"location":"reference/api/agents/#griffe.inspect(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>)           \u2013            <p>The module name (as when importing [from] it).</p>"},{"location":"reference/api/agents/#griffe.inspect(filepath)","title":"<code>filepath</code>","text":"(<code>Path | None</code>, default:                   <code>None</code> )           \u2013            <p>The module file path.</p>"},{"location":"reference/api/agents/#griffe.inspect(import_paths)","title":"<code>import_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>Paths to import the module from.</p>"},{"location":"reference/api/agents/#griffe.inspect(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use when inspecting the module.</p>"},{"location":"reference/api/agents/#griffe.inspect(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional parent of this module.</p>"},{"location":"reference/api/agents/#griffe.inspect(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/agents/#griffe.inspect(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.inspect(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.inspect(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/agents/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/agents/#griffe.Visitor","title":"Visitor","text":"<pre><code>Visitor(\n    module_name: str,\n    filepath: Path,\n    code: str,\n    extensions: Extensions,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n)\n</code></pre> <p>This class is used to instantiate a visitor.</p> <p>Visitors iterate on AST nodes to extract data from them.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions <ul> <li> How it works </li> <li> Static/dynamic support </li> </ul> </li> <li> Reference Python API Agents <ul> <li> <code></code>\u00a0inspect </li> <li> <code></code>\u00a0visit </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>decorators_to_labels</code>             \u2013              <p>Build and return a set of labels based on decorators.</p> </li> <li> <code>generic_visit</code>             \u2013              <p>Extend the base generic visit with extensions.</p> </li> <li> <code>get_base_property</code>             \u2013              <p>Check decorators to return the base property in case of setters and deleters.</p> </li> <li> <code>get_module</code>             \u2013              <p>Build and return the object representing the module attached to this visitor.</p> </li> <li> <code>handle_attribute</code>             \u2013              <p>Handle an attribute (assignment) node.</p> </li> <li> <code>handle_function</code>             \u2013              <p>Handle a function definition node.</p> </li> <li> <code>visit</code>             \u2013              <p>Extend the base visit with extensions.</p> </li> <li> <code>visit_annassign</code>             \u2013              <p>Visit an annotated assignment node.</p> </li> <li> <code>visit_assign</code>             \u2013              <p>Visit an assignment node.</p> </li> <li> <code>visit_asyncfunctiondef</code>             \u2013              <p>Visit an async function definition node.</p> </li> <li> <code>visit_augassign</code>             \u2013              <p>Visit an augmented assignment node.</p> </li> <li> <code>visit_classdef</code>             \u2013              <p>Visit a class definition node.</p> </li> <li> <code>visit_functiondef</code>             \u2013              <p>Visit a function definition node.</p> </li> <li> <code>visit_if</code>             \u2013              <p>Visit an \"if\" node.</p> </li> <li> <code>visit_import</code>             \u2013              <p>Visit an import node.</p> </li> <li> <code>visit_importfrom</code>             \u2013              <p>Visit an \"import from\" node.</p> </li> <li> <code>visit_module</code>             \u2013              <p>Visit a module node.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The module source code.</p> </li> <li> <code>current</code>               (<code>Module | Class</code>)           \u2013            <p>The current object being visited.</p> </li> <li> <code>docstring_options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The docstring parsing options.</p> </li> <li> <code>docstring_parser</code>               (<code>DocstringStyle | Parser | None</code>)           \u2013            <p>The docstring parser to use.</p> </li> <li> <code>extensions</code>               (<code>Extensions</code>)           \u2013            <p>The extensions to use when visiting the AST.</p> </li> <li> <code>filepath</code>               (<code>Path</code>)           \u2013            <p>The module filepath.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>A collection of source code lines.</p> </li> <li> <code>module_name</code>               (<code>str</code>)           \u2013            <p>The module name.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>A collection of modules.</p> </li> <li> <code>parent</code>               (<code>Module | None</code>)           \u2013            <p>An optional parent for the final module object.</p> </li> <li> <code>type_guarded</code>               (<code>bool</code>)           \u2013            <p>Whether the current code branch is type-guarded.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Visitor(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>)           \u2013            <p>The module name.</p>"},{"location":"reference/api/agents/#griffe.Visitor(filepath)","title":"<code>filepath</code>","text":"(<code>Path</code>)           \u2013            <p>The module filepath.</p>"},{"location":"reference/api/agents/#griffe.Visitor(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The module source code.</p>"},{"location":"reference/api/agents/#griffe.Visitor(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions</code>)           \u2013            <p>The extensions to use when visiting.</p>"},{"location":"reference/api/agents/#griffe.Visitor(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional parent for the final module object.</p>"},{"location":"reference/api/agents/#griffe.Visitor(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use.</p>"},{"location":"reference/api/agents/#griffe.Visitor(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.Visitor(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.Visitor(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/agents/#griffe.Visitor.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str = code\n</code></pre> <p>The module source code.</p>"},{"location":"reference/api/agents/#griffe.Visitor.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current: Module | Class = None\n</code></pre> <p>The current object being visited.</p>"},{"location":"reference/api/agents/#griffe.Visitor.docstring_options","title":"docstring_options  <code>instance-attribute</code>","text":"<pre><code>docstring_options: dict[str, Any] = docstring_options or {}\n</code></pre> <p>The docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.Visitor.docstring_parser","title":"docstring_parser  <code>instance-attribute</code>","text":"<pre><code>docstring_parser: DocstringStyle | Parser | None = (\n    docstring_parser\n)\n</code></pre> <p>The docstring parser to use.</p>"},{"location":"reference/api/agents/#griffe.Visitor.extensions","title":"extensions  <code>instance-attribute</code>","text":"<pre><code>extensions: Extensions = extensions\n</code></pre> <p>The extensions to use when visiting the AST.</p>"},{"location":"reference/api/agents/#griffe.Visitor.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath: Path = filepath\n</code></pre> <p>The module filepath.</p>"},{"location":"reference/api/agents/#griffe.Visitor.lines_collection","title":"lines_collection  <code>instance-attribute</code>","text":"<pre><code>lines_collection: LinesCollection = (\n    lines_collection or LinesCollection()\n)\n</code></pre> <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.Visitor.module_name","title":"module_name  <code>instance-attribute</code>","text":"<pre><code>module_name: str = module_name\n</code></pre> <p>The module name.</p>"},{"location":"reference/api/agents/#griffe.Visitor.modules_collection","title":"modules_collection  <code>instance-attribute</code>","text":"<pre><code>modules_collection: ModulesCollection = (\n    modules_collection or ModulesCollection()\n)\n</code></pre> <p>A collection of modules.</p>"},{"location":"reference/api/agents/#griffe.Visitor.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | None = parent\n</code></pre> <p>An optional parent for the final module object.</p>"},{"location":"reference/api/agents/#griffe.Visitor.type_guarded","title":"type_guarded  <code>instance-attribute</code>","text":"<pre><code>type_guarded: bool = False\n</code></pre> <p>Whether the current code branch is type-guarded.</p>"},{"location":"reference/api/agents/#griffe.Visitor.decorators_to_labels","title":"decorators_to_labels","text":"<pre><code>decorators_to_labels(\n    decorators: list[Decorator],\n) -&gt; set[str]\n</code></pre> <p>Build and return a set of labels based on decorators.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>A set of labels.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Visitor.decorators_to_labels(decorators)","title":"<code>decorators</code>","text":"(<code>list[Decorator]</code>)           \u2013            <p>The decorators to check.</p>"},{"location":"reference/api/agents/#griffe.Visitor.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Extend the base generic visit with extensions.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.generic_visit(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.get_base_property","title":"get_base_property","text":"<pre><code>get_base_property(\n    decorators: list[Decorator], function: Function\n) -&gt; str | None\n</code></pre> <p>Check decorators to return the base property in case of setters and deleters.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>base_property</code> (              <code>str | None</code> )          \u2013            <p>The property for which the setter/deleted is set.</p> </li> <li> <code>property_function</code> (              <code>str | None</code> )          \u2013            <p>Either <code>\"setter\"</code> or <code>\"deleter\"</code>.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Visitor.get_base_property(decorators)","title":"<code>decorators</code>","text":"(<code>list[Decorator]</code>)           \u2013            <p>The decorators to check.</p>"},{"location":"reference/api/agents/#griffe.Visitor.get_module","title":"get_module","text":"<pre><code>get_module() -&gt; Module\n</code></pre> <p>Build and return the object representing the module attached to this visitor.</p> <p>This method triggers a complete visit of the module nodes.</p> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>A module instance.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Visitor.handle_attribute","title":"handle_attribute","text":"<pre><code>handle_attribute(\n    node: Assign | AnnAssign,\n    annotation: str | Expr | None = None,\n) -&gt; None\n</code></pre> <p>Handle an attribute (assignment) node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.handle_attribute(node)","title":"<code>node</code>","text":"(<code>Assign | AnnAssign</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.handle_attribute(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>A potential annotation.</p>"},{"location":"reference/api/agents/#griffe.Visitor.handle_function","title":"handle_function","text":"<pre><code>handle_function(\n    node: AsyncFunctionDef | FunctionDef,\n    labels: set | None = None,\n) -&gt; None\n</code></pre> <p>Handle a function definition node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.handle_function(node)","title":"<code>node</code>","text":"(<code>AsyncFunctionDef | FunctionDef</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.handle_function(labels)","title":"<code>labels</code>","text":"(<code>set | None</code>, default:                   <code>None</code> )           \u2013            <p>Labels to add to the data object.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Extend the base visit with extensions.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_annassign","title":"visit_annassign","text":"<pre><code>visit_annassign(node: AnnAssign) -&gt; None\n</code></pre> <p>Visit an annotated assignment node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_annassign(node)","title":"<code>node</code>","text":"(<code>AnnAssign</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_assign","title":"visit_assign","text":"<pre><code>visit_assign(node: Assign) -&gt; None\n</code></pre> <p>Visit an assignment node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_assign(node)","title":"<code>node</code>","text":"(<code>Assign</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_asyncfunctiondef","title":"visit_asyncfunctiondef","text":"<pre><code>visit_asyncfunctiondef(node: AsyncFunctionDef) -&gt; None\n</code></pre> <p>Visit an async function definition node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_asyncfunctiondef(node)","title":"<code>node</code>","text":"(<code>AsyncFunctionDef</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_augassign","title":"visit_augassign","text":"<pre><code>visit_augassign(node: AugAssign) -&gt; None\n</code></pre> <p>Visit an augmented assignment node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_augassign(node)","title":"<code>node</code>","text":"(<code>AugAssign</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_classdef","title":"visit_classdef","text":"<pre><code>visit_classdef(node: ClassDef) -&gt; None\n</code></pre> <p>Visit a class definition node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_classdef(node)","title":"<code>node</code>","text":"(<code>ClassDef</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_functiondef","title":"visit_functiondef","text":"<pre><code>visit_functiondef(node: FunctionDef) -&gt; None\n</code></pre> <p>Visit a function definition node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_functiondef(node)","title":"<code>node</code>","text":"(<code>FunctionDef</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_if","title":"visit_if","text":"<pre><code>visit_if(node: If) -&gt; None\n</code></pre> <p>Visit an \"if\" node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_if(node)","title":"<code>node</code>","text":"(<code>If</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_import","title":"visit_import","text":"<pre><code>visit_import(node: Import) -&gt; None\n</code></pre> <p>Visit an import node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_import(node)","title":"<code>node</code>","text":"(<code>Import</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_importfrom","title":"visit_importfrom","text":"<pre><code>visit_importfrom(node: ImportFrom) -&gt; None\n</code></pre> <p>Visit an \"import from\" node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_importfrom(node)","title":"<code>node</code>","text":"(<code>ImportFrom</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_module","title":"visit_module","text":"<pre><code>visit_module(node: Module) -&gt; None\n</code></pre> <p>Visit a module node.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Visitor.visit_module(node)","title":"<code>node</code>","text":"(<code>Module</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/agents/#griffe.Inspector","title":"Inspector","text":"<pre><code>Inspector(\n    module_name: str,\n    filepath: Path | None,\n    extensions: Extensions,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n)\n</code></pre> <p>This class is used to instantiate an inspector.</p> <p>Inspectors iterate on objects members to extract data from them.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide <ul> <li> Contributor guide Project architecture Program structure Internal API importer.py </li> <li> User guide Manipulating APIs Extending APIs Writing extensions <ul> <li> How it works </li> <li> Static/dynamic support </li> </ul> </li> </ul> </li> <li> Reference Python API Agents <code></code>\u00a0inspect </li> </ul> <p>Methods:</p> <ul> <li> <code>generic_inspect</code>             \u2013              <p>Extend the base generic inspection with extensions.</p> </li> <li> <code>get_module</code>             \u2013              <p>Build and return the object representing the module attached to this inspector.</p> </li> <li> <code>handle_attribute</code>             \u2013              <p>Handle an attribute.</p> </li> <li> <code>handle_function</code>             \u2013              <p>Handle a function.</p> </li> <li> <code>inspect</code>             \u2013              <p>Extend the base inspection with extensions.</p> </li> <li> <code>inspect_attribute</code>             \u2013              <p>Inspect an attribute.</p> </li> <li> <code>inspect_builtin_function</code>             \u2013              <p>Inspect a builtin function.</p> </li> <li> <code>inspect_builtin_method</code>             \u2013              <p>Inspect a builtin method.</p> </li> <li> <code>inspect_cached_property</code>             \u2013              <p>Inspect a cached property.</p> </li> <li> <code>inspect_class</code>             \u2013              <p>Inspect a class.</p> </li> <li> <code>inspect_classmethod</code>             \u2013              <p>Inspect a class method.</p> </li> <li> <code>inspect_coroutine</code>             \u2013              <p>Inspect a coroutine.</p> </li> <li> <code>inspect_function</code>             \u2013              <p>Inspect a function.</p> </li> <li> <code>inspect_getset_descriptor</code>             \u2013              <p>Inspect a get/set descriptor.</p> </li> <li> <code>inspect_method</code>             \u2013              <p>Inspect a method.</p> </li> <li> <code>inspect_method_descriptor</code>             \u2013              <p>Inspect a method descriptor.</p> </li> <li> <code>inspect_module</code>             \u2013              <p>Inspect a module.</p> </li> <li> <code>inspect_property</code>             \u2013              <p>Inspect a property.</p> </li> <li> <code>inspect_staticmethod</code>             \u2013              <p>Inspect a static method.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>current</code>               (<code>Module | Class</code>)           \u2013            <p>The current object being inspected.</p> </li> <li> <code>docstring_options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The docstring parsing options.</p> </li> <li> <code>docstring_parser</code>               (<code>DocstringStyle | Parser | None</code>)           \u2013            <p>The docstring parser to use.</p> </li> <li> <code>extensions</code>               (<code>Extensions</code>)           \u2013            <p>The extensions to use when inspecting.</p> </li> <li> <code>filepath</code>               (<code>Path | None</code>)           \u2013            <p>The module file path.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>A collection of source code lines.</p> </li> <li> <code>module_name</code>               (<code>str</code>)           \u2013            <p>The module name.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>A collection of modules.</p> </li> <li> <code>parent</code>               (<code>Module | None</code>)           \u2013            <p>An optional parent for the final module object.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Inspector(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>)           \u2013            <p>The module name.</p>"},{"location":"reference/api/agents/#griffe.Inspector(filepath)","title":"<code>filepath</code>","text":"(<code>Path | None</code>)           \u2013            <p>The optional filepath.</p>"},{"location":"reference/api/agents/#griffe.Inspector(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions</code>)           \u2013            <p>Extensions to use when inspecting.</p>"},{"location":"reference/api/agents/#griffe.Inspector(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>The module parent.</p>"},{"location":"reference/api/agents/#griffe.Inspector(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use.</p>"},{"location":"reference/api/agents/#griffe.Inspector(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.Inspector(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.Inspector(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/agents/#griffe.Inspector.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current: Module | Class = None\n</code></pre> <p>The current object being inspected.</p>"},{"location":"reference/api/agents/#griffe.Inspector.docstring_options","title":"docstring_options  <code>instance-attribute</code>","text":"<pre><code>docstring_options: dict[str, Any] = docstring_options or {}\n</code></pre> <p>The docstring parsing options.</p>"},{"location":"reference/api/agents/#griffe.Inspector.docstring_parser","title":"docstring_parser  <code>instance-attribute</code>","text":"<pre><code>docstring_parser: DocstringStyle | Parser | None = (\n    docstring_parser\n)\n</code></pre> <p>The docstring parser to use.</p>"},{"location":"reference/api/agents/#griffe.Inspector.extensions","title":"extensions  <code>instance-attribute</code>","text":"<pre><code>extensions: Extensions = extensions\n</code></pre> <p>The extensions to use when inspecting.</p>"},{"location":"reference/api/agents/#griffe.Inspector.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath: Path | None = filepath\n</code></pre> <p>The module file path.</p>"},{"location":"reference/api/agents/#griffe.Inspector.lines_collection","title":"lines_collection  <code>instance-attribute</code>","text":"<pre><code>lines_collection: LinesCollection = (\n    lines_collection or LinesCollection()\n)\n</code></pre> <p>A collection of source code lines.</p>"},{"location":"reference/api/agents/#griffe.Inspector.module_name","title":"module_name  <code>instance-attribute</code>","text":"<pre><code>module_name: str = module_name\n</code></pre> <p>The module name.</p>"},{"location":"reference/api/agents/#griffe.Inspector.modules_collection","title":"modules_collection  <code>instance-attribute</code>","text":"<pre><code>modules_collection: ModulesCollection = (\n    modules_collection or ModulesCollection()\n)\n</code></pre> <p>A collection of modules.</p>"},{"location":"reference/api/agents/#griffe.Inspector.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | None = parent\n</code></pre> <p>An optional parent for the final module object.</p>"},{"location":"reference/api/agents/#griffe.Inspector.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.generic_inspect(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.get_module","title":"get_module","text":"<pre><code>get_module(\n    import_paths: Sequence[str | Path] | None = None,\n) -&gt; Module\n</code></pre> <p>Build and return the object representing the module attached to this inspector.</p> <p>This method triggers a complete inspection of the module members.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>A module instance.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.Inspector.get_module(import_paths)","title":"<code>import_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>Paths replacing <code>sys.path</code> to import the module.</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_attribute","title":"handle_attribute","text":"<pre><code>handle_attribute(\n    node: ObjectNode, annotation: str | Expr | None = None\n) -&gt; None\n</code></pre> <p>Handle an attribute.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_attribute(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_attribute(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>A potential annotation.</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_function","title":"handle_function","text":"<pre><code>handle_function(\n    node: ObjectNode, labels: set | None = None\n) -&gt; None\n</code></pre> <p>Handle a function.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_function(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.handle_function(labels)","title":"<code>labels</code>","text":"(<code>set | None</code>, default:                   <code>None</code> )           \u2013            <p>Labels to add to the data object.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base inspection with extensions.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_attribute","title":"inspect_attribute","text":"<pre><code>inspect_attribute(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect an attribute.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_attribute(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_builtin_function","title":"inspect_builtin_function","text":"<pre><code>inspect_builtin_function(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a builtin function.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_builtin_function(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_builtin_method","title":"inspect_builtin_method","text":"<pre><code>inspect_builtin_method(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a builtin method.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_builtin_method(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_cached_property","title":"inspect_cached_property","text":"<pre><code>inspect_cached_property(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a cached property.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_cached_property(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_class","title":"inspect_class","text":"<pre><code>inspect_class(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a class.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_class(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_classmethod","title":"inspect_classmethod","text":"<pre><code>inspect_classmethod(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a class method.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_classmethod(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_coroutine","title":"inspect_coroutine","text":"<pre><code>inspect_coroutine(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a coroutine.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_coroutine(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_function","title":"inspect_function","text":"<pre><code>inspect_function(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a function.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_function(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_getset_descriptor","title":"inspect_getset_descriptor","text":"<pre><code>inspect_getset_descriptor(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a get/set descriptor.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_getset_descriptor(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_method","title":"inspect_method","text":"<pre><code>inspect_method(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a method.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_method(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_method_descriptor","title":"inspect_method_descriptor","text":"<pre><code>inspect_method_descriptor(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a method descriptor.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_method_descriptor(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_module","title":"inspect_module","text":"<pre><code>inspect_module(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a module.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_module(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_property","title":"inspect_property","text":"<pre><code>inspect_property(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a property.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_property(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_staticmethod","title":"inspect_staticmethod","text":"<pre><code>inspect_staticmethod(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a static method.</p> <p>Parameters:</p>"},{"location":"reference/api/agents/#griffe.Inspector.inspect_staticmethod(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/agents/#dynamic-analysis-helpers","title":"Dynamic analysis helpers","text":""},{"location":"reference/api/agents/#griffe.sys_path","title":"sys_path","text":"<pre><code>sys_path(*paths: str | Path) -&gt; Iterator[None]\n</code></pre> <p>Redefine <code>sys.path</code> temporarily.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>None</code>           \u2013            <p>Nothing.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.sys_path(*paths)","title":"<code>*paths</code>","text":"(<code>str | Path</code>, default:                   <code>()</code> )           \u2013            <p>The paths to use when importing modules. If no paths are given, keep <code>sys.path</code> untouched.</p>"},{"location":"reference/api/agents/#griffe.dynamic_import","title":"dynamic_import","text":"<pre><code>dynamic_import(\n    import_path: str,\n    import_paths: Sequence[str | Path] | None = None,\n) -&gt; Any\n</code></pre> <p>Dynamically import the specified object.</p> <p>It can be a module, class, method, function, attribute, nested arbitrarily.</p> <p>It works like this:</p> <ul> <li>for a given object path <code>a.b.x.y</code></li> <li>it tries to import <code>a.b.x.y</code> as a module (with <code>importlib.import_module</code>)</li> <li>if it fails, it tries again with <code>a.b.x</code>, storing <code>y</code></li> <li>then <code>a.b</code>, storing <code>x.y</code></li> <li>then <code>a</code>, storing <code>b.x.y</code></li> <li>if nothing worked, it raises an error</li> <li>if one of the iteration worked, it moves on, and...</li> <li>it tries to get the remaining (stored) parts with <code>getattr</code></li> <li>for example it gets <code>b</code> from <code>a</code>, then <code>x</code> from <code>b</code>, etc.</li> <li>if a single attribute access fails, it raises an error</li> <li>if everything worked, it returns the last obtained attribute</li> </ul> <p>Since the function potentially tries multiple things before succeeding, all errors happening along the way are recorded, and re-emitted with an <code>ImportError</code> when it fails, to let users know what was tried.</p> <p>Important</p> <p>The paths given through the <code>import_paths</code> parameter are used to temporarily patch <code>sys.path</code>: this function is therefore not thread-safe.</p> <p>Important</p> <p>The paths given as <code>import_paths</code> must be correct. The contents of <code>sys.path</code> must be consistent to what a user of the imported code would expect. Given a set of paths, if the import fails for a user, it will fail here too, with potentially unintuitive errors. If we wanted to make this function more robust, we could add a loop to \"roll the window\" of given paths, shifting them to the left (for example: <code>(\"/a/a\", \"/a/b\", \"/a/c/\")</code>, then <code>(\"/a/b\", \"/a/c\", \"/a/a/\")</code>, then <code>(\"/a/c\", \"/a/a\", \"/a/b/\")</code>), to make sure each entry is given highest priority at least once, maintaining relative order, but we deem this unnecessary for now.</p> <p>Parameters:</p> <ul> <li> </li> <li> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When the object's module could not be found.</p> </li> <li> <code>ImportError</code>             \u2013            <p>When there was an import error or when couldn't get the attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>The imported object.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.dynamic_import(import_path)","title":"<code>import_path</code>","text":"(<code>str</code>)           \u2013            <p>The path of the object to import.</p>"},{"location":"reference/api/agents/#griffe.dynamic_import(import_paths)","title":"<code>import_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The (sys) paths to import the object from.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode","title":"ObjectNode","text":"<pre><code>ObjectNode(\n    obj: Any, name: str, parent: ObjectNode | None = None\n)\n</code></pre> <p>Helper class to represent an object tree.</p> <p>It's not really a tree but more a backward-linked list: each node has a reference to its parent, but not to its child (for simplicity purposes and to avoid bugs).</p> <p>Each node stores an object, its name, and a reference to its parent node.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions <ul> <li> Static/dynamic support </li> <li> Visiting trees </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Agents <code></code>\u00a0ObjectNode <code></code>\u00a0module </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> Agents <code></code>\u00a0Inspector <ul> <li> <code></code>\u00a0generic_inspect </li> <li> <code></code>\u00a0handle_attribute </li> <li> <code></code>\u00a0handle_function </li> <li> <code></code>\u00a0inspect </li> <li> <code></code>\u00a0inspect_attribute </li> <li> <code></code>\u00a0inspect_builtin_function </li> <li> <code></code>\u00a0inspect_builtin_method </li> <li> <code></code>\u00a0inspect_cached_property </li> <li> <code></code>\u00a0inspect_class </li> <li> <code></code>\u00a0inspect_classmethod </li> <li> <code></code>\u00a0inspect_coroutine </li> <li> <code></code>\u00a0inspect_function </li> <li> <code></code>\u00a0inspect_getset_descriptor </li> <li> <code></code>\u00a0inspect_method </li> <li> <code></code>\u00a0inspect_method_descriptor </li> <li> <code></code>\u00a0inspect_module </li> <li> <code></code>\u00a0inspect_property </li> <li> <code></code>\u00a0inspect_staticmethod </li> </ul> </li> <li> Extensions <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0generic_inspect </li> <li> <code></code>\u00a0inspect </li> </ul> </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>alias_target_path</code>               (<code>str | None</code>)           \u2013            <p>Alias target path of this node, if the node should be an alias.</p> </li> <li> <code>children</code>               (<code>Sequence[ObjectNode]</code>)           \u2013            <p>The children of this node.</p> </li> <li> <code>exclude_specials</code>               (<code>set[str]</code>)           \u2013            <p>Low level attributes known to cause issues when resolving aliases.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is an attribute.</p> </li> <li> <code>is_builtin_function</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a builtin function.</p> </li> <li> <code>is_builtin_method</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a builtin method.</p> </li> <li> <code>is_cached_property</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a cached property.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a class.</p> </li> <li> <code>is_classmethod</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a classmethod.</p> </li> <li> <code>is_coroutine</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a coroutine.</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a function.</p> </li> <li> <code>is_getset_descriptor</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a get/set descriptor.</p> </li> <li> <code>is_method</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a method.</p> </li> <li> <code>is_method_descriptor</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a method descriptor.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a module.</p> </li> <li> <code>is_property</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a property.</p> </li> <li> <code>is_staticmethod</code>               (<code>bool</code>)           \u2013            <p>Whether this node's object is a staticmethod.</p> </li> <li> <code>kind</code>               (<code>ObjectKind</code>)           \u2013            <p>The kind of this node.</p> </li> <li> <code>module</code>               (<code>ObjectNode</code>)           \u2013            <p>The object's module, fetched from the node tree.</p> </li> <li> <code>module_path</code>               (<code>str | None</code>)           \u2013            <p>The object's module path.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The Python object's name.</p> </li> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The actual Python object.</p> </li> <li> <code>parent</code>               (<code>ObjectNode | None</code>)           \u2013            <p>The parent node.</p> </li> <li> <code>parent_is_class</code>               (<code>bool</code>)           \u2013            <p>Whether the object of this node's parent is a class.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The object's (Python) path.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ObjectNode(obj)","title":"<code>obj</code>","text":"(<code>Any</code>)           \u2013            <p>A Python object.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The object's name.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode(parent)","title":"<code>parent</code>","text":"(<code>ObjectNode | None</code>, default:                   <code>None</code> )           \u2013            <p>The object's parent node.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.alias_target_path","title":"alias_target_path  <code>cached</code> <code>property</code>","text":"<pre><code>alias_target_path: str | None\n</code></pre> <p>Alias target path of this node, if the node should be an alias.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.children","title":"children  <code>cached</code> <code>property</code>","text":"<pre><code>children: Sequence[ObjectNode]\n</code></pre> <p>The children of this node.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.exclude_specials","title":"exclude_specials  <code>class-attribute</code>","text":"<pre><code>exclude_specials: set[str] = {\n    \"__builtins__\",\n    \"__loader__\",\n    \"__spec__\",\n}\n</code></pre> <p>Low level attributes known to cause issues when resolving aliases.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_attribute","title":"is_attribute  <code>cached</code> <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this node's object is an attribute.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_builtin_function","title":"is_builtin_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_function: bool\n</code></pre> <p>Whether this node's object is a builtin function.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_builtin_method","title":"is_builtin_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_builtin_method: bool\n</code></pre> <p>Whether this node's object is a builtin method.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_cached_property","title":"is_cached_property  <code>instance-attribute</code>","text":"<pre><code>is_cached_property: bool = is_cached_property\n</code></pre> <p>Whether this node's object is a cached property.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_class","title":"is_class  <code>cached</code> <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this node's object is a class.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_classmethod","title":"is_classmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_classmethod: bool\n</code></pre> <p>Whether this node's object is a classmethod.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_coroutine","title":"is_coroutine  <code>cached</code> <code>property</code>","text":"<pre><code>is_coroutine: bool\n</code></pre> <p>Whether this node's object is a coroutine.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_function","title":"is_function  <code>cached</code> <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this node's object is a function.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_getset_descriptor","title":"is_getset_descriptor  <code>cached</code> <code>property</code>","text":"<pre><code>is_getset_descriptor: bool\n</code></pre> <p>Whether this node's object is a get/set descriptor.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_method","title":"is_method  <code>cached</code> <code>property</code>","text":"<pre><code>is_method: bool\n</code></pre> <p>Whether this node's object is a method.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_method_descriptor","title":"is_method_descriptor  <code>cached</code> <code>property</code>","text":"<pre><code>is_method_descriptor: bool\n</code></pre> <p>Whether this node's object is a method descriptor.</p> <p>Built-in methods (e.g. those implemented in C/Rust) are often method descriptors, rather than normal methods.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_module","title":"is_module  <code>cached</code> <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this node's object is a module.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_property","title":"is_property  <code>cached</code> <code>property</code>","text":"<pre><code>is_property: bool\n</code></pre> <p>Whether this node's object is a property.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.is_staticmethod","title":"is_staticmethod  <code>cached</code> <code>property</code>","text":"<pre><code>is_staticmethod: bool\n</code></pre> <p>Whether this node's object is a staticmethod.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.kind","title":"kind  <code>property</code>","text":"<pre><code>kind: ObjectKind\n</code></pre> <p>The kind of this node.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.module","title":"module  <code>property</code>","text":"<pre><code>module: ObjectNode\n</code></pre> <p>The object's module, fetched from the node tree.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.module_path","title":"module_path  <code>property</code>","text":"<pre><code>module_path: str | None\n</code></pre> <p>The object's module path.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The Python object's name.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj: Any = obj\n</code></pre> <p>The actual Python object.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: ObjectNode | None = parent\n</code></pre> <p>The parent node.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.parent_is_class","title":"parent_is_class  <code>cached</code> <code>property</code>","text":"<pre><code>parent_is_class: bool\n</code></pre> <p>Whether the object of this node's parent is a class.</p>"},{"location":"reference/api/agents/#griffe.ObjectNode.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The object's (Python) path.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind","title":"ObjectKind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.ObjectKind[ObjectKind]\n\n              \n\n              click griffe.ObjectKind href \"\" \"griffe.ObjectKind\"\n            </code></pre> <p>Enumeration of the different runtime object kinds.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions <ul> <li> How it works </li> <li> Visiting trees </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Agents <code></code>\u00a0ObjectNode <code></code>\u00a0kind </li> </ul> <p>Attributes:</p> <ul> <li> <code>ATTRIBUTE</code>           \u2013            <p>Attributes.</p> </li> <li> <code>BUILTIN_FUNCTION</code>           \u2013            <p>Built-in functions.</p> </li> <li> <code>BUILTIN_METHOD</code>           \u2013            <p>Built-in methods.</p> </li> <li> <code>CACHED_PROPERTY</code>           \u2013            <p>Cached properties.</p> </li> <li> <code>CLASS</code>           \u2013            <p>Classes.</p> </li> <li> <code>CLASSMETHOD</code>           \u2013            <p>Class methods.</p> </li> <li> <code>COROUTINE</code>           \u2013            <p>Coroutines</p> </li> <li> <code>FUNCTION</code>           \u2013            <p>Functions.</p> </li> <li> <code>GETSET_DESCRIPTOR</code>           \u2013            <p>Get/set descriptors.</p> </li> <li> <code>METHOD</code>           \u2013            <p>Methods.</p> </li> <li> <code>METHOD_DESCRIPTOR</code>           \u2013            <p>Method descriptors.</p> </li> <li> <code>MODULE</code>           \u2013            <p>Modules.</p> </li> <li> <code>PROPERTY</code>           \u2013            <p>Properties.</p> </li> <li> <code>STATICMETHOD</code>           \u2013            <p>Static methods.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ObjectKind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE = 'attribute'\n</code></pre> <p>Attributes.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.BUILTIN_FUNCTION","title":"BUILTIN_FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_FUNCTION = 'builtin_function'\n</code></pre> <p>Built-in functions.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.BUILTIN_METHOD","title":"BUILTIN_METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUILTIN_METHOD = 'builtin_method'\n</code></pre> <p>Built-in methods.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.CACHED_PROPERTY","title":"CACHED_PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CACHED_PROPERTY = 'cached_property'\n</code></pre> <p>Cached properties.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.CLASSMETHOD","title":"CLASSMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASSMETHOD = 'classmethod'\n</code></pre> <p>Class methods.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.COROUTINE","title":"COROUTINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COROUTINE = 'coroutine'\n</code></pre> <p>Coroutines</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION = 'function'\n</code></pre> <p>Functions.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.GETSET_DESCRIPTOR","title":"GETSET_DESCRIPTOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GETSET_DESCRIPTOR = 'getset_descriptor'\n</code></pre> <p>Get/set descriptors.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.METHOD","title":"METHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD = 'method'\n</code></pre> <p>Methods.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.METHOD_DESCRIPTOR","title":"METHOD_DESCRIPTOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METHOD_DESCRIPTOR = 'method_descriptor'\n</code></pre> <p>Method descriptors.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.PROPERTY","title":"PROPERTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PROPERTY = 'property'\n</code></pre> <p>Properties.</p>"},{"location":"reference/api/agents/#griffe.ObjectKind.STATICMETHOD","title":"STATICMETHOD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STATICMETHOD = 'staticmethod'\n</code></pre> <p>Static methods.</p>"},{"location":"reference/api/agents/#static-analysis-helpers","title":"Static analysis helpers","text":""},{"location":"reference/api/agents/#griffe.builtin_decorators","title":"builtin_decorators  <code>module-attribute</code>","text":"<pre><code>builtin_decorators = {\n    \"property\": \"property\",\n    \"staticmethod\": \"staticmethod\",\n    \"classmethod\": \"classmethod\",\n}\n</code></pre> <p>Mapping of builtin decorators to labels.</p>"},{"location":"reference/api/agents/#griffe.stdlib_decorators","title":"stdlib_decorators  <code>module-attribute</code>","text":"<pre><code>stdlib_decorators = {\n    \"abc.abstractmethod\": {\"abstractmethod\"},\n    \"functools.cache\": {\"cached\"},\n    \"functools.cached_property\": {\"cached\", \"property\"},\n    \"cached_property.cached_property\": {\n        \"cached\",\n        \"property\",\n    },\n    \"functools.lru_cache\": {\"cached\"},\n    \"dataclasses.dataclass\": {\"dataclass\"},\n}\n</code></pre> <p>Mapping of standard library decorators to labels.</p>"},{"location":"reference/api/agents/#griffe.typing_overload","title":"typing_overload  <code>module-attribute</code>","text":"<pre><code>typing_overload = {\n    \"typing.overload\",\n    \"typing_extensions.overload\",\n}\n</code></pre> <p>Set of recognized typing overload decorators.</p> <p>When such a decorator is found, the decorated function becomes an overload.</p>"},{"location":"reference/api/agents/#griffe.ast_kind","title":"ast_kind","text":"<pre><code>ast_kind(node: AST) -&gt; str\n</code></pre> <p>Return the kind of an AST node.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The node kind.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_kind(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_children","title":"ast_children","text":"<pre><code>ast_children(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the children of an AST node.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>AST</code>           \u2013            <p>The node children.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_children(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_previous_siblings","title":"ast_previous_siblings","text":"<pre><code>ast_previous_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the previous siblings of this node, starting from the closest.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>AST</code>           \u2013            <p>The previous siblings.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_previous_siblings(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_next_siblings","title":"ast_next_siblings","text":"<pre><code>ast_next_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the next siblings of this node, starting from the closest.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>AST</code>           \u2013            <p>The next siblings.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_next_siblings(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_siblings","title":"ast_siblings","text":"<pre><code>ast_siblings(node: AST) -&gt; Iterator[AST]\n</code></pre> <p>Return the siblings of this node.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>AST</code>           \u2013            <p>The siblings.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_siblings(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_previous","title":"ast_previous","text":"<pre><code>ast_previous(node: AST) -&gt; AST\n</code></pre> <p>Return the previous sibling of this node.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>             \u2013            <p>When the node does not have previous siblings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>           \u2013            <p>The sibling.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_previous(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_next","title":"ast_next","text":"<pre><code>ast_next(node: AST) -&gt; AST\n</code></pre> <p>Return the next sibling of this node.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>             \u2013            <p>When the node does not have next siblings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>           \u2013            <p>The sibling.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_next(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_first_child","title":"ast_first_child","text":"<pre><code>ast_first_child(node: AST) -&gt; AST\n</code></pre> <p>Return the first child of this node.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>             \u2013            <p>When the node does not have children.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>           \u2013            <p>The child.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_first_child(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.ast_last_child","title":"ast_last_child","text":"<pre><code>ast_last_child(node: AST) -&gt; AST\n</code></pre> <p>Return the lasts child of this node.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>LastNodeError</code>             \u2013            <p>When the node does not have children.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AST</code>           \u2013            <p>The child.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ast_last_child(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The AST node.</p>"},{"location":"reference/api/agents/#griffe.get_docstring","title":"get_docstring","text":"<pre><code>get_docstring(\n    node: AST, *, strict: bool = False\n) -&gt; tuple[str | None, int | None, int | None]\n</code></pre> <p>Extract a docstring.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str | None, int | None, int | None]</code>           \u2013            <p>A tuple with the value and line numbers of the docstring.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.get_docstring(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to extract the docstring from.</p>"},{"location":"reference/api/agents/#griffe.get_docstring(strict)","title":"<code>strict</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to skip searching the body (functions).</p>"},{"location":"reference/api/agents/#griffe.get_name","title":"get_name","text":"<pre><code>get_name(node: AST) -&gt; str\n</code></pre> <p>Extract name from an assignment node.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A list of names.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.get_name(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to extract names from.</p>"},{"location":"reference/api/agents/#griffe.get_names","title":"get_names","text":"<pre><code>get_names(node: AST) -&gt; list[str]\n</code></pre> <p>Extract names from an assignment node.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of names.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.get_names(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to extract names from.</p>"},{"location":"reference/api/agents/#griffe.get_instance_names","title":"get_instance_names","text":"<pre><code>get_instance_names(node: AST) -&gt; list[str]\n</code></pre> <p>Extract names from an assignment node, only for instance attributes.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of names.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.get_instance_names(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to extract names from.</p>"},{"location":"reference/api/agents/#griffe.get__all__","title":"get__all__","text":"<pre><code>get__all__(\n    node: Assign | AnnAssign | AugAssign, parent: Module\n) -&gt; list[str | ExprName]\n</code></pre> <p>Get the values declared in <code>__all__</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str | ExprName]</code>           \u2013            <p>A set of names.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Agents <code></code>\u00a0ExportedName </li> </ul>"},{"location":"reference/api/agents/#griffe.get__all__(node)","title":"<code>node</code>","text":"(<code>Assign | AnnAssign | AugAssign</code>)           \u2013            <p>The assignment node.</p>"},{"location":"reference/api/agents/#griffe.get__all__(parent)","title":"<code>parent</code>","text":"(<code>Module</code>)           \u2013            <p>The parent module.</p>"},{"location":"reference/api/agents/#griffe.safe_get__all__","title":"safe_get__all__","text":"<pre><code>safe_get__all__(\n    node: Assign | AnnAssign | AugAssign,\n    parent: Module,\n    log_level: LogLevel = debug,\n) -&gt; list[str | ExprName]\n</code></pre> <p>Safely (no exception) extract values in <code>__all__</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str | ExprName]</code>           \u2013            <p>A list of strings or resolvable names.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.safe_get__all__(node)","title":"<code>node</code>","text":"(<code>Assign | AnnAssign | AugAssign</code>)           \u2013            <p>The <code>__all__</code> assignment node.</p>"},{"location":"reference/api/agents/#griffe.safe_get__all__(parent)","title":"<code>parent</code>","text":"(<code>Module</code>)           \u2013            <p>The parent used to resolve the names.</p>"},{"location":"reference/api/agents/#griffe.safe_get__all__(log_level)","title":"<code>log_level</code>","text":"(<code>LogLevel</code>, default:                   <code>debug</code> )           \u2013            <p>Log level to use to log a message.</p>"},{"location":"reference/api/agents/#griffe.relative_to_absolute","title":"relative_to_absolute","text":"<pre><code>relative_to_absolute(\n    node: ImportFrom, name: alias, current_module: Module\n) -&gt; str\n</code></pre> <p>Convert a relative import path to an absolute one.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The absolute import path.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.relative_to_absolute(node)","title":"<code>node</code>","text":"(<code>ImportFrom</code>)           \u2013            <p>The \"from ... import ...\" AST node.</p>"},{"location":"reference/api/agents/#griffe.relative_to_absolute(name)","title":"<code>name</code>","text":"(<code>alias</code>)           \u2013            <p>The imported name.</p>"},{"location":"reference/api/agents/#griffe.relative_to_absolute(current_module)","title":"<code>current_module</code>","text":"(<code>Module</code>)           \u2013            <p>The module in which the import happens.</p>"},{"location":"reference/api/agents/#griffe.get_parameters","title":"get_parameters","text":"<pre><code>get_parameters(node: arguments) -&gt; ParametersType\n</code></pre>"},{"location":"reference/api/agents/#griffe.get_value","title":"get_value","text":"<pre><code>get_value(node: AST | None) -&gt; str | None\n</code></pre> <p>Get the string representation of a node.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The representing code for the node.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.get_value(node)","title":"<code>node</code>","text":"(<code>AST | None</code>)           \u2013            <p>The node to represent.</p>"},{"location":"reference/api/agents/#griffe.safe_get_value","title":"safe_get_value","text":"<pre><code>safe_get_value(\n    node: AST | None, filepath: str | Path | None = None\n) -&gt; str | None\n</code></pre> <p>Safely (no exception) get the string representation of a node.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The representing code for the node.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.safe_get_value(node)","title":"<code>node</code>","text":"(<code>AST | None</code>)           \u2013            <p>The node to represent.</p>"},{"location":"reference/api/agents/#griffe.safe_get_value(filepath)","title":"<code>filepath</code>","text":"(<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional filepath from where the node comes.</p>"},{"location":"reference/api/agents/#deprecated-api","title":"Deprecated API","text":""},{"location":"reference/api/agents/#griffe.ExportedName","title":"ExportedName  <code>dataclass</code>","text":"<pre><code>ExportedName(name: str, parent: Module)\n</code></pre> <p>Deprecated. An intermediate class to store names.</p> <p>The <code>get__all__</code> function now returns instances of <code>ExprName</code> instead.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The exported name.</p> </li> <li> <code>parent</code>               (<code>Module</code>)           \u2013            <p>The parent module.</p> </li> </ul>"},{"location":"reference/api/agents/#griffe.ExportedName.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The exported name.</p>"},{"location":"reference/api/agents/#griffe.ExportedName.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module\n</code></pre> <p>The parent module.</p>"},{"location":"reference/api/checks/","title":"API checks","text":""},{"location":"reference/api/checks/#griffe.find_breaking_changes","title":"find_breaking_changes","text":"<pre><code>find_breaking_changes(\n    old_obj: Object | Alias, new_obj: Object | Alias\n) -&gt; Iterator[Breakage]\n</code></pre> <p>Find breaking changes between two versions of the same API.</p> <p>The function will iterate recursively on all objects and yield breaking changes with detailed information.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Breakage</code>           \u2013            <p>Breaking changes.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sys, griffe\n&gt;&gt;&gt; new = griffe.load(\"pkg\")\n&gt;&gt;&gt; old = griffe.load_git(\"pkg\", \"1.2.3\")\n&gt;&gt;&gt; for breakage in griffe.find_breaking_changes(old, new)\n...     print(breakage.explain(style=style), file=sys.stderr)\n</code></pre> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Checking APIs Python API </li> <li> Reference <code></code>\u00a0griffe API checks </li> </ul>"},{"location":"reference/api/checks/#griffe.find_breaking_changes(old_obj)","title":"<code>old_obj</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The old version of an object.</p>"},{"location":"reference/api/checks/#griffe.find_breaking_changes(new_obj)","title":"<code>new_obj</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The new version of an object.</p>"},{"location":"reference/api/checks/#griffe.ExplanationStyle","title":"ExplanationStyle","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.ExplanationStyle[ExplanationStyle]\n\n              \n\n              click griffe.ExplanationStyle href \"\" \"griffe.ExplanationStyle\"\n            </code></pre> <p>Enumeration of the possible styles for explanations.</p> Used by: <ul> <li> Reference Python API API checks <ul> <li> <code></code>\u00a0AttributeChangedTypeBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0AttributeChangedValueBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0Breakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ClassRemovedBaseBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ObjectChangedKindBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ObjectRemovedBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterAddedRequiredBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterChangedDefaultBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterChangedKindBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterChangedRequiredBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterMovedBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ParameterRemovedBreakage <code></code>\u00a0explain </li> <li> <code></code>\u00a0ReturnChangedTypeBreakage <code></code>\u00a0explain </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>GITHUB</code>           \u2013            <p>Explanation as GitHub workflow commands warnings, adapted to CI.</p> </li> <li> <code>MARKDOWN</code>           \u2013            <p>Explanations in Markdown, adapted to changelogs.</p> </li> <li> <code>ONE_LINE</code>           \u2013            <p>Explanations on one-line.</p> </li> <li> <code>VERBOSE</code>           \u2013            <p>Explanations on multiple lines.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ExplanationStyle.GITHUB","title":"GITHUB  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GITHUB = 'github'\n</code></pre> <p>Explanation as GitHub workflow commands warnings, adapted to CI.</p>"},{"location":"reference/api/checks/#griffe.ExplanationStyle.MARKDOWN","title":"MARKDOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MARKDOWN = 'markdown'\n</code></pre> <p>Explanations in Markdown, adapted to changelogs.</p>"},{"location":"reference/api/checks/#griffe.ExplanationStyle.ONE_LINE","title":"ONE_LINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONE_LINE = 'oneline'\n</code></pre> <p>Explanations on one-line.</p>"},{"location":"reference/api/checks/#griffe.ExplanationStyle.VERBOSE","title":"VERBOSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VERBOSE = 'verbose'\n</code></pre> <p>Explanations on multiple lines.</p>"},{"location":"reference/api/checks/#griffe.Breakage","title":"Breakage","text":"<pre><code>Breakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>Breakages can explain what broke from a version to another.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Checking APIs Python API </li> <li> Reference <code></code>\u00a0griffe API checks </li> </ul> Subclassed by: <ul> <li> Reference Python API API checks <ul> <li> <code></code>\u00a0AttributeChangedTypeBreakage </li> <li> <code></code>\u00a0AttributeChangedValueBreakage </li> <li> <code></code>\u00a0ClassRemovedBaseBreakage </li> <li> <code></code>\u00a0ObjectChangedKindBreakage </li> <li> <code></code>\u00a0ObjectRemovedBreakage </li> <li> <code></code>\u00a0ParameterAddedRequiredBreakage </li> <li> <code></code>\u00a0ParameterChangedDefaultBreakage </li> <li> <code></code>\u00a0ParameterChangedKindBreakage </li> <li> <code></code>\u00a0ParameterChangedRequiredBreakage </li> <li> <code></code>\u00a0ParameterMovedBreakage </li> <li> <code></code>\u00a0ParameterRemovedBreakage </li> <li> <code></code>\u00a0ReturnChangedTypeBreakage </li> </ul> </li> </ul> Yielded by: <ul> <li> Reference Python API API checks <code></code>\u00a0find_breaking_changes </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.Breakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.Breakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.Breakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.Breakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.Breakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.Breakage.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.Breakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.Breakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.Breakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.Breakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.Breakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.Breakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.Breakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.Breakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.BreakageKind","title":"BreakageKind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.BreakageKind[BreakageKind]\n\n              \n\n              click griffe.BreakageKind href \"\" \"griffe.BreakageKind\"\n            </code></pre> <p>Enumeration of the possible API breakages.</p> Returned by: <ul> <li> Reference Python API API checks <ul> <li> <code></code>\u00a0AttributeChangedTypeBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0AttributeChangedValueBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0Breakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ClassRemovedBaseBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ObjectChangedKindBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ObjectRemovedBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterAddedRequiredBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterChangedDefaultBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterChangedKindBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterChangedRequiredBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterMovedBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ParameterRemovedBreakage <code></code>\u00a0kind </li> <li> <code></code>\u00a0ReturnChangedTypeBreakage <code></code>\u00a0kind </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>ATTRIBUTE_CHANGED_TYPE</code>           \u2013            <p>Attribute types are incompatible</p> </li> <li> <code>ATTRIBUTE_CHANGED_VALUE</code>           \u2013            <p>Attribute value was changed</p> </li> <li> <code>CLASS_REMOVED_BASE</code>           \u2013            <p>Base class was removed</p> </li> <li> <code>OBJECT_CHANGED_KIND</code>           \u2013            <p>Public object points to a different kind of object</p> </li> <li> <code>OBJECT_REMOVED</code>           \u2013            <p>Public object was removed</p> </li> <li> <code>PARAMETER_ADDED_REQUIRED</code>           \u2013            <p>Parameter was added as required</p> </li> <li> <code>PARAMETER_CHANGED_DEFAULT</code>           \u2013            <p>Parameter default was changed</p> </li> <li> <code>PARAMETER_CHANGED_KIND</code>           \u2013            <p>Parameter kind was changed</p> </li> <li> <code>PARAMETER_CHANGED_REQUIRED</code>           \u2013            <p>Parameter is now required</p> </li> <li> <code>PARAMETER_MOVED</code>           \u2013            <p>Positional parameter was moved</p> </li> <li> <code>PARAMETER_REMOVED</code>           \u2013            <p>Parameter was removed</p> </li> <li> <code>RETURN_CHANGED_TYPE</code>           \u2013            <p>Return types are incompatible</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.BreakageKind.ATTRIBUTE_CHANGED_TYPE","title":"ATTRIBUTE_CHANGED_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE_CHANGED_TYPE = 'Attribute types are incompatible'\n</code></pre> <p>Attribute types are incompatible</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.ATTRIBUTE_CHANGED_VALUE","title":"ATTRIBUTE_CHANGED_VALUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE_CHANGED_VALUE = 'Attribute value was changed'\n</code></pre> <p>Attribute value was changed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.CLASS_REMOVED_BASE","title":"CLASS_REMOVED_BASE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS_REMOVED_BASE = 'Base class was removed'\n</code></pre> <p>Base class was removed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.OBJECT_CHANGED_KIND","title":"OBJECT_CHANGED_KIND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OBJECT_CHANGED_KIND = (\n    \"Public object points to a different kind of object\"\n)\n</code></pre> <p>Public object points to a different kind of object</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.OBJECT_REMOVED","title":"OBJECT_REMOVED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OBJECT_REMOVED = 'Public object was removed'\n</code></pre> <p>Public object was removed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_ADDED_REQUIRED","title":"PARAMETER_ADDED_REQUIRED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_ADDED_REQUIRED = \"Parameter was added as required\"\n</code></pre> <p>Parameter was added as required</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_CHANGED_DEFAULT","title":"PARAMETER_CHANGED_DEFAULT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_CHANGED_DEFAULT = 'Parameter default was changed'\n</code></pre> <p>Parameter default was changed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_CHANGED_KIND","title":"PARAMETER_CHANGED_KIND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_CHANGED_KIND = 'Parameter kind was changed'\n</code></pre> <p>Parameter kind was changed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_CHANGED_REQUIRED","title":"PARAMETER_CHANGED_REQUIRED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_CHANGED_REQUIRED = 'Parameter is now required'\n</code></pre> <p>Parameter is now required</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_MOVED","title":"PARAMETER_MOVED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_MOVED = 'Positional parameter was moved'\n</code></pre> <p>Positional parameter was moved</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.PARAMETER_REMOVED","title":"PARAMETER_REMOVED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAMETER_REMOVED = 'Parameter was removed'\n</code></pre> <p>Parameter was removed</p>"},{"location":"reference/api/checks/#griffe.BreakageKind.RETURN_CHANGED_TYPE","title":"RETURN_CHANGED_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RETURN_CHANGED_TYPE = 'Return types are incompatible'\n</code></pre> <p>Return types are incompatible</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage","title":"AttributeChangedTypeBreakage","text":"<pre><code>AttributeChangedTypeBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.AttributeChangedTypeBreakage[AttributeChangedTypeBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.AttributeChangedTypeBreakage\n                \n\n\n              click griffe.AttributeChangedTypeBreakage href \"\" \"griffe.AttributeChangedTypeBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for attributes whose type changed.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = ATTRIBUTE_CHANGED_TYPE\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedTypeBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage","title":"AttributeChangedValueBreakage","text":"<pre><code>AttributeChangedValueBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.AttributeChangedValueBreakage[AttributeChangedValueBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.AttributeChangedValueBreakage\n                \n\n\n              click griffe.AttributeChangedValueBreakage href \"\" \"griffe.AttributeChangedValueBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for attributes whose value changed.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = ATTRIBUTE_CHANGED_VALUE\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.AttributeChangedValueBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage","title":"ClassRemovedBaseBreakage","text":"<pre><code>ClassRemovedBaseBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ClassRemovedBaseBreakage[ClassRemovedBaseBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ClassRemovedBaseBreakage\n                \n\n\n              click griffe.ClassRemovedBaseBreakage href \"\" \"griffe.ClassRemovedBaseBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for removed base classes.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = CLASS_REMOVED_BASE\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ClassRemovedBaseBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage","title":"ObjectChangedKindBreakage","text":"<pre><code>ObjectChangedKindBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ObjectChangedKindBreakage[ObjectChangedKindBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ObjectChangedKindBreakage\n                \n\n\n              click griffe.ObjectChangedKindBreakage href \"\" \"griffe.ObjectChangedKindBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for objects whose kind changed.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = OBJECT_CHANGED_KIND\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectChangedKindBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage","title":"ObjectRemovedBreakage","text":"<pre><code>ObjectRemovedBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ObjectRemovedBreakage[ObjectRemovedBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ObjectRemovedBreakage\n                \n\n\n              click griffe.ObjectRemovedBreakage href \"\" \"griffe.ObjectRemovedBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for removed objects.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = OBJECT_REMOVED\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ObjectRemovedBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage","title":"ParameterAddedRequiredBreakage","text":"<pre><code>ParameterAddedRequiredBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterAddedRequiredBreakage[ParameterAddedRequiredBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterAddedRequiredBreakage\n                \n\n\n              click griffe.ParameterAddedRequiredBreakage href \"\" \"griffe.ParameterAddedRequiredBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for new parameters added as required.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_ADDED_REQUIRED\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterAddedRequiredBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage","title":"ParameterChangedDefaultBreakage","text":"<pre><code>ParameterChangedDefaultBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterChangedDefaultBreakage[ParameterChangedDefaultBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterChangedDefaultBreakage\n                \n\n\n              click griffe.ParameterChangedDefaultBreakage href \"\" \"griffe.ParameterChangedDefaultBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for parameters whose default value changed.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_CHANGED_DEFAULT\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedDefaultBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage","title":"ParameterChangedKindBreakage","text":"<pre><code>ParameterChangedKindBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterChangedKindBreakage[ParameterChangedKindBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterChangedKindBreakage\n                \n\n\n              click griffe.ParameterChangedKindBreakage href \"\" \"griffe.ParameterChangedKindBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for parameters whose kind changed.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_CHANGED_KIND\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedKindBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage","title":"ParameterChangedRequiredBreakage","text":"<pre><code>ParameterChangedRequiredBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterChangedRequiredBreakage[ParameterChangedRequiredBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterChangedRequiredBreakage\n                \n\n\n              click griffe.ParameterChangedRequiredBreakage href \"\" \"griffe.ParameterChangedRequiredBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for parameters which became required.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_CHANGED_REQUIRED\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterChangedRequiredBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage","title":"ParameterMovedBreakage","text":"<pre><code>ParameterMovedBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterMovedBreakage[ParameterMovedBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterMovedBreakage\n                \n\n\n              click griffe.ParameterMovedBreakage href \"\" \"griffe.ParameterMovedBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for moved parameters.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_MOVED\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterMovedBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage","title":"ParameterRemovedBreakage","text":"<pre><code>ParameterRemovedBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterRemovedBreakage[ParameterRemovedBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ParameterRemovedBreakage\n                \n\n\n              click griffe.ParameterRemovedBreakage href \"\" \"griffe.ParameterRemovedBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for removed parameters.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = PARAMETER_REMOVED\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ParameterRemovedBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage","title":"ReturnChangedTypeBreakage","text":"<pre><code>ReturnChangedTypeBreakage(\n    obj: Object,\n    old_value: Any,\n    new_value: Any,\n    details: str = \"\",\n)\n</code></pre> <p>               Bases: <code>Breakage</code></p> <pre><code>\n              flowchart TD\n              griffe.ReturnChangedTypeBreakage[ReturnChangedTypeBreakage]\n              _griffe.diff.Breakage[Breakage]\n\n                              _griffe.diff.Breakage --&gt; griffe.ReturnChangedTypeBreakage\n                \n\n\n              click griffe.ReturnChangedTypeBreakage href \"\" \"griffe.ReturnChangedTypeBreakage\"\n              click _griffe.diff.Breakage href \"\" \"_griffe.diff.Breakage\"\n            </code></pre> <p>Specific breakage class for return values which changed type.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>explain</code>             \u2013              <p>Explain the breakage by showing old and new value.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>details</code>           \u2013            <p>Some details about the breakage.</p> </li> <li> <code>kind</code>               (<code>BreakageKind</code>)           \u2013            <p>The kind of breakage.</p> </li> <li> <code>new_value</code>           \u2013            <p>The new, incompatible value.</p> </li> <li> <code>obj</code>           \u2013            <p>The object related to the breakage.</p> </li> <li> <code>old_value</code>           \u2013            <p>The old value.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage(old_value)","title":"<code>old_value</code>","text":"(<code>Any</code>)           \u2013            <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage(new_value)","title":"<code>new_value</code>","text":"(<code>Any</code>)           \u2013            <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage(details)","title":"<code>details</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.details","title":"details  <code>instance-attribute</code>","text":"<pre><code>details = details\n</code></pre> <p>Some details about the breakage.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BreakageKind = RETURN_CHANGED_TYPE\n</code></pre> <p>The kind of breakage.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.new_value","title":"new_value  <code>instance-attribute</code>","text":"<pre><code>new_value = new_value\n</code></pre> <p>The new, incompatible value.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.obj","title":"obj  <code>instance-attribute</code>","text":"<pre><code>obj = obj\n</code></pre> <p>The object related to the breakage.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.old_value","title":"old_value  <code>instance-attribute</code>","text":"<pre><code>old_value = old_value\n</code></pre> <p>The old value.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.explain","title":"explain","text":"<pre><code>explain(style: ExplanationStyle = ONE_LINE) -&gt; str\n</code></pre> <p>Explain the breakage by showing old and new value.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>An explanation.</p> </li> </ul>"},{"location":"reference/api/checks/#griffe.ReturnChangedTypeBreakage.explain(style)","title":"<code>style</code>","text":"(<code>ExplanationStyle</code>, default:                   <code>ONE_LINE</code> )           \u2013            <p>The explanation style to use.</p>"},{"location":"reference/api/cli/","title":"CLI entrypoints","text":""},{"location":"reference/api/cli/#main-api","title":"Main API","text":""},{"location":"reference/api/cli/#griffe.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>griffe</code> or <code>python -m griffe</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe CLI entrypoints </li> </ul>"},{"location":"reference/api/cli/#griffe.main(args)","title":"<code>args</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p>"},{"location":"reference/api/cli/#griffe.check","title":"check","text":"<pre><code>check(\n    package: str | Path,\n    against: str | None = None,\n    against_path: str | Path | None = None,\n    *,\n    base_ref: str | None = None,\n    extensions: Sequence[\n        str | dict[str, Any] | Extension | type[Extension]\n    ]\n    | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    append_sys_path: bool = False,\n    find_stubs_package: bool = False,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    verbose: bool = False,\n    color: bool | None = None,\n    style: str | ExplanationStyle | None = None,\n) -&gt; int\n</code></pre> <p>Check for API breaking changes in two versions of the same package.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p><code>0</code> for success, <code>1</code> for failure.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe CLI entrypoints </li> </ul>"},{"location":"reference/api/cli/#griffe.check(package)","title":"<code>package</code>","text":"(<code>str | Path</code>)           \u2013            <p>The package to load and check.</p>"},{"location":"reference/api/cli/#griffe.check(against)","title":"<code>against</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Older Git reference (commit, branch, tag) to check against.</p>"},{"location":"reference/api/cli/#griffe.check(against_path)","title":"<code>against_path</code>","text":"(<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>Path when the \"against\" reference is checked out.</p>"},{"location":"reference/api/cli/#griffe.check(base_ref)","title":"<code>base_ref</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Git reference (commit, branch, tag) to check.</p>"},{"location":"reference/api/cli/#griffe.check(extensions)","title":"<code>extensions</code>","text":"(<code>Sequence[str | dict[str, Any] | Extension | type[Extension]] | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/cli/#griffe.check(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into.</p>"},{"location":"reference/api/cli/#griffe.check(append_sys_path)","title":"<code>append_sys_path</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to append the contents of <code>sys.path</code> to the search paths.</p>"},{"location":"reference/api/cli/#griffe.check(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/cli/#griffe.check(force_inspection)","title":"<code>force_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/cli/#griffe.check(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use a verbose output.</p>"},{"location":"reference/api/cli/#griffe.dump","title":"dump","text":"<pre><code>dump(\n    packages: Sequence[str],\n    *,\n    output: str | IO | None = None,\n    full: bool = False,\n    docstring_parser: Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    extensions: Sequence[\n        str | dict[str, Any] | Extension | type[Extension]\n    ]\n    | None = None,\n    resolve_aliases: bool = False,\n    resolve_implicit: bool = False,\n    resolve_external: bool | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    find_stubs_package: bool = False,\n    append_sys_path: bool = False,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    stats: bool = False,\n) -&gt; int\n</code></pre> <p>Load packages data and dump it as JSON.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p><code>0</code> for success, <code>1</code> for failure.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe CLI entrypoints </li> </ul>"},{"location":"reference/api/cli/#griffe.dump(packages)","title":"<code>packages</code>","text":"(<code>Sequence[str]</code>)           \u2013            <p>The packages to load and dump.</p>"},{"location":"reference/api/cli/#griffe.dump(output)","title":"<code>output</code>","text":"(<code>str | IO | None</code>, default:                   <code>None</code> )           \u2013            <p>Where to output the JSON-serialized data.</p>"},{"location":"reference/api/cli/#griffe.dump(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to output full or minimal data.</p>"},{"location":"reference/api/cli/#griffe.dump(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/cli/#griffe.dump(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/cli/#griffe.dump(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases (indirect objects references).</p>"},{"location":"reference/api/cli/#griffe.dump(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve every alias or only the explicitly exported ones.</p>"},{"location":"reference/api/cli/#griffe.dump(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to load additional, unspecified modules to resolve aliases. Default is to resolve only from one module to its private sibling (<code>ast</code> -&gt; <code>_ast</code>).</p>"},{"location":"reference/api/cli/#griffe.dump(extensions)","title":"<code>extensions</code>","text":"(<code>Sequence[str | dict[str, Any] | Extension | type[Extension]] | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/cli/#griffe.dump(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into.</p>"},{"location":"reference/api/cli/#griffe.dump(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only packages. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/cli/#griffe.dump(append_sys_path)","title":"<code>append_sys_path</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to append the contents of <code>sys.path</code> to the search paths.</p>"},{"location":"reference/api/cli/#griffe.dump(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/cli/#griffe.dump(force_inspection)","title":"<code>force_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/cli/#griffe.dump(stats)","title":"<code>stats</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to compute and log stats about loading.</p>"},{"location":"reference/api/cli/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/cli/#griffe.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argparse parser.</p> </li> </ul>"},{"location":"reference/api/docstrings/","title":"Docstrings","text":"<p>Docstrings are parsed and the extracted information is structured in models.</p>"},{"location":"reference/api/exceptions/","title":"Exceptions","text":""},{"location":"reference/api/exceptions/#griffe.GriffeError","title":"GriffeError","text":"<p>               Bases: <code>Exception</code></p> <pre><code>\n              flowchart TD\n              griffe.GriffeError[GriffeError]\n\n              \n\n              click griffe.GriffeError href \"\" \"griffe.GriffeError\"\n            </code></pre> <p>The base exception for all Griffe errors.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul> Subclassed by: <ul> <li> Reference Python API Exceptions <ul> <li> <code></code>\u00a0AliasResolutionError </li> <li> <code></code>\u00a0BuiltinModuleError </li> <li> <code></code>\u00a0CyclicAliasError </li> <li> <code></code>\u00a0ExtensionError </li> <li> <code></code>\u00a0GitError </li> <li> <code></code>\u00a0LastNodeError </li> <li> <code></code>\u00a0LoadingError </li> <li> <code></code>\u00a0NameResolutionError </li> <li> <code></code>\u00a0RootNodeError </li> <li> <code></code>\u00a0UnhandledEditableModuleError </li> <li> <code></code>\u00a0UnimportableModuleError </li> </ul> </li> </ul>"},{"location":"reference/api/exceptions/#griffe.LoadingError","title":"LoadingError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.LoadingError[LoadingError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.LoadingError\n                \n\n\n              click griffe.LoadingError href \"\" \"griffe.LoadingError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>The base exception for all Griffe errors.</p> Raised by: <ul> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0load </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.NameResolutionError","title":"NameResolutionError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.NameResolutionError[NameResolutionError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.NameResolutionError\n                \n\n\n              click griffe.NameResolutionError href \"\" \"griffe.NameResolutionError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception for names that cannot be resolved in a object scope.</p> Raised by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <code></code>\u00a0resolve </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0resolve </li> <li> <code></code>\u00a0Class <code></code>\u00a0resolve </li> <li> <code></code>\u00a0Function <code></code>\u00a0resolve </li> <li> <code></code>\u00a0Module <code></code>\u00a0resolve </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0resolve </li> </ul> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.UnhandledEditableModuleError","title":"UnhandledEditableModuleError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.UnhandledEditableModuleError[UnhandledEditableModuleError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.UnhandledEditableModuleError\n                \n\n\n              click griffe.UnhandledEditableModuleError href \"\" \"griffe.UnhandledEditableModuleError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception for unhandled editables modules, when searching modules.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.UnimportableModuleError","title":"UnimportableModuleError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.UnimportableModuleError[UnimportableModuleError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.UnimportableModuleError\n                \n\n\n              click griffe.UnimportableModuleError href \"\" \"griffe.UnimportableModuleError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception for modules that cannot be imported.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.AliasResolutionError","title":"AliasResolutionError","text":"<pre><code>AliasResolutionError(alias: Alias)\n</code></pre> <p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.AliasResolutionError[AliasResolutionError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.AliasResolutionError\n                \n\n\n              click griffe.AliasResolutionError href \"\" \"griffe.AliasResolutionError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception for alias that cannot be resolved.</p> <p>Parameters:</p> Raised by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0resolve_target </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs <ul> <li> Loading APIs Alias resolution Modules collection </li> <li> Navigating APIs Aliases </li> </ul> </li> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul> <p>Attributes:</p> <ul> <li> <code>alias</code>               (<code>Alias</code>)           \u2013            <p>The alias that triggered the error.</p> </li> </ul>"},{"location":"reference/api/exceptions/#griffe.AliasResolutionError(alias)","title":"<code>alias</code>","text":"(<code>Alias</code>)           \u2013            <p>The alias that could not be resolved.</p>"},{"location":"reference/api/exceptions/#griffe.AliasResolutionError.alias","title":"alias  <code>instance-attribute</code>","text":"<pre><code>alias: Alias = alias\n</code></pre> <p>The alias that triggered the error.</p>"},{"location":"reference/api/exceptions/#griffe.CyclicAliasError","title":"CyclicAliasError","text":"<pre><code>CyclicAliasError(chain: list[str])\n</code></pre> <p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.CyclicAliasError[CyclicAliasError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.CyclicAliasError\n                \n\n\n              click griffe.CyclicAliasError href \"\" \"griffe.CyclicAliasError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised when a cycle is detected in aliases.</p> <p>Parameters:</p> Raised by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0resolve_target </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases Alias chains </li> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul> <p>Attributes:</p> <ul> <li> <code>chain</code>               (<code>list[str]</code>)           \u2013            <p>The chain of aliases that created the cycle.</p> </li> </ul>"},{"location":"reference/api/exceptions/#griffe.CyclicAliasError(chain)","title":"<code>chain</code>","text":"(<code>list[str]</code>)           \u2013            <p>The cyclic chain of items (such as target path).</p>"},{"location":"reference/api/exceptions/#griffe.CyclicAliasError.chain","title":"chain  <code>instance-attribute</code>","text":"<pre><code>chain: list[str] = chain\n</code></pre> <p>The chain of aliases that created the cycle.</p>"},{"location":"reference/api/exceptions/#griffe.LastNodeError","title":"LastNodeError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.LastNodeError[LastNodeError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.LastNodeError\n                \n\n\n              click griffe.LastNodeError href \"\" \"griffe.LastNodeError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised when trying to access a next or previous node.</p> Raised by: <ul> <li> Reference Python API Agents <ul> <li> <code></code>\u00a0ast_first_child </li> <li> <code></code>\u00a0ast_last_child </li> <li> <code></code>\u00a0ast_next </li> <li> <code></code>\u00a0ast_previous </li> </ul> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.RootNodeError","title":"RootNodeError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.RootNodeError[RootNodeError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.RootNodeError\n                \n\n\n              click griffe.RootNodeError href \"\" \"griffe.RootNodeError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised when trying to use siblings properties on a root node.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.BuiltinModuleError","title":"BuiltinModuleError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.BuiltinModuleError[BuiltinModuleError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.BuiltinModuleError\n                \n\n\n              click griffe.BuiltinModuleError href \"\" \"griffe.BuiltinModuleError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised when trying to access the filepath of a builtin module.</p> Raised by: <ul> <li> Reference Python API Models <code></code>\u00a0Module <code></code>\u00a0filepath </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.ExtensionError","title":"ExtensionError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.ExtensionError[ExtensionError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.ExtensionError\n                \n\n\n              click griffe.ExtensionError href \"\" \"griffe.ExtensionError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Base class for errors raised by extensions.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul> Subclassed by: <ul> <li> Reference Python API Exceptions <code></code>\u00a0ExtensionNotLoadedError </li> </ul>"},{"location":"reference/api/exceptions/#griffe.ExtensionNotLoadedError","title":"ExtensionNotLoadedError","text":"<p>               Bases: <code>ExtensionError</code></p> <pre><code>\n              flowchart TD\n              griffe.ExtensionNotLoadedError[ExtensionNotLoadedError]\n              _griffe.exceptions.ExtensionError[ExtensionError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.ExtensionError --&gt; griffe.ExtensionNotLoadedError\n                                _griffe.exceptions.GriffeError --&gt; _griffe.exceptions.ExtensionError\n                \n\n\n\n              click griffe.ExtensionNotLoadedError href \"\" \"griffe.ExtensionNotLoadedError\"\n              click _griffe.exceptions.ExtensionError href \"\" \"_griffe.exceptions.ExtensionError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised when an extension could not be loaded.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/exceptions/#griffe.GitError","title":"GitError","text":"<p>               Bases: <code>GriffeError</code></p> <pre><code>\n              flowchart TD\n              griffe.GitError[GitError]\n              _griffe.exceptions.GriffeError[GriffeError]\n\n                              _griffe.exceptions.GriffeError --&gt; griffe.GitError\n                \n\n\n              click griffe.GitError href \"\" \"griffe.GitError\"\n              click _griffe.exceptions.GriffeError href \"\" \"_griffe.exceptions.GriffeError\"\n            </code></pre> <p>Exception raised for errors related to Git.</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Exceptions </li> </ul>"},{"location":"reference/api/expressions/","title":"Expressions","text":""},{"location":"reference/api/expressions/#helpers","title":"Helpers","text":""},{"location":"reference/api/expressions/#griffe.get_annotation","title":"get_annotation  <code>module-attribute</code>","text":"<pre><code>get_annotation = partial(get_expression, parse_strings=None)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.get_base_class","title":"get_base_class  <code>module-attribute</code>","text":"<pre><code>get_base_class = partial(\n    get_expression, parse_strings=False\n)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.get_condition","title":"get_condition  <code>module-attribute</code>","text":"<pre><code>get_condition = partial(get_expression, parse_strings=False)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.get_expression","title":"get_expression","text":"<pre><code>get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None,\n) -&gt; Expr | None\n</code></pre> <p>Build an expression from an AST.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Expr | None</code>           \u2013            <p>A string or resovable name or expression.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.get_expression(node)","title":"<code>node</code>","text":"(<code>AST | None</code>)           \u2013            <p>The annotation node.</p>"},{"location":"reference/api/expressions/#griffe.get_expression(parent)","title":"<code>parent</code>","text":"(<code>Module | Class</code>)           \u2013            <p>The parent used to resolve the name.</p>"},{"location":"reference/api/expressions/#griffe.get_expression(parse_strings)","title":"<code>parse_strings</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try and parse strings as type annotations.</p>"},{"location":"reference/api/expressions/#griffe.safe_get_annotation","title":"safe_get_annotation  <code>module-attribute</code>","text":"<pre><code>safe_get_annotation = partial(\n    safe_get_expression,\n    parse_strings=None,\n    msg_format=_msg_format % \"annotation\",\n)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.safe_get_base_class","title":"safe_get_base_class  <code>module-attribute</code>","text":"<pre><code>safe_get_base_class = partial(\n    safe_get_expression,\n    parse_strings=False,\n    msg_format=_msg_format % \"base class\",\n)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.safe_get_condition","title":"safe_get_condition  <code>module-attribute</code>","text":"<pre><code>safe_get_condition = partial(\n    safe_get_expression,\n    parse_strings=False,\n    msg_format=_msg_format % \"condition\",\n)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.safe_get_expression","title":"safe_get_expression","text":"<pre><code>safe_get_expression(\n    node: AST | None,\n    parent: Module | Class,\n    *,\n    parse_strings: bool | None = None,\n    log_level: LogLevel | None = error,\n    msg_format: str = \"{path}:{lineno}: Failed to get expression from {node_class}: {error}\",\n) -&gt; Expr | None\n</code></pre> <p>Safely (no exception) build a resolvable annotation.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Expr | None</code>           \u2013            <p>A string or resovable name or expression.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul>"},{"location":"reference/api/expressions/#griffe.safe_get_expression(node)","title":"<code>node</code>","text":"(<code>AST | None</code>)           \u2013            <p>The annotation node.</p>"},{"location":"reference/api/expressions/#griffe.safe_get_expression(parent)","title":"<code>parent</code>","text":"(<code>Module | Class</code>)           \u2013            <p>The parent used to resolve the name.</p>"},{"location":"reference/api/expressions/#griffe.safe_get_expression(parse_strings)","title":"<code>parse_strings</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try and parse strings as type annotations.</p>"},{"location":"reference/api/expressions/#griffe.safe_get_expression(log_level)","title":"<code>log_level</code>","text":"(<code>LogLevel | None</code>, default:                   <code>error</code> )           \u2013            <p>Log level to use to log a message. None to disable logging.</p>"},{"location":"reference/api/expressions/#griffe.safe_get_expression(msg_format)","title":"<code>msg_format</code>","text":"(<code>str</code>, default:                   <code>'{path}:{lineno}: Failed to get expression from {node_class}: {error}'</code> )           \u2013            <p>A format string for the log message. Available placeholders: path, lineno, node, error.</p>"},{"location":"reference/api/expressions/#expression-nodes","title":"Expression nodes","text":""},{"location":"reference/api/expressions/#griffe.Expr","title":"Expr  <code>dataclass</code>","text":"<pre><code>Expr()\n</code></pre> <p>Base class for expressions.</p> Referenced by: <ul> <li> Changelog 0.33.0 - 2023-08-16 Breaking Changes </li> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields <ul> <li> Attributes </li> <li> Classes </li> <li> Functions </li> </ul> </li> <li> Reference <code></code>\u00a0griffe Expressions </li> </ul> Returned by: <ul> <li> Reference Python API Expressions <ul> <li> <code></code>\u00a0Expr <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprAttribute <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprBinOp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprBoolOp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprCall <ul> <li> <code></code>\u00a0function </li> <li> <code></code>\u00a0modernize </li> </ul> </li> <li> <code></code>\u00a0ExprCompare <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprComprehension <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprConstant <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprDict <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprDictComp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprExtSlice <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprFormatted <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprGeneratorExp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprIfExp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprJoinedStr <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprKeyword <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprLambda <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprList <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprListComp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprName <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprNamedExpr <ul> <li> <code></code>\u00a0target </li> <li> <code></code>\u00a0modernize </li> </ul> </li> <li> <code></code>\u00a0ExprParameter <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprSet <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprSetComp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprSlice <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprSubscript <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprTuple <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprUnaryOp <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprVarKeyword <ul> <li> <code></code>\u00a0value </li> <li> <code></code>\u00a0modernize </li> </ul> </li> <li> <code></code>\u00a0ExprVarPositional <ul> <li> <code></code>\u00a0value </li> <li> <code></code>\u00a0modernize </li> </ul> </li> <li> <code></code>\u00a0ExprYield <code></code>\u00a0modernize </li> <li> <code></code>\u00a0ExprYieldFrom <code></code>\u00a0modernize </li> </ul> </li> </ul> Subclassed by: <ul> <li> Reference Python API Expressions <ul> <li> <code></code>\u00a0ExprAttribute </li> <li> <code></code>\u00a0ExprBinOp </li> <li> <code></code>\u00a0ExprBoolOp </li> <li> <code></code>\u00a0ExprCall </li> <li> <code></code>\u00a0ExprCompare </li> <li> <code></code>\u00a0ExprComprehension </li> <li> <code></code>\u00a0ExprConstant </li> <li> <code></code>\u00a0ExprDict </li> <li> <code></code>\u00a0ExprDictComp </li> <li> <code></code>\u00a0ExprExtSlice </li> <li> <code></code>\u00a0ExprFormatted </li> <li> <code></code>\u00a0ExprGeneratorExp </li> <li> <code></code>\u00a0ExprIfExp </li> <li> <code></code>\u00a0ExprJoinedStr </li> <li> <code></code>\u00a0ExprKeyword </li> <li> <code></code>\u00a0ExprLambda </li> <li> <code></code>\u00a0ExprList </li> <li> <code></code>\u00a0ExprListComp </li> <li> <code></code>\u00a0ExprName </li> <li> <code></code>\u00a0ExprNamedExpr </li> <li> <code></code>\u00a0ExprParameter </li> <li> <code></code>\u00a0ExprSet </li> <li> <code></code>\u00a0ExprSetComp </li> <li> <code></code>\u00a0ExprSlice </li> <li> <code></code>\u00a0ExprSubscript </li> <li> <code></code>\u00a0ExprTuple </li> <li> <code></code>\u00a0ExprUnaryOp </li> <li> <code></code>\u00a0ExprVarKeyword </li> <li> <code></code>\u00a0ExprVarPositional </li> <li> <code></code>\u00a0ExprYield </li> <li> <code></code>\u00a0ExprYieldFrom </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API Expressions <ul> <li> <code></code>\u00a0ExprCall </li> <li> <code></code>\u00a0ExprNamedExpr </li> <li> <code></code>\u00a0ExprVarKeyword </li> <li> <code></code>\u00a0ExprVarPositional </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.Expr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.Expr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.Expr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.Expr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.Expr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.Expr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.Expr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.Expr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.Expr.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.Expr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.Expr.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.Expr.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.Expr.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.Expr.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprAttribute","title":"ExprAttribute  <code>dataclass</code>","text":"<pre><code>ExprAttribute(values: list[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprAttribute[ExprAttribute]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprAttribute\n                \n\n\n              click griffe.ExprAttribute href \"\" \"griffe.ExprAttribute\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Attributes like <code>a.b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>append</code>             \u2013              <p>Append a name to this attribute.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The canonical path of this attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>first</code>               (<code>str | Expr</code>)           \u2013            <p>The first part of this attribute (on the left).</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>last</code>               (<code>ExprName</code>)           \u2013            <p>The last part of this attribute (on the right).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path of this attribute.</p> </li> <li> <code>values</code>               (<code>list[str | Expr]</code>)           \u2013            <p>The different parts of the dotted chain.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical path of this attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.first","title":"first  <code>property</code>","text":"<pre><code>first: str | Expr\n</code></pre> <p>The first part of this attribute (on the left).</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.last","title":"last  <code>property</code>","text":"<pre><code>last: ExprName\n</code></pre> <p>The last part of this attribute (on the right).</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The path of this attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: list[str | Expr]\n</code></pre> <p>The different parts of the dotted chain.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.append","title":"append","text":"<pre><code>append(value: ExprName) -&gt; None\n</code></pre> <p>Append a name to this attribute.</p> <p>Parameters:</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.append(value)","title":"<code>value</code>","text":"(<code>ExprName</code>)           \u2013            <p>The expression name to append.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprAttribute.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; ExprName | ExprAttribute\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBinOp","title":"ExprBinOp  <code>dataclass</code>","text":"<pre><code>ExprBinOp(\n    left: str | Expr, operator: str, right: str | Expr\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprBinOp[ExprBinOp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprBinOp\n                \n\n\n              click griffe.ExprBinOp href \"\" \"griffe.ExprBinOp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Binary operations like <code>a + b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>left</code>               (<code>str | Expr</code>)           \u2013            <p>Left part.</p> </li> <li> <code>operator</code>               (<code>str</code>)           \u2013            <p>Binary operator.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>right</code>               (<code>str | Expr</code>)           \u2013            <p>Right part.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: str | Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Binary operator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right: str | Expr\n</code></pre> <p>Right part.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprBinOp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp","title":"ExprBoolOp  <code>dataclass</code>","text":"<pre><code>ExprBoolOp(operator: str, values: Sequence[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprBoolOp[ExprBoolOp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprBoolOp\n                \n\n\n              click griffe.ExprBoolOp href \"\" \"griffe.ExprBoolOp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Boolean operations like <code>a or b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>operator</code>               (<code>str</code>)           \u2013            <p>Boolean operator.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>values</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Operands.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Boolean operator.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Operands.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprBoolOp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCall","title":"ExprCall  <code>dataclass</code>","text":"<pre><code>ExprCall(function: Expr, arguments: Sequence[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprCall[ExprCall]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprCall\n                \n\n\n              click griffe.ExprCall href \"\" \"griffe.ExprCall\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Calls like <code>f()</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>arguments</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Passed arguments.</p> </li> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The canonical path of this subscript's left part.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>function</code>               (<code>Expr</code>)           \u2013            <p>Function called.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCall.arguments","title":"arguments  <code>instance-attribute</code>","text":"<pre><code>arguments: Sequence[str | Expr]\n</code></pre> <p>Passed arguments.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical path of this subscript's left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function: Expr\n</code></pre> <p>Function called.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCall.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCall.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprCall.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCompare","title":"ExprCompare  <code>dataclass</code>","text":"<pre><code>ExprCompare(\n    left: str | Expr,\n    operators: Sequence[str],\n    comparators: Sequence[str | Expr],\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprCompare[ExprCompare]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprCompare\n                \n\n\n              click griffe.ExprCompare href \"\" \"griffe.ExprCompare\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Comparisons like <code>a &gt; b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>comparators</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Things compared.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>left</code>               (<code>str | Expr</code>)           \u2013            <p>Left part.</p> </li> <li> <code>operators</code>               (<code>Sequence[str]</code>)           \u2013            <p>Comparison operators.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCompare.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.comparators","title":"comparators  <code>instance-attribute</code>","text":"<pre><code>comparators: Sequence[str | Expr]\n</code></pre> <p>Things compared.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: str | Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.operators","title":"operators  <code>instance-attribute</code>","text":"<pre><code>operators: Sequence[str]\n</code></pre> <p>Comparison operators.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCompare.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprCompare.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprCompare.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprComprehension","title":"ExprComprehension  <code>dataclass</code>","text":"<pre><code>ExprComprehension(\n    target: str | Expr,\n    iterable: str | Expr,\n    conditions: Sequence[str | Expr],\n    is_async: bool = False,\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprComprehension[ExprComprehension]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprComprehension\n                \n\n\n              click griffe.ExprComprehension href \"\" \"griffe.ExprComprehension\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Comprehensions like <code>a for b in c if d</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>conditions</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Conditions to include the target in the result.</p> </li> <li> <code>is_async</code>               (<code>bool</code>)           \u2013            <p>Async comprehension or not.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>iterable</code>               (<code>str | Expr</code>)           \u2013            <p>Value iterated on.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>target</code>               (<code>str | Expr</code>)           \u2013            <p>Comprehension target (value added to the result).</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.conditions","title":"conditions  <code>instance-attribute</code>","text":"<pre><code>conditions: Sequence[str | Expr]\n</code></pre> <p>Conditions to include the target in the result.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.is_async","title":"is_async  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_async: bool = False\n</code></pre> <p>Async comprehension or not.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.iterable","title":"iterable  <code>instance-attribute</code>","text":"<pre><code>iterable: str | Expr\n</code></pre> <p>Value iterated on.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.target","title":"target  <code>instance-attribute</code>","text":"<pre><code>target: str | Expr\n</code></pre> <p>Comprehension target (value added to the result).</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprComprehension.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprConstant","title":"ExprConstant  <code>dataclass</code>","text":"<pre><code>ExprConstant(value: str)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprConstant[ExprConstant]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprConstant\n                \n\n\n              click griffe.ExprConstant href \"\" \"griffe.ExprConstant\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Constants like <code>\"a\"</code> or <code>1</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Constant value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprConstant.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Constant value.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprConstant.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprConstant.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprConstant.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDict","title":"ExprDict  <code>dataclass</code>","text":"<pre><code>ExprDict(\n    keys: Sequence[str | Expr | None],\n    values: Sequence[str | Expr],\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprDict[ExprDict]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprDict\n                \n\n\n              click griffe.ExprDict href \"\" \"griffe.ExprDict\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Dictionaries like <code>{\"a\": 0}</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>keys</code>               (<code>Sequence[str | Expr | None]</code>)           \u2013            <p>Dict keys.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>values</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Dict values.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDict.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.keys","title":"keys  <code>instance-attribute</code>","text":"<pre><code>keys: Sequence[str | Expr | None]\n</code></pre> <p>Dict keys.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Dict values.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDict.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDict.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprDict.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDictComp","title":"ExprDictComp  <code>dataclass</code>","text":"<pre><code>ExprDictComp(\n    key: str | Expr,\n    value: str | Expr,\n    generators: Sequence[Expr],\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprDictComp[ExprDictComp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprDictComp\n                \n\n\n              click griffe.ExprDictComp href \"\" \"griffe.ExprDictComp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Dict comprehensions like <code>{k: v for k, v in a}</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>generators</code>               (<code>Sequence[Expr]</code>)           \u2013            <p>Generators iterated on.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>key</code>               (<code>str | Expr</code>)           \u2013            <p>Target key.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Target value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: str | Expr\n</code></pre> <p>Target key.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprDictComp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice","title":"ExprExtSlice  <code>dataclass</code>","text":"<pre><code>ExprExtSlice(dims: Sequence[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprExtSlice[ExprExtSlice]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprExtSlice\n                \n\n\n              click griffe.ExprExtSlice href \"\" \"griffe.ExprExtSlice\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Extended slice like <code>a[x:y, z]</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>dims</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Dims.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.dims","title":"dims  <code>instance-attribute</code>","text":"<pre><code>dims: Sequence[str | Expr]\n</code></pre> <p>Dims.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprExtSlice.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprFormatted","title":"ExprFormatted  <code>dataclass</code>","text":"<pre><code>ExprFormatted(value: str | Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprFormatted[ExprFormatted]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprFormatted\n                \n\n\n              click griffe.ExprFormatted href \"\" \"griffe.ExprFormatted\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Formatted string like <code>{1 + 1}</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Formatted value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Formatted value.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprFormatted.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp","title":"ExprGeneratorExp  <code>dataclass</code>","text":"<pre><code>ExprGeneratorExp(\n    element: str | Expr, generators: Sequence[Expr]\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprGeneratorExp[ExprGeneratorExp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprGeneratorExp\n                \n\n\n              click griffe.ExprGeneratorExp href \"\" \"griffe.ExprGeneratorExp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Generator expressions like <code>a for b in c for d in e</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>element</code>               (<code>str | Expr</code>)           \u2013            <p>Yielded element.</p> </li> <li> <code>generators</code>               (<code>Sequence[Expr]</code>)           \u2013            <p>Generators iterated on.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Yielded element.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprGeneratorExp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprIfExp","title":"ExprIfExp  <code>dataclass</code>","text":"<pre><code>ExprIfExp(\n    body: str | Expr, test: str | Expr, orelse: str | Expr\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprIfExp[ExprIfExp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprIfExp\n                \n\n\n              click griffe.ExprIfExp href \"\" \"griffe.ExprIfExp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Conditions like <code>a if b else c</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>body</code>               (<code>str | Expr</code>)           \u2013            <p>Value if test.</p> </li> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>orelse</code>               (<code>str | Expr</code>)           \u2013            <p>Other expression.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>test</code>               (<code>str | Expr</code>)           \u2013            <p>Condition.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str | Expr\n</code></pre> <p>Value if test.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.orelse","title":"orelse  <code>instance-attribute</code>","text":"<pre><code>orelse: str | Expr\n</code></pre> <p>Other expression.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.test","title":"test  <code>instance-attribute</code>","text":"<pre><code>test: str | Expr\n</code></pre> <p>Condition.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprIfExp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr","title":"ExprJoinedStr  <code>dataclass</code>","text":"<pre><code>ExprJoinedStr(values: Sequence[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprJoinedStr[ExprJoinedStr]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprJoinedStr\n                \n\n\n              click griffe.ExprJoinedStr href \"\" \"griffe.ExprJoinedStr\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Joined strings like <code>f\"a {b} c\"</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>values</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Joined values.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: Sequence[str | Expr]\n</code></pre> <p>Joined values.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprJoinedStr.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprKeyword","title":"ExprKeyword  <code>dataclass</code>","text":"<pre><code>ExprKeyword(\n    name: str,\n    value: str | Expr,\n    function: Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprKeyword[ExprKeyword]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprKeyword\n                \n\n\n              click griffe.ExprKeyword href \"\" \"griffe.ExprKeyword\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Keyword arguments like <code>a=b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed keyword.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>function</code>               (<code>Expr | None</code>)           \u2013            <p>Expression referencing the function called with this parameter.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed keyword.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.function","title":"function  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function: Expr | None = None\n</code></pre> <p>Expression referencing the function called with this parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprKeyword.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional","title":"ExprVarPositional  <code>dataclass</code>","text":"<pre><code>ExprVarPositional(value: Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprVarPositional[ExprVarPositional]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprVarPositional\n                \n\n\n              click griffe.ExprVarPositional href \"\" \"griffe.ExprVarPositional\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Variadic positional parameters like <code>*args</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>Expr</code>)           \u2013            <p>Starred value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Expr\n</code></pre> <p>Starred value.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarPositional.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword","title":"ExprVarKeyword  <code>dataclass</code>","text":"<pre><code>ExprVarKeyword(value: Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprVarKeyword[ExprVarKeyword]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprVarKeyword\n                \n\n\n              click griffe.ExprVarKeyword href \"\" \"griffe.ExprVarKeyword\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Variadic keyword parameters like <code>**kwargs</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>Expr</code>)           \u2013            <p>Double-starred value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Expr\n</code></pre> <p>Double-starred value.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprVarKeyword.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprLambda","title":"ExprLambda  <code>dataclass</code>","text":"<pre><code>ExprLambda(\n    parameters: Sequence[ExprParameter], body: str | Expr\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprLambda[ExprLambda]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprLambda\n                \n\n\n              click griffe.ExprLambda href \"\" \"griffe.ExprLambda\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Lambda expressions like <code>lambda a: a.b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>body</code>               (<code>str | Expr</code>)           \u2013            <p>Lambda's body.</p> </li> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>parameters</code>               (<code>Sequence[ExprParameter]</code>)           \u2013            <p>Lambda's parameters.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprLambda.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str | Expr\n</code></pre> <p>Lambda's body.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Sequence[ExprParameter]\n</code></pre> <p>Lambda's parameters.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprLambda.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprLambda.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprLambda.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprList","title":"ExprList  <code>dataclass</code>","text":"<pre><code>ExprList(elements: Sequence[Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprList[ExprList]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprList\n                \n\n\n              click griffe.ExprList href \"\" \"griffe.ExprList\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Lists like <code>[0, 1, 2]</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>elements</code>               (<code>Sequence[Expr]</code>)           \u2013            <p>List elements.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprList.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[Expr]\n</code></pre> <p>List elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprList.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprList.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprList.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprList.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprListComp","title":"ExprListComp  <code>dataclass</code>","text":"<pre><code>ExprListComp(\n    element: str | Expr, generators: Sequence[Expr]\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprListComp[ExprListComp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprListComp\n                \n\n\n              click griffe.ExprListComp href \"\" \"griffe.ExprListComp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>List comprehensions like <code>[a for b in c]</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>element</code>               (<code>str | Expr</code>)           \u2013            <p>Target value.</p> </li> <li> <code>generators</code>               (<code>Sequence[Expr]</code>)           \u2013            <p>Generators iterated on.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprListComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprListComp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprListComp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprListComp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprName","title":"ExprName  <code>dataclass</code>","text":"<pre><code>ExprName(\n    name: str,\n    parent: str | ExprName | Module | Class | None = None,\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprName[ExprName]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprName\n                \n\n\n              click griffe.ExprName href \"\" \"griffe.ExprName\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>This class represents a Python object identified by a name in a given scope.</p> Referenced by: <ul> <li> Changelog 0.33.0 - 2023-08-16 Breaking Changes </li> <li> Reference Python API <ul> <li> Agents <code></code>\u00a0ExportedName </li> <li> Expressions <ul> <li> <code></code>\u00a0Expr <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprAttribute <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprBinOp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprBoolOp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprCall <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprCompare <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprComprehension <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprConstant <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprDict <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprDictComp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprExtSlice <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprFormatted <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprGeneratorExp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprIfExp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprJoinedStr <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprKeyword <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprLambda <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprList <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprListComp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprName <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprNamedExpr <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprParameter <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprSet <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprSetComp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprSlice <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprSubscript <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprTuple <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprUnaryOp <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprVarKeyword <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprVarPositional <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprYield <code></code>\u00a0iterate </li> <li> <code></code>\u00a0ExprYieldFrom <code></code>\u00a0iterate </li> </ul> </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Expressions <ul> <li> <code></code>\u00a0ExprAttribute <code></code>\u00a0last </li> <li> <code></code>\u00a0ExprName <code></code>\u00a0modernize </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API Expressions <code></code>\u00a0ExprAttribute <code></code>\u00a0append </li> </ul> <p>Methods:</p> <ul> <li> <code>__eq__</code>             \u2013              <p>Two name expressions are equal if they have the same <code>name</code> value (<code>parent</code> is ignored).</p> </li> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The canonical name (resolved one, not alias name).</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_enum_class</code>               (<code>bool</code>)           \u2013            <p>Whether this name resolves to an enumeration class.</p> </li> <li> <code>is_enum_instance</code>               (<code>bool</code>)           \u2013            <p>Whether this name resolves to an enumeration instance.</p> </li> <li> <code>is_enum_value</code>               (<code>bool</code>)           \u2013            <p>Whether this name resolves to an enumeration value.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Actual name.</p> </li> <li> <code>parent</code>               (<code>str | ExprName | Module | Class | None</code>)           \u2013            <p>Parent (for resolution in its scope).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The full, resolved name.</p> </li> <li> <code>resolved</code>               (<code>Module | Class | None</code>)           \u2013            <p>The resolved object this name refers to.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprName.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical name (resolved one, not alias name).</p>"},{"location":"reference/api/expressions/#griffe.ExprName.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_enum_class","title":"is_enum_class  <code>property</code>","text":"<pre><code>is_enum_class: bool\n</code></pre> <p>Whether this name resolves to an enumeration class.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_enum_instance","title":"is_enum_instance  <code>property</code>","text":"<pre><code>is_enum_instance: bool\n</code></pre> <p>Whether this name resolves to an enumeration instance.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_enum_value","title":"is_enum_value  <code>property</code>","text":"<pre><code>is_enum_value: bool\n</code></pre> <p>Whether this name resolves to an enumeration value.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Actual name.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.parent","title":"parent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent: str | ExprName | Module | Class | None = None\n</code></pre> <p>Parent (for resolution in its scope).</p>"},{"location":"reference/api/expressions/#griffe.ExprName.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The full, resolved name.</p> <p>If it was given when creating the name, return that. If a callable was given, call it and return its result. It the name cannot be resolved, return the source.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.resolved","title":"resolved  <code>property</code>","text":"<pre><code>resolved: Module | Class | None\n</code></pre> <p>The resolved object this name refers to.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Two name expressions are equal if they have the same <code>name</code> value (<code>parent</code> is ignored).</p>"},{"location":"reference/api/expressions/#griffe.ExprName.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprName.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprName.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[ExprName]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprName.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprName.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; ExprName\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr","title":"ExprNamedExpr  <code>dataclass</code>","text":"<pre><code>ExprNamedExpr(target: Expr, value: str | Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprNamedExpr[ExprNamedExpr]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprNamedExpr\n                \n\n\n              click griffe.ExprNamedExpr href \"\" \"griffe.ExprNamedExpr\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Named/assignment expressions like <code>a := b</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>target</code>               (<code>Expr</code>)           \u2013            <p>Target name.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.target","title":"target  <code>instance-attribute</code>","text":"<pre><code>target: Expr\n</code></pre> <p>Target name.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprNamedExpr.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprParameter","title":"ExprParameter  <code>dataclass</code>","text":"<pre><code>ExprParameter(\n    name: str,\n    kind: ParameterKind = positional_or_keyword,\n    annotation: Expr | None = None,\n    default: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprParameter[ExprParameter]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprParameter\n                \n\n\n              click griffe.ExprParameter href \"\" \"griffe.ExprParameter\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Parameters in function signatures like <code>a: int = 0</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>Expr | None</code>)           \u2013            <p>Parameter type.</p> </li> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>default</code>               (<code>str | Expr | None</code>)           \u2013            <p>Parameter default.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>kind</code>               (<code>ParameterKind</code>)           \u2013            <p>Parameter kind.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Parameter name.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprParameter.annotation","title":"annotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>annotation: Expr | None = None\n</code></pre> <p>Parameter type.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: str | Expr | None = None\n</code></pre> <p>Parameter default.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: ParameterKind = positional_or_keyword\n</code></pre> <p>Parameter kind.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Parameter name.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprParameter.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprParameter.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprParameter.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSet","title":"ExprSet  <code>dataclass</code>","text":"<pre><code>ExprSet(elements: Sequence[str | Expr])\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprSet[ExprSet]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprSet\n                \n\n\n              click griffe.ExprSet href \"\" \"griffe.ExprSet\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Sets like <code>{0, 1, 2}</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>elements</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Set elements.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSet.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[str | Expr]\n</code></pre> <p>Set elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSet.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSet.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprSet.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSetComp","title":"ExprSetComp  <code>dataclass</code>","text":"<pre><code>ExprSetComp(\n    element: str | Expr, generators: Sequence[Expr]\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprSetComp[ExprSetComp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprSetComp\n                \n\n\n              click griffe.ExprSetComp href \"\" \"griffe.ExprSetComp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Set comprehensions like <code>{a for b in c}</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>element</code>               (<code>str | Expr</code>)           \u2013            <p>Target value.</p> </li> <li> <code>generators</code>               (<code>Sequence[Expr]</code>)           \u2013            <p>Generators iterated on.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: str | Expr\n</code></pre> <p>Target value.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.generators","title":"generators  <code>instance-attribute</code>","text":"<pre><code>generators: Sequence[Expr]\n</code></pre> <p>Generators iterated on.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprSetComp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSlice","title":"ExprSlice  <code>dataclass</code>","text":"<pre><code>ExprSlice(\n    lower: str | Expr | None = None,\n    upper: str | Expr | None = None,\n    step: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprSlice[ExprSlice]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprSlice\n                \n\n\n              click griffe.ExprSlice href \"\" \"griffe.ExprSlice\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Slices like <code>[a:b:c]</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>lower</code>               (<code>str | Expr | None</code>)           \u2013            <p>Lower bound.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>step</code>               (<code>str | Expr | None</code>)           \u2013            <p>Iteration step.</p> </li> <li> <code>upper</code>               (<code>str | Expr | None</code>)           \u2013            <p>Upper bound.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSlice.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.lower","title":"lower  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lower: str | Expr | None = None\n</code></pre> <p>Lower bound.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.step","title":"step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step: str | Expr | None = None\n</code></pre> <p>Iteration step.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.upper","title":"upper  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>upper: str | Expr | None = None\n</code></pre> <p>Upper bound.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSlice.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSlice.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprSlice.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSubscript","title":"ExprSubscript  <code>dataclass</code>","text":"<pre><code>ExprSubscript(left: str | Expr, slice: str | Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprSubscript[ExprSubscript]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprSubscript\n                \n\n\n              click griffe.ExprSubscript href \"\" \"griffe.ExprSubscript\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Subscripts like <code>a[b]</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The canonical path of this subscript's left part.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>left</code>               (<code>str | Expr</code>)           \u2013            <p>Left part.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path of this subscript's left part.</p> </li> <li> <code>slice</code>               (<code>str | Expr</code>)           \u2013            <p>Slice part.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The canonical path of this subscript's left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left: str | Expr\n</code></pre> <p>Left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The path of this subscript's left part.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.slice","title":"slice  <code>instance-attribute</code>","text":"<pre><code>slice: str | Expr\n</code></pre> <p>Slice part.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprSubscript.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; ExprBinOp | ExprSubscript\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprTuple","title":"ExprTuple  <code>dataclass</code>","text":"<pre><code>ExprTuple(\n    elements: Sequence[str | Expr], implicit: bool = False\n)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprTuple[ExprTuple]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprTuple\n                \n\n\n              click griffe.ExprTuple href \"\" \"griffe.ExprTuple\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Tuples like <code>(0, 1, 2)</code>.</p> Returned by: <ul> <li> Reference Python API Expressions <code></code>\u00a0ExprTuple <code></code>\u00a0modernize </li> </ul> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>elements</code>               (<code>Sequence[str | Expr]</code>)           \u2013            <p>Tuple elements.</p> </li> <li> <code>implicit</code>               (<code>bool</code>)           \u2013            <p>Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprTuple.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.elements","title":"elements  <code>instance-attribute</code>","text":"<pre><code>elements: Sequence[str | Expr]\n</code></pre> <p>Tuple elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit: bool = False\n</code></pre> <p>Whether the tuple is implicit (e.g. without parentheses in a subscript's slice).</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprTuple.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprTuple.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprTuple.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; ExprTuple\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp","title":"ExprUnaryOp  <code>dataclass</code>","text":"<pre><code>ExprUnaryOp(operator: str, value: str | Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprUnaryOp[ExprUnaryOp]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprUnaryOp\n                \n\n\n              click griffe.ExprUnaryOp href \"\" \"griffe.ExprUnaryOp\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Unary operations like <code>-1</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>operator</code>               (<code>str</code>)           \u2013            <p>Unary operator.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre> <p>Unary operator.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Value.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprUnaryOp.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYield","title":"ExprYield  <code>dataclass</code>","text":"<pre><code>ExprYield(value: str | Expr | None = None)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprYield[ExprYield]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprYield\n                \n\n\n              click griffe.ExprYield href \"\" \"griffe.ExprYield\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Yield statements like <code>yield a</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr | None</code>)           \u2013            <p>Yielded value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYield.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str | Expr | None = None\n</code></pre> <p>Yielded value.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYield.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYield.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprYield.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom","title":"ExprYieldFrom  <code>dataclass</code>","text":"<pre><code>ExprYieldFrom(value: str | Expr)\n</code></pre> <p>               Bases: <code>Expr</code></p> <pre><code>\n              flowchart TD\n              griffe.ExprYieldFrom[ExprYieldFrom]\n              _griffe.expressions.Expr[Expr]\n\n                              _griffe.expressions.Expr --&gt; griffe.ExprYieldFrom\n                \n\n\n              click griffe.ExprYieldFrom href \"\" \"griffe.ExprYieldFrom\"\n              click _griffe.expressions.Expr href \"\" \"_griffe.expressions.Expr\"\n            </code></pre> <p>Yield statements like <code>yield from a</code>.</p> <p>Methods:</p> <ul> <li> <code>__iter__</code>             \u2013              <p>Iterate on the expression syntax and elements.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return the expression as a dictionary.</p> </li> <li> <code>iterate</code>             \u2013              <p>Iterate on the expression elements.</p> </li> <li> <code>modernize</code>             \u2013              <p>Modernize the expression.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_name</code>               (<code>str</code>)           \u2013            <p>Name of the expressed name/attribute/parameter.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>classname</code>               (<code>str</code>)           \u2013            <p>The expression class name.</p> </li> <li> <code>is_classvar</code>               (<code>bool</code>)           \u2013            <p>Whether this attribute is annotated with <code>ClassVar</code>.</p> </li> <li> <code>is_generator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a generator.</p> </li> <li> <code>is_iterator</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is an iterator.</p> </li> <li> <code>is_tuple</code>               (<code>bool</code>)           \u2013            <p>Whether this expression is a tuple.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of the expressed name/attribute.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>Yielded-from value.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.canonical_name","title":"canonical_name  <code>property</code>","text":"<pre><code>canonical_name: str\n</code></pre> <p>Name of the expressed name/attribute/parameter.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.classname","title":"classname  <code>property</code>","text":"<pre><code>classname: str\n</code></pre> <p>The expression class name.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.is_classvar","title":"is_classvar  <code>property</code>","text":"<pre><code>is_classvar: bool\n</code></pre> <p>Whether this attribute is annotated with <code>ClassVar</code>.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.is_generator","title":"is_generator  <code>property</code>","text":"<pre><code>is_generator: bool\n</code></pre> <p>Whether this expression is a generator.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.is_iterator","title":"is_iterator  <code>property</code>","text":"<pre><code>is_iterator: bool\n</code></pre> <p>Whether this expression is an iterator.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.is_tuple","title":"is_tuple  <code>property</code>","text":"<pre><code>is_tuple: bool\n</code></pre> <p>Whether this expression is a tuple.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>Path of the expressed name/attribute.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr\n</code></pre> <p>Yielded-from value.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression syntax and elements.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return the expression as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options (none available yet).</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.iterate","title":"iterate","text":"<pre><code>iterate(*, flat: bool = True) -&gt; Iterator[str | Expr]\n</code></pre> <p>Iterate on the expression elements.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>Strings and names when flat, strings and expressions otherwise.</p> </li> </ul>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.iterate(flat)","title":"<code>flat</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Expressions are trees.</p> <p>When flat is false, this method iterates only on the first layer of the tree. To iterate on all the subparts of the expression, you have to do so recursively. It allows to handle each subpart specifically (for example subscripts, attribute, etc.), without them getting rendered as strings.</p> <p>On the contrary, when flat is true, the whole tree is flattened as a sequence of strings and instances of Names.</p>"},{"location":"reference/api/expressions/#griffe.ExprYieldFrom.modernize","title":"modernize","text":"<pre><code>modernize() -&gt; Expr\n</code></pre> <p>Modernize the expression.</p> <p>For example, use PEP 604 type unions <code>|</code> instead of <code>typing.Union</code>.</p> <p>Returns:</p> <ul> <li> <code>Expr</code>           \u2013            <p>A modernized expression.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Expressions Modernization </li> </ul>"},{"location":"reference/api/extensions/","title":"Extensions","text":""},{"location":"reference/api/extensions/#main-api","title":"Main API","text":""},{"location":"reference/api/extensions/#griffe.load_extensions","title":"load_extensions","text":"<pre><code>load_extensions(*exts: LoadableExtensionType) -&gt; Extensions\n</code></pre> <p>Load configured extensions.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Extensions</code>           \u2013            <p>An extensions container.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Extending APIs Using extensions <ul> <li> In MkDocs </li> <li> Programmatically </li> </ul> </li> <li> Reference <code></code>\u00a0griffe Extensions </li> </ul>"},{"location":"reference/api/extensions/#griffe.load_extensions(exts)","title":"<code>exts</code>","text":"(<code>LoadableExtensionType</code>, default:                   <code>()</code> )           \u2013            <p>Extensions with potential configuration options.</p>"},{"location":"reference/api/extensions/#griffe.Extension","title":"Extension","text":"<p>Base class for Griffe extensions.</p> Referenced by: <ul> <li> Changelog 0.32.0 - 2023-07-13 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Inspecting specific objects </li> </ul> </li> <li> Reference \u00a0griffe Extensions </li> </ul> Subclassed by: <ul> <li> Reference Python API Extensions \u00a0DataclassesExtension </li> </ul> Used by: <ul> <li> Reference Python API Extensions \u00a0Extensions </li> </ul> <p>Methods:</p> <ul> <li> <code>generic_inspect</code>             \u2013              <p>Extend the base generic inspection with extensions.</p> </li> <li> <code>generic_visit</code>             \u2013              <p>Visit children nodes.</p> </li> <li> <code>inspect</code>             \u2013              <p>Inspect a node.</p> </li> <li> <code>on_alias</code>             \u2013              <p>Run when an Alias has been created.</p> </li> <li> <code>on_attribute_instance</code>             \u2013              <p>Run when an Attribute has been created.</p> </li> <li> <code>on_attribute_node</code>             \u2013              <p>Run when visiting a new attribute node during static/dynamic analysis.</p> </li> <li> <code>on_class_instance</code>             \u2013              <p>Run when a Class has been created.</p> </li> <li> <code>on_class_members</code>             \u2013              <p>Run when members of a Class have been loaded.</p> </li> <li> <code>on_class_node</code>             \u2013              <p>Run when visiting a new class node during static/dynamic analysis.</p> </li> <li> <code>on_function_instance</code>             \u2013              <p>Run when a Function has been created.</p> </li> <li> <code>on_function_node</code>             \u2013              <p>Run when visiting a new function node during static/dynamic analysis.</p> </li> <li> <code>on_instance</code>             \u2013              <p>Run when an Object has been created.</p> </li> <li> <code>on_members</code>             \u2013              <p>Run when members of an Object have been loaded.</p> </li> <li> <code>on_module_instance</code>             \u2013              <p>Run when a Module has been created.</p> </li> <li> <code>on_module_members</code>             \u2013              <p>Run when members of a Module have been loaded.</p> </li> <li> <code>on_module_node</code>             \u2013              <p>Run when visiting a new module node during static/dynamic analysis.</p> </li> <li> <code>on_node</code>             \u2013              <p>Run when visiting a new node during static/dynamic analysis.</p> </li> <li> <code>on_package_loaded</code>             \u2013              <p>Run when a package has been completely loaded.</p> </li> <li> <code>on_wildcard_expansion</code>             \u2013              <p>Run when wildcard imports are expanded into aliases.</p> </li> <li> <code>visit</code>             \u2013              <p>Visit a node.</p> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.generic_inspect","title":"generic_inspect","text":"<pre><code>generic_inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Extend the base generic inspection with extensions.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Visiting trees </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.generic_inspect(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/extensions/#griffe.Extension.generic_visit","title":"generic_visit","text":"<pre><code>generic_visit(node: AST) -&gt; None\n</code></pre> <p>Visit children nodes.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Visiting trees </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.generic_visit(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to visit the children of.</p>"},{"location":"reference/api/extensions/#griffe.Extension.inspect","title":"inspect","text":"<pre><code>inspect(node: ObjectNode) -&gt; None\n</code></pre> <p>Inspect a node.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Visiting trees </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.inspect(node)","title":"<code>node</code>","text":"(<code>ObjectNode</code>)           \u2013            <p>The node to inspect.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_alias","title":"on_alias","text":"<pre><code>on_alias(\n    *,\n    node: AST | ObjectNode,\n    alias: Alias,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when an Alias has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_alias(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_alias(alias)","title":"<code>alias</code>","text":"(<code>Alias</code>)           \u2013            <p>The alias instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_alias(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_alias(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_instance","title":"on_attribute_instance","text":"<pre><code>on_attribute_instance(\n    *,\n    node: AST | ObjectNode,\n    attr: Attribute,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when an Attribute has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Supporting custom decorators </li> </ul> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_instance(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_instance(attr)","title":"<code>attr</code>","text":"(<code>Attribute</code>)           \u2013            <p>The attribute instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_instance(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_instance(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_node","title":"on_attribute_node","text":"<pre><code>on_attribute_node(\n    *,\n    node: AST | ObjectNode,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when visiting a new attribute node during static/dynamic analysis.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_node(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_node(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_attribute_node(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_instance","title":"on_class_instance","text":"<pre><code>on_class_instance(\n    *,\n    node: AST | ObjectNode,\n    cls: Class,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when a Class has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Supporting custom decorators </li> </ul> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_instance(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_instance(cls)","title":"<code>cls</code>","text":"(<code>Class</code>)           \u2013            <p>The class instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_instance(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_instance(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_members","title":"on_class_members","text":"<pre><code>on_class_members(\n    *,\n    node: AST | ObjectNode,\n    cls: Class,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when members of a Class have been loaded.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_members(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_members(cls)","title":"<code>cls</code>","text":"(<code>Class</code>)           \u2013            <p>The class instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_members(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_members(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_node","title":"on_class_node","text":"<pre><code>on_class_node(\n    *,\n    node: AST | ObjectNode,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when visiting a new class node during static/dynamic analysis.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_node(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_node(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_class_node(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_instance","title":"on_function_instance","text":"<pre><code>on_function_instance(\n    *,\n    node: AST | ObjectNode,\n    func: Function,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when a Function has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Supporting custom decorators </li> </ul> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_instance(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_instance(func)","title":"<code>func</code>","text":"(<code>Function</code>)           \u2013            <p>The function instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_instance(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_instance(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_node","title":"on_function_node","text":"<pre><code>on_function_node(\n    *,\n    node: AST | ObjectNode,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when visiting a new function node during static/dynamic analysis.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_node(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_node(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_function_node(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_instance","title":"on_instance","text":"<pre><code>on_instance(\n    *,\n    node: AST | ObjectNode,\n    obj: Object,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when an Object has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Supporting custom decorators </li> </ul> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_instance(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_instance(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_instance(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_instance(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_members","title":"on_members","text":"<pre><code>on_members(\n    *,\n    node: AST | ObjectNode,\n    obj: Object,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when members of an Object have been loaded.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_members(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_members(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_members(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_members(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_instance","title":"on_module_instance","text":"<pre><code>on_module_instance(\n    *,\n    node: AST | ObjectNode,\n    mod: Module,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when a Module has been created.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> <li> How-to Supporting custom decorators </li> </ul> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_instance(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_instance(mod)","title":"<code>mod</code>","text":"(<code>Module</code>)           \u2013            <p>The module instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_instance(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_instance(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_members","title":"on_module_members","text":"<pre><code>on_module_members(\n    *,\n    node: AST | ObjectNode,\n    mod: Module,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when members of a Module have been loaded.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_members(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_members(mod)","title":"<code>mod</code>","text":"(<code>Module</code>)           \u2013            <p>The module instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_members(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_members(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_node","title":"on_module_node","text":"<pre><code>on_module_node(\n    *,\n    node: AST | ObjectNode,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when visiting a new module node during static/dynamic analysis.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_node(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_node(agent)","title":"<code>agent</code>","text":"(<code>Visitor | Inspector</code>)           \u2013            <p>The analysis agent currently running.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_module_node(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_node","title":"on_node","text":"<pre><code>on_node(\n    *,\n    node: AST | ObjectNode,\n    agent: Visitor | Inspector,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run when visiting a new node during static/dynamic analysis.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Analysis events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_node(node)","title":"<code>node</code>","text":"(<code>AST | ObjectNode</code>)           \u2013            <p>The currently visited node.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_package_loaded","title":"on_package_loaded","text":"<pre><code>on_package_loaded(\n    *, pkg: Module, loader: GriffeLoader, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Run when a package has been completely loaded.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Load events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_package_loaded(pkg)","title":"<code>pkg</code>","text":"(<code>Module</code>)           \u2013            <p>The package (Module) instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_package_loaded(loader)","title":"<code>loader</code>","text":"(<code>GriffeLoader</code>)           \u2013            <p>The loader currently in use.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_package_loaded(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_wildcard_expansion","title":"on_wildcard_expansion","text":"<pre><code>on_wildcard_expansion(\n    *, alias: Alias, loader: GriffeLoader, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Run when wildcard imports are expanded into aliases.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Events and hooks Load events </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.on_wildcard_expansion(alias)","title":"<code>alias</code>","text":"(<code>Alias</code>)           \u2013            <p>The alias instance.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_wildcard_expansion(loader)","title":"<code>loader</code>","text":"(<code>GriffeLoader</code>)           \u2013            <p>The loader currently in use.</p>"},{"location":"reference/api/extensions/#griffe.Extension.on_wildcard_expansion(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>For forward-compatibility.</p>"},{"location":"reference/api/extensions/#griffe.Extension.visit","title":"visit","text":"<pre><code>visit(node: AST) -&gt; None\n</code></pre> <p>Visit a node.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Visiting trees </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extension.visit(node)","title":"<code>node</code>","text":"(<code>AST</code>)           \u2013            <p>The node to visit.</p>"},{"location":"reference/api/extensions/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/extensions/#griffe.Extensions","title":"Extensions","text":"<pre><code>Extensions(*extensions: Extension)\n</code></pre> <p>This class helps iterating on extensions that should run at different times.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Using extensions Programmatically </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0Inspector <code></code>\u00a0extensions </li> <li> <code></code>\u00a0Visitor <code></code>\u00a0extensions </li> </ul> </li> <li> Extensions <code></code>\u00a0load_extensions </li> <li> Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0extensions </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API Agents <ul> <li> <code></code>\u00a0Inspector </li> <li> <code></code>\u00a0Visitor </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add extensions to this container.</p> </li> <li> <code>call</code>             \u2013              <p>Call the extension hook for the given event.</p> </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extensions(*extensions)","title":"<code>*extensions</code>","text":"(<code>Extension</code>, default:                   <code>()</code> )           \u2013            <p>The extensions to add.</p>"},{"location":"reference/api/extensions/#griffe.Extensions.add","title":"add","text":"<pre><code>add(*extensions: Extension) -&gt; None\n</code></pre> <p>Add extensions to this container.</p> <p>Parameters:</p>"},{"location":"reference/api/extensions/#griffe.Extensions.add(*extensions)","title":"<code>*extensions</code>","text":"(<code>Extension</code>, default:                   <code>()</code> )           \u2013            <p>The extensions to add.</p>"},{"location":"reference/api/extensions/#griffe.Extensions.call","title":"call","text":"<pre><code>call(event: str, **kwargs: Any) -&gt; None\n</code></pre> <p>Call the extension hook for the given event.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Extending APIs Writing extensions Triggering other extensions </li> </ul>"},{"location":"reference/api/extensions/#griffe.Extensions.call(event)","title":"<code>event</code>","text":"(<code>str</code>)           \u2013            <p>The triggered event.</p>"},{"location":"reference/api/extensions/#griffe.Extensions.call(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Arguments passed to the hook.</p>"},{"location":"reference/api/extensions/#types","title":"Types","text":""},{"location":"reference/api/extensions/#griffe.LoadableExtensionType","title":"LoadableExtensionType  <code>module-attribute</code>","text":"<pre><code>LoadableExtensionType = Union[\n    str, dict[str, Any], Extension, type[Extension]\n]\n</code></pre> <p>All the types that can be passed to <code>load_extensions</code>.</p> Used by: <ul> <li> Reference Python API Extensions <code></code>\u00a0load_extensions </li> </ul>"},{"location":"reference/api/extensions/#builtin-extensions","title":"Builtin extensions","text":""},{"location":"reference/api/extensions/#griffe.builtin_extensions","title":"builtin_extensions  <code>module-attribute</code>","text":"<pre><code>builtin_extensions: set[str] = {'dataclasses'}\n</code></pre> <p>The names of built-in Griffe extensions.</p>"},{"location":"reference/api/extensions/#griffe.DataclassesExtension","title":"DataclassesExtension","text":"<p>               Bases: <code>Extension</code></p> <pre><code>\n              flowchart TD\n              griffe.DataclassesExtension[DataclassesExtension]\n              _griffe.extensions.base.Extension[Extension]\n\n                              _griffe.extensions.base.Extension --&gt; griffe.DataclassesExtension\n                \n\n\n              click griffe.DataclassesExtension href \"\" \"griffe.DataclassesExtension\"\n              click _griffe.extensions.base.Extension href \"\" \"_griffe.extensions.base.Extension\"\n            </code></pre> <p>Built-in extension adding support for dataclasses.</p> <p>This extension creates <code>__init__</code> methods of dataclasses if they don't already exist.</p> <p>Methods:</p> <ul> <li> <code>on_package_loaded</code>             \u2013              <p>Hook for loaded packages.</p> </li> </ul>"},{"location":"reference/api/extensions/#griffe.DataclassesExtension.on_package_loaded","title":"on_package_loaded","text":"<pre><code>on_package_loaded(*, pkg: Module, **kwargs: Any) -&gt; None\n</code></pre> <p>Hook for loaded packages.</p> <p>Parameters:</p>"},{"location":"reference/api/extensions/#griffe.DataclassesExtension.on_package_loaded(pkg)","title":"<code>pkg</code>","text":"(<code>Module</code>)           \u2013            <p>The loaded package.</p>"},{"location":"reference/api/finder/","title":"Finder","text":""},{"location":"reference/api/finder/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/finder/#griffe.ModuleFinder","title":"ModuleFinder","text":"<pre><code>ModuleFinder(\n    search_paths: Sequence[str | Path] | None = None,\n)\n</code></pre> <p>The Griffe finder, allowing to find modules on the file system.</p> <p>The module finder is generally not used directly. Each <code>GriffeLoader</code> instance creates its own module finder instance. The finder can be configured when instantiating the loader thanks to the loader's <code>search_paths</code> parameter.</p> <p>Parameters:</p> Referenced by: <ul> <li> Reference Python API Loaders <code></code>\u00a0load </li> </ul> Returned by: <ul> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0finder </li> </ul> <p>Methods:</p> <ul> <li> <code>append_search_path</code>             \u2013              <p>Append a search path.</p> </li> <li> <code>find_package</code>             \u2013              <p>Find a package or namespace package.</p> </li> <li> <code>find_spec</code>             \u2013              <p>Find the top-level parent module of a module.</p> </li> <li> <code>insert_search_path</code>             \u2013              <p>Insert a search path at the given position.</p> </li> <li> <code>iter_submodules</code>             \u2013              <p>Iterate on a module's submodules, if any.</p> </li> <li> <code>submodules</code>             \u2013              <p>Return the list of a module's submodules.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>accepted_py_module_extensions</code>               (<code>list[str]</code>)           \u2013            <p>List of extensions supported by the finder.</p> </li> <li> <code>extensions_set</code>               (<code>set[str]</code>)           \u2013            <p>Set of extensions supported by the finder.</p> </li> <li> <code>search_paths</code>               (<code>list[Path]</code>)           \u2013            <p>The finder search paths.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.ModuleFinder(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional paths to search into.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.accepted_py_module_extensions","title":"accepted_py_module_extensions  <code>class-attribute</code>","text":"<pre><code>accepted_py_module_extensions: list[str] = [\n    \".py\",\n    \".pyc\",\n    \".pyo\",\n    \".pyd\",\n    \".pyi\",\n    \".so\",\n]\n</code></pre> <p>List of extensions supported by the finder.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.extensions_set","title":"extensions_set  <code>class-attribute</code>","text":"<pre><code>extensions_set: set[str] = set(\n    accepted_py_module_extensions\n)\n</code></pre> <p>Set of extensions supported by the finder.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.search_paths","title":"search_paths  <code>instance-attribute</code>","text":"<pre><code>search_paths: list[Path] = []\n</code></pre> <p>The finder search paths.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.append_search_path","title":"append_search_path","text":"<pre><code>append_search_path(path: Path) -&gt; None\n</code></pre> <p>Append a search path.</p> <p>The path will be resolved (absolute, normalized). The path won't be appended if it is already in the search paths list.</p> <p>Parameters:</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.append_search_path(path)","title":"<code>path</code>","text":"(<code>Path</code>)           \u2013            <p>The path to append.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_package","title":"find_package","text":"<pre><code>find_package(\n    module_name: str,\n) -&gt; Package | NamespacePackage\n</code></pre> <p>Find a package or namespace package.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When the module cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Package | NamespacePackage</code>           \u2013            <p>A package or namespace package wrapper.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_package(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>)           \u2013            <p>The module name.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_spec","title":"find_spec","text":"<pre><code>find_spec(\n    module: str | Path,\n    *,\n    try_relative_path: bool = True,\n    find_stubs_package: bool = False,\n) -&gt; tuple[str, Package | NamespacePackage]\n</code></pre> <p>Find the top-level parent module of a module.</p> <p>If a Path is passed, only try to find the module as a file path. If a string is passed, first try to find the module as a file path, then look into the search paths.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>When a Path was passed and the module could not be found:</p> <ul> <li>the directory has no <code>__init__.py</code> file in it</li> <li>the path does not exist</li> </ul> </li> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When a string was passed and the module could not be found:</p> <ul> <li>no <code>module/__init__.py</code></li> <li>no <code>module.py</code></li> <li>no <code>module.pth</code></li> <li>no <code>module</code> directory (namespace packages)</li> <li>or unsupported .pth file</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, Package | NamespacePackage]</code>           \u2013            <p>The name of the module, and an instance representing its (namespace) package.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_spec(module)","title":"<code>module</code>","text":"(<code>str | Path</code>)           \u2013            <p>The module name or path.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_spec(try_relative_path)","title":"<code>try_relative_path</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to try finding the module as a relative path, when the given module is not already a path.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.find_spec(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.insert_search_path","title":"insert_search_path","text":"<pre><code>insert_search_path(position: int, path: Path) -&gt; None\n</code></pre> <p>Insert a search path at the given position.</p> <p>The path will be resolved (absolute, normalized). The path won't be inserted if it is already in the search paths list.</p> <p>Parameters:</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.insert_search_path(position)","title":"<code>position</code>","text":"(<code>int</code>)           \u2013            <p>The insert position in the list.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.insert_search_path(path)","title":"<code>path</code>","text":"(<code>Path</code>)           \u2013            <p>The path to insert.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.iter_submodules","title":"iter_submodules","text":"<pre><code>iter_submodules(\n    path: Path | list[Path], seen: set | None = None\n) -&gt; Iterator[NamePartsAndPathType]\n</code></pre> <p>Iterate on a module's submodules, if any.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>name_parts</code> (              <code>tuple[str, ...]</code> )          \u2013            <p>The parts of a submodule name.</p> </li> <li> <code>filepath</code> (              <code>Path</code> )          \u2013            <p>A submodule filepath.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.ModuleFinder.iter_submodules(path)","title":"<code>path</code>","text":"(<code>Path | list[Path]</code>)           \u2013            <p>The module path.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.iter_submodules(seen)","title":"<code>seen</code>","text":"(<code>set | None</code>, default:                   <code>None</code> )           \u2013            <p>If not none, this set is used to skip some files. The goal is to replicate the behavior of Python by only using the first packages (with <code>__init__</code> modules) of the same name found in different namespace packages. As soon as we find an <code>__init__</code> module, we add its parent path to the <code>seen</code> set, which will be reused when scanning the next namespace packages.</p>"},{"location":"reference/api/finder/#griffe.ModuleFinder.submodules","title":"submodules","text":"<pre><code>submodules(module: Module) -&gt; list[NamePartsAndPathType]\n</code></pre> <p>Return the list of a module's submodules.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[NamePartsAndPathType]</code>           \u2013            <p>A list of tuples containing the parts of the submodule name and its path.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.ModuleFinder.submodules(module)","title":"<code>module</code>","text":"(<code>Module</code>)           \u2013            <p>The parent module.</p>"},{"location":"reference/api/finder/#griffe.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, path: Path, stubs: Path | None = None)\n</code></pre> <p>This class is a simple placeholder used during the process of finding packages.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>Package folder path.</p> </li> <li> <code>stubs</code>               (<code>Path | None</code>)           \u2013            <p>Package stubs file.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.Package(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The package name.</p>"},{"location":"reference/api/finder/#griffe.Package(path)","title":"<code>path</code>","text":"(<code>Path</code>)           \u2013            <p>The package path(s).</p>"},{"location":"reference/api/finder/#griffe.Package(stubs)","title":"<code>stubs</code>","text":"(<code>Path | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional path to the related stubs file (.pyi).</p>"},{"location":"reference/api/finder/#griffe.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/api/finder/#griffe.Package.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: Path\n</code></pre> <p>Package folder path.</p>"},{"location":"reference/api/finder/#griffe.Package.stubs","title":"stubs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stubs: Path | None = None\n</code></pre> <p>Package stubs file.</p>"},{"location":"reference/api/finder/#griffe.NamespacePackage","title":"NamespacePackage  <code>dataclass</code>","text":"<pre><code>NamespacePackage(name: str, path: list[Path])\n</code></pre> <p>This class is a simple placeholder used during the process of finding packages.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Namespace package name.</p> </li> <li> <code>path</code>               (<code>list[Path]</code>)           \u2013            <p>Namespace package folder paths.</p> </li> </ul>"},{"location":"reference/api/finder/#griffe.NamespacePackage(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The package name.</p>"},{"location":"reference/api/finder/#griffe.NamespacePackage(path)","title":"<code>path</code>","text":"(<code>list[Path]</code>)           \u2013            <p>The package paths.</p>"},{"location":"reference/api/finder/#griffe.NamespacePackage.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Namespace package name.</p>"},{"location":"reference/api/finder/#griffe.NamespacePackage.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: list[Path]\n</code></pre> <p>Namespace package folder paths.</p>"},{"location":"reference/api/finder/#types","title":"Types","text":""},{"location":"reference/api/finder/#griffe.NamePartsType","title":"NamePartsType  <code>module-attribute</code>","text":"<pre><code>NamePartsType = tuple[str, ...]\n</code></pre> <p>Type alias for the parts of a module name.</p>"},{"location":"reference/api/finder/#griffe.NamePartsAndPathType","title":"NamePartsAndPathType  <code>module-attribute</code>","text":"<pre><code>NamePartsAndPathType = tuple[NamePartsType, Path]\n</code></pre> <p>Type alias for the parts of a module name and its path.</p>"},{"location":"reference/api/git/","title":"Git utilities","text":""},{"location":"reference/api/git/#griffe.assert_git_repo","title":"assert_git_repo","text":"<pre><code>assert_git_repo(path: str | Path) -&gt; None\n</code></pre> <p>Assert that a directory is a Git repository.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>OSError</code>             \u2013            <p>When the directory is not a Git repository.</p> </li> </ul>"},{"location":"reference/api/git/#griffe.assert_git_repo(path)","title":"<code>path</code>","text":"(<code>str | Path</code>)           \u2013            <p>Path to a directory.</p>"},{"location":"reference/api/git/#griffe.get_latest_tag","title":"get_latest_tag","text":"<pre><code>get_latest_tag(repo: str | Path) -&gt; str\n</code></pre> <p>Get latest tag of a Git repository.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The latest tag.</p> </li> </ul>"},{"location":"reference/api/git/#griffe.get_latest_tag(repo)","title":"<code>repo</code>","text":"(<code>str | Path</code>)           \u2013            <p>The path to Git repository.</p>"},{"location":"reference/api/git/#griffe.get_repo_root","title":"get_repo_root","text":"<pre><code>get_repo_root(repo: str | Path) -&gt; str\n</code></pre> <p>Get the root of a Git repository.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The root of the repository.</p> </li> </ul>"},{"location":"reference/api/git/#griffe.get_repo_root(repo)","title":"<code>repo</code>","text":"(<code>str | Path</code>)           \u2013            <p>The path to a Git repository.</p>"},{"location":"reference/api/git/#griffe.tmp_worktree","title":"tmp_worktree","text":"<pre><code>tmp_worktree(\n    repo: str | Path = \".\", ref: str = \"HEAD\"\n) -&gt; Iterator[Path]\n</code></pre> <p>Context manager that checks out the given reference in the given repository to a temporary worktree.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Path</code>           \u2013            <p>The path to the temporary worktree.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OSError</code>             \u2013            <p>If <code>repo</code> is not a valid <code>.git</code> repository</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>If the <code>git</code> executable is unavailable, or if it cannot create a worktree</p> </li> </ul>"},{"location":"reference/api/git/#griffe.tmp_worktree(repo)","title":"<code>repo</code>","text":"(<code>str | Path</code>, default:                   <code>'.'</code> )           \u2013            <p>Path to the repository (i.e. the directory containing the <code>.git</code> directory)</p>"},{"location":"reference/api/git/#griffe.tmp_worktree(ref)","title":"<code>ref</code>","text":"(<code>str</code>, default:                   <code>'HEAD'</code> )           \u2013            <p>A Git reference such as a commit, tag or branch.</p>"},{"location":"reference/api/helpers/","title":"Helpers","text":""},{"location":"reference/api/helpers/#griffe.TmpPackage","title":"TmpPackage  <code>dataclass</code>","text":"<pre><code>TmpPackage(tmpdir: Path, name: str, path: Path)\n</code></pre> <p>A temporary package.</p> <p>The <code>tmpdir</code> and <code>path</code> parameters can be passed as relative path. They will be resolved to absolute paths after initialization.</p> Yielded by: <ul> <li> Reference Python API Helpers <code></code>\u00a0temporary_pypackage </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The package name, as to dynamically import it.</p> </li> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>The package path.</p> </li> <li> <code>tmpdir</code>               (<code>Path</code>)           \u2013            <p>The temporary directory containing the package.</p> </li> </ul>"},{"location":"reference/api/helpers/#griffe.TmpPackage.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The package name, as to dynamically import it.</p>"},{"location":"reference/api/helpers/#griffe.TmpPackage.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: Path\n</code></pre> <p>The package path.</p>"},{"location":"reference/api/helpers/#griffe.TmpPackage.tmpdir","title":"tmpdir  <code>instance-attribute</code>","text":"<pre><code>tmpdir: Path\n</code></pre> <p>The temporary directory containing the package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pyfile","title":"temporary_pyfile","text":"<pre><code>temporary_pyfile(\n    code: str, *, module_name: str = \"module\"\n) -&gt; Iterator[tuple[str, Path]]\n</code></pre> <p>Create a Python file containing the given code in a temporary directory.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>module_name</code> (              <code>str</code> )          \u2013            <p>The module name, as to dynamically import it.</p> </li> <li> <code>module_path</code> (              <code>Path</code> )          \u2013            <p>The module path.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_pyfile(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The code to write to the temporary file.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pyfile(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>, default:                   <code>'module'</code> )           \u2013            <p>The name of the temporary module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pypackage","title":"temporary_pypackage","text":"<pre><code>temporary_pypackage(\n    package: str,\n    modules: Sequence[str]\n    | Mapping[str, str]\n    | None = None,\n    *,\n    init: bool = True,\n    inits: bool = True,\n) -&gt; Iterator[TmpPackage]\n</code></pre> <p>Create a package containing the given modules in a temporary directory.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>TmpPackage</code>           \u2013            <p>A temporary package.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_pypackage(package)","title":"<code>package</code>","text":"(<code>str</code>)           \u2013            <p>The package name. Example: <code>\"a\"</code> gives a package named <code>a</code>, while <code>\"a/b\"</code> gives a namespace package named <code>a</code> with a package inside named <code>b</code>. If <code>init</code> is false, then <code>b</code> is also a namespace package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pypackage(modules)","title":"<code>modules</code>","text":"(<code>Sequence[str] | Mapping[str, str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional modules to create in the package. If a list, simply touch the files: <code>[\"b.py\", \"c/d.py\", \"e/f\"]</code>. If a dict, keys are the file names and values their contents: <code>{\"b.py\": \"b = 1\", \"c/d.py\": \"print('hey from c')\"}</code>.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pypackage(init)","title":"<code>init</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create an <code>__init__</code> module in the top package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_pypackage(inits)","title":"<code>inits</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create <code>__init__</code> modules in subpackages.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module","title":"temporary_visited_module","text":"<pre><code>temporary_visited_module(\n    code: str,\n    *,\n    module_name: str = \"module\",\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and visit a temporary module with the given code.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Module</code>           \u2013            <p>The visited module.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The code of the module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>, default:                   <code>'module'</code> )           \u2013            <p>The name of the temporary module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use when visiting the AST.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional parent of this module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_module(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package","title":"temporary_visited_package","text":"<pre><code>temporary_visited_package(\n    package: str,\n    modules: Sequence[str]\n    | Mapping[str, str]\n    | None = None,\n    *,\n    init: bool = True,\n    inits: bool = True,\n    extensions: Extensions | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = False,\n    store_source: bool = True,\n    resolve_aliases: bool = False,\n    resolve_external: bool | None = None,\n    resolve_implicit: bool = False,\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and visit a temporary package.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Module</code>           \u2013            <p>A module.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(package)","title":"<code>package</code>","text":"(<code>str</code>)           \u2013            <p>The package name. Example: <code>\"a\"</code> gives a package named <code>a</code>, while <code>\"a/b\"</code> gives a namespace package named <code>a</code> with a package inside named <code>b</code>. If <code>init</code> is false, then <code>b</code> is also a namespace package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(modules)","title":"<code>modules</code>","text":"(<code>Sequence[str] | Mapping[str, str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional modules to create in the package. If a list, simply touch the files: <code>[\"b.py\", \"c/d.py\", \"e/f\"]</code>. If a dict, keys are the file names and values their contents: <code>{\"b.py\": \"b = 1\", \"c/d.py\": \"print('hey from c')\"}</code>.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(init)","title":"<code>init</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create an <code>__init__</code> module in the top package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(inits)","title":"<code>inits</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create <code>__init__</code> modules in subpackages.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(store_source)","title":"<code>store_source</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to store code source in the lines collection.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases.</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try to load unspecified modules to resolve aliases. Default value (<code>None</code>) means to load external modules only if they are the private sibling or the origin module (for example when <code>ast</code> imports from <code>_ast</code>).</p>"},{"location":"reference/api/helpers/#griffe.temporary_visited_package(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module","title":"temporary_inspected_module","text":"<pre><code>temporary_inspected_module(\n    code: str,\n    *,\n    module_name: str = \"module\",\n    import_paths: list[Path] | None = None,\n    extensions: Extensions | None = None,\n    parent: Module | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and inspect a temporary module with the given code.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Module</code>           \u2013            <p>The inspected module.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The code of the module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(module_name)","title":"<code>module_name</code>","text":"(<code>str</code>, default:                   <code>'module'</code> )           \u2013            <p>The name of the temporary module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(import_paths)","title":"<code>import_paths</code>","text":"(<code>list[Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>Paths to import the module from.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use when visiting the AST.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(parent)","title":"<code>parent</code>","text":"(<code>Module | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional parent of this module.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_module(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package","title":"temporary_inspected_package","text":"<pre><code>temporary_inspected_package(\n    package: str,\n    modules: Sequence[str]\n    | Mapping[str, str]\n    | None = None,\n    *,\n    init: bool = True,\n    inits: bool = True,\n    extensions: Extensions | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    store_source: bool = True,\n    resolve_aliases: bool = False,\n    resolve_external: bool | None = None,\n    resolve_implicit: bool = False,\n) -&gt; Iterator[Module]\n</code></pre> <p>Create and inspect a temporary package.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>Module</code>           \u2013            <p>A module.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Helpers </li> </ul>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(package)","title":"<code>package</code>","text":"(<code>str</code>)           \u2013            <p>The package name. Example: <code>\"a\"</code> gives a package named <code>a</code>, while <code>\"a/b\"</code> gives a namespace package named <code>a</code> with a package inside named <code>b</code>. If <code>init</code> is false, then <code>b</code> is also a namespace package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(modules)","title":"<code>modules</code>","text":"(<code>Sequence[str] | Mapping[str, str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional modules to create in the package. If a list, simply touch the files: <code>[\"b.py\", \"c/d.py\", \"e/f\"]</code>. If a dict, keys are the file names and values their contents: <code>{\"b.py\": \"b = 1\", \"c/d.py\": \"print('hey from c')\"}</code>.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(init)","title":"<code>init</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create an <code>__init__</code> module in the top package.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(inits)","title":"<code>inits</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to create <code>__init__</code> modules in subpackages.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(store_source)","title":"<code>store_source</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to store code source in the lines collection.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases.</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try to load unspecified modules to resolve aliases. Default value (<code>None</code>) means to load external modules only if they are the private sibling or the origin module (for example when <code>ast</code> imports from <code>_ast</code>).</p>"},{"location":"reference/api/helpers/#griffe.temporary_inspected_package(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/helpers/#griffe.vtree","title":"vtree","text":"<pre><code>vtree(\n    *objects: Object, return_leaf: bool = False\n) -&gt; Object\n</code></pre> <p>Link objects together, vertically.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object</code>           \u2013            <p>The top or leaf object.</p> </li> </ul>"},{"location":"reference/api/helpers/#griffe.vtree(*objects)","title":"<code>*objects</code>","text":"(<code>Object</code>, default:                   <code>()</code> )           \u2013            <p>A sequence of objects. The first one is at the top of the tree.</p>"},{"location":"reference/api/helpers/#griffe.vtree(return_leaf)","title":"<code>return_leaf</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return the leaf instead of the root.</p>"},{"location":"reference/api/helpers/#griffe.htree","title":"htree","text":"<pre><code>htree(*objects: Object) -&gt; Object\n</code></pre> <p>Link objects together, horizontally.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object</code>           \u2013            <p>The first given object, with all the other objects as members of it.</p> </li> </ul>"},{"location":"reference/api/helpers/#griffe.htree(*objects)","title":"<code>*objects</code>","text":"(<code>Object</code>, default:                   <code>()</code> )           \u2013            <p>A sequence of objects. All objects starting at the second become members of the first.</p>"},{"location":"reference/api/helpers/#griffe.module_vtree","title":"module_vtree","text":"<pre><code>module_vtree(\n    path: str,\n    *,\n    leaf_package: bool = True,\n    return_leaf: bool = False,\n) -&gt; Module\n</code></pre> <p>Link objects together, vertically.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no objects are provided.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>The top or leaf module.</p> </li> </ul>"},{"location":"reference/api/helpers/#griffe.module_vtree(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The complete module path, like <code>\"a.b.c.d\"</code>.</p>"},{"location":"reference/api/helpers/#griffe.module_vtree(leaf_package)","title":"<code>leaf_package</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether the deepest module should also be a package.</p>"},{"location":"reference/api/helpers/#griffe.module_vtree(return_leaf)","title":"<code>return_leaf</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return the leaf instead of the root.</p>"},{"location":"reference/api/loaders/","title":"Loaders","text":""},{"location":"reference/api/loaders/#main-api","title":"Main API","text":""},{"location":"reference/api/loaders/#griffe.load","title":"load","text":"<pre><code>load(\n    objspec: str | Path | None = None,\n    /,\n    *,\n    submodules: bool = True,\n    try_relative_path: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    store_source: bool = True,\n    find_stubs_package: bool = False,\n    resolve_aliases: bool = False,\n    resolve_external: bool | None = None,\n    resolve_implicit: bool = False,\n) -&gt; Object | Alias\n</code></pre> <p>Load and return a Griffe object.</p> <p>In Griffe's context, loading means:</p> <ul> <li>searching for a package, and finding it on the file system or as a builtin module     (see the <code>ModuleFinder</code> class for more information)</li> <li>extracting information from each of its (sub)modules, by either parsing     the source code (see the <code>visit</code> function)     or inspecting the module at runtime (see the <code>inspect</code> function)</li> </ul> <p>The extracted information is stored in a collection of modules, which can be queried later. Each collected module is a tree of objects, representing the structure of the module. See the <code>Module</code>, <code>Class</code>, <code>Function</code>, and <code>Attribute</code> classes for more information.</p> <p>The main class used to load modules is <code>GriffeLoader</code>. Convenience functions like this one and <code>load_git</code> are also available.</p> Example <pre><code>import griffe\n\nmodule = griffe.load(...)\n</code></pre> <p>This is a shortcut for:</p> <pre><code>from griffe import GriffeLoader\n\nloader = GriffeLoader(...)\nmodule = loader.load(...)\n</code></pre> <p>See the documentation for the loader: <code>GriffeLoader</code>.</p> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object | Alias</code>           \u2013            <p>A Griffe object.</p> </li> </ul> Referenced by: <ul> <li> Getting started Introduction Python library </li> <li> Guide User guide Manipulating APIs <ul> <li> Extending APIs Using extensions Programmatically </li> <li> Loading APIs <ul> <li> Alias resolution Modules collection </li> <li> Search paths </li> <li> The GriffeLoader class </li> <li> The load function </li> </ul> </li> <li> Navigating APIs Docstrings </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Loaders </li> <li> Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0inspect </li> <li> <code></code>\u00a0visit </li> </ul> </li> <li> Loaders <code></code>\u00a0load_git </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.load(objspec)","title":"<code>objspec</code>","text":"(<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>The Python path of an object, or file path to a module.</p>"},{"location":"reference/api/loaders/#griffe.load(submodules)","title":"<code>submodules</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).</p>"},{"location":"reference/api/loaders/#griffe.load(try_relative_path)","title":"<code>try_relative_path</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to try finding the module as a relative path.</p>"},{"location":"reference/api/loaders/#griffe.load(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/loaders/#griffe.load(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into.</p>"},{"location":"reference/api/loaders/#griffe.load(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/loaders/#griffe.load(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/loaders/#griffe.load(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/loaders/#griffe.load(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/loaders/#griffe.load(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/loaders/#griffe.load(force_inspection)","title":"<code>force_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/loaders/#griffe.load(store_source)","title":"<code>store_source</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to store code source in the lines collection.</p>"},{"location":"reference/api/loaders/#griffe.load(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/loaders/#griffe.load(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases.</p>"},{"location":"reference/api/loaders/#griffe.load(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try to load unspecified modules to resolve aliases. Default value (<code>None</code>) means to load external modules only if they are the private sibling or the origin module (for example when <code>ast</code> imports from <code>_ast</code>).</p>"},{"location":"reference/api/loaders/#griffe.load(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/loaders/#griffe.load_git","title":"load_git","text":"<pre><code>load_git(\n    objspec: str | Path | None = None,\n    /,\n    *,\n    ref: str = \"HEAD\",\n    repo: str | Path = \".\",\n    submodules: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    find_stubs_package: bool = False,\n    resolve_aliases: bool = False,\n    resolve_external: bool | None = None,\n    resolve_implicit: bool = False,\n) -&gt; Object | Alias\n</code></pre> <p>Load and return a module from a specific Git reference.</p> <p>This function will create a temporary git worktree at the requested reference before loading <code>module</code> with <code>griffe.load</code>.</p> <p>This function requires that the <code>git</code> executable is installed.</p> <p>Examples:</p> <pre><code>from griffe import load_git\n\nold_api = load_git(\"my_module\", ref=\"v0.1.0\", repo=\"path/to/repo\")\n</code></pre> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Object | Alias</code>           \u2013            <p>A Griffe object.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.24.0 - 2022-11-13 Breaking Changes </li> <li> Getting started Introduction Python library </li> <li> Guide <ul> <li> Contributor guide Project architecture Program structure Internal API git.py </li> <li> User guide Manipulating APIs Checking APIs Python API </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Loaders </li> <li> Python API Loaders <code></code>\u00a0load </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.load_git(objspec)","title":"<code>objspec</code>","text":"(<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>The Python path of an object, or file path to a module.</p>"},{"location":"reference/api/loaders/#griffe.load_git(ref)","title":"<code>ref</code>","text":"(<code>str</code>, default:                   <code>'HEAD'</code> )           \u2013            <p>A Git reference such as a commit, tag or branch.</p>"},{"location":"reference/api/loaders/#griffe.load_git(repo)","title":"<code>repo</code>","text":"(<code>str | Path</code>, default:                   <code>'.'</code> )           \u2013            <p>Path to the repository (i.e. the directory containing the <code>.git</code> directory)</p>"},{"location":"reference/api/loaders/#griffe.load_git(submodules)","title":"<code>submodules</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).</p>"},{"location":"reference/api/loaders/#griffe.load_git(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/loaders/#griffe.load_git(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into (relative to the repository root).</p>"},{"location":"reference/api/loaders/#griffe.load_git(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/loaders/#griffe.load_git(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/loaders/#griffe.load_git(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/loaders/#griffe.load_git(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/loaders/#griffe.load_git(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/loaders/#griffe.load_git(force_inspection)","title":"<code>force_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/loaders/#griffe.load_git(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/loaders/#griffe.load_git(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases.</p>"},{"location":"reference/api/loaders/#griffe.load_git(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try to load unspecified modules to resolve aliases. Default value (<code>None</code>) means to load external modules only if they are the private sibling or the origin module (for example when <code>ast</code> imports from <code>_ast</code>).</p>"},{"location":"reference/api/loaders/#griffe.load_git(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi","title":"load_pypi","text":"<pre><code>load_pypi(\n    package: str,\n    distribution: str,\n    version_spec: str,\n    *,\n    submodules: bool = True,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    find_stubs_package: bool = False,\n    resolve_aliases: bool = False,\n    resolve_external: bool | None = None,\n    resolve_implicit: bool = False,\n) -&gt; Object | Alias\n</code></pre> <p>Load and return a module from a specific package version downloaded using pip.</p> <p> Sponsors only \u2014  Insiders 1.1.0.</p> <p>Parameters:</p> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Loaders </li> </ul>"},{"location":"reference/api/loaders/#griffe.load_pypi(package)","title":"<code>package</code>","text":"(<code>str</code>)           \u2013            <p>The package import name.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(distribution)","title":"<code>distribution</code>","text":"(<code>str</code>)           \u2013            <p>The distribution name.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(version_spec)","title":"<code>version_spec</code>","text":"(<code>str</code>)           \u2013            <p>The version specifier to use when installing with pip.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(submodules)","title":"<code>submodules</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into (relative to the repository root).</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(force_inspection)","title":"<code>force_inspection</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(resolve_aliases)","title":"<code>resolve_aliases</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to resolve aliases.</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(resolve_external)","title":"<code>resolve_external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to try to load unspecified modules to resolve aliases. Default value (<code>None</code>) means to load external modules only if they are the private sibling or the origin module (for example when <code>ast</code> imports from <code>_ast</code>).</p>"},{"location":"reference/api/loaders/#griffe.load_pypi(resolve_implicit)","title":"<code>resolve_implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/loaders/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/loaders/#griffe.GriffeLoader","title":"GriffeLoader","text":"<pre><code>GriffeLoader(\n    *,\n    extensions: Extensions | None = None,\n    search_paths: Sequence[str | Path] | None = None,\n    docstring_parser: DocstringStyle | Parser | None = None,\n    docstring_options: dict[str, Any] | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    store_source: bool = True,\n)\n</code></pre> <p>The Griffe loader, allowing to load data from modules.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs <ul> <li> Extending APIs Using extensions Programmatically </li> <li> Loading APIs <ul> <li> Alias resolution Modules collection </li> <li> Search paths </li> <li> The GriffeLoader class </li> </ul> </li> </ul> </li> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0inspect </li> <li> <code></code>\u00a0visit </li> </ul> </li> <li> Finder <code></code>\u00a0ModuleFinder </li> <li> Loaders <code></code>\u00a0load </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> Extensions <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0on_package_loaded </li> <li> <code></code>\u00a0on_wildcard_expansion </li> </ul> </li> <li> Loaders <code></code>\u00a0Stats </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>expand_exports</code>             \u2013              <p>Expand exports: try to recursively expand all module exports (<code>__all__</code> values).</p> </li> <li> <code>expand_wildcards</code>             \u2013              <p>Expand wildcards: try to recursively expand all found wildcards.</p> </li> <li> <code>load</code>             \u2013              <p>Load an object as a Griffe object, given its Python or file path.</p> </li> <li> <code>resolve_aliases</code>             \u2013              <p>Resolve aliases.</p> </li> <li> <code>resolve_module_aliases</code>             \u2013              <p>Follow aliases: try to recursively resolve all found aliases.</p> </li> <li> <code>stats</code>             \u2013              <p>Compute some statistics.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>allow_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to allow inspecting (importing) modules for which we can't find sources.</p> </li> <li> <code>docstring_options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Configured parsing options.</p> </li> <li> <code>docstring_parser</code>               (<code>DocstringStyle | Parser | None</code>)           \u2013            <p>Selected docstring parser.</p> </li> <li> <code>extensions</code>               (<code>Extensions</code>)           \u2013            <p>Loaded Griffe extensions.</p> </li> <li> <code>finder</code>               (<code>ModuleFinder</code>)           \u2013            <p>The module source finder.</p> </li> <li> <code>force_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to force inspecting (importing) modules, even when sources were found.</p> </li> <li> <code>ignored_modules</code>               (<code>set[str]</code>)           \u2013            <p>Special modules to ignore when loading.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>Collection of source code lines.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>Collection of modules.</p> </li> <li> <code>store_source</code>               (<code>bool</code>)           \u2013            <p>Whether to store source code in the lines collection.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(extensions)","title":"<code>extensions</code>","text":"(<code>Extensions | None</code>, default:                   <code>None</code> )           \u2013            <p>The extensions to use.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(search_paths)","title":"<code>search_paths</code>","text":"(<code>Sequence[str | Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The paths to search into.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(docstring_parser)","title":"<code>docstring_parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(docstring_options)","title":"<code>docstring_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(allow_inspection)","title":"<code>allow_inspection</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader(store_source)","title":"<code>store_source</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to store code source in the lines collection.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.allow_inspection","title":"allow_inspection  <code>instance-attribute</code>","text":"<pre><code>allow_inspection: bool = allow_inspection\n</code></pre> <p>Whether to allow inspecting (importing) modules for which we can't find sources.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.docstring_options","title":"docstring_options  <code>instance-attribute</code>","text":"<pre><code>docstring_options: dict[str, Any] = docstring_options or {}\n</code></pre> <p>Configured parsing options.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.docstring_parser","title":"docstring_parser  <code>instance-attribute</code>","text":"<pre><code>docstring_parser: DocstringStyle | Parser | None = (\n    docstring_parser\n)\n</code></pre> <p>Selected docstring parser.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.extensions","title":"extensions  <code>instance-attribute</code>","text":"<pre><code>extensions: Extensions = extensions or load_extensions()\n</code></pre> <p>Loaded Griffe extensions.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.finder","title":"finder  <code>instance-attribute</code>","text":"<pre><code>finder: ModuleFinder = ModuleFinder(search_paths)\n</code></pre> <p>The module source finder.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.force_inspection","title":"force_inspection  <code>instance-attribute</code>","text":"<pre><code>force_inspection: bool = force_inspection\n</code></pre> <p>Whether to force inspecting (importing) modules, even when sources were found.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.ignored_modules","title":"ignored_modules  <code>class-attribute</code>","text":"<pre><code>ignored_modules: set[str] = {'debugpy', '_pydev'}\n</code></pre> <p>Special modules to ignore when loading.</p> <p>For example, <code>debugpy</code> and <code>_pydev</code> are used when debugging with VSCode and should generally never be loaded.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.lines_collection","title":"lines_collection  <code>instance-attribute</code>","text":"<pre><code>lines_collection: LinesCollection = (\n    lines_collection or LinesCollection()\n)\n</code></pre> <p>Collection of source code lines.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.modules_collection","title":"modules_collection  <code>instance-attribute</code>","text":"<pre><code>modules_collection: ModulesCollection = (\n    modules_collection or ModulesCollection()\n)\n</code></pre> <p>Collection of modules.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.store_source","title":"store_source  <code>instance-attribute</code>","text":"<pre><code>store_source: bool = store_source\n</code></pre> <p>Whether to store source code in the lines collection.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_exports","title":"expand_exports","text":"<pre><code>expand_exports(\n    module: Module, seen: set | None = None\n) -&gt; None\n</code></pre> <p>Expand exports: try to recursively expand all module exports (<code>__all__</code> values).</p> <p>See also: <code>Module.exports</code>.</p> <p>Parameters:</p> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <code></code>\u00a0exports </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0exports </li> <li> <code></code>\u00a0Class <code></code>\u00a0exports </li> <li> <code></code>\u00a0Function <code></code>\u00a0exports </li> <li> <code></code>\u00a0Module <code></code>\u00a0exports </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0exports </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_exports(module)","title":"<code>module</code>","text":"(<code>Module</code>)           \u2013            <p>The module to recurse on.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_exports(seen)","title":"<code>seen</code>","text":"(<code>set | None</code>, default:                   <code>None</code> )           \u2013            <p>Used to avoid infinite recursion.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_wildcards","title":"expand_wildcards","text":"<pre><code>expand_wildcards(\n    obj: Object,\n    *,\n    external: bool | None = None,\n    seen: set | None = None,\n) -&gt; None\n</code></pre> <p>Expand wildcards: try to recursively expand all found wildcards.</p> <p>See also: <code>Alias.wildcard</code>.</p> <p>Parameters:</p> Referenced by: <ul> <li> Changelog 0.25.0 - 2022-12-11 Breaking changes </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0wildcard </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_wildcards(obj)","title":"<code>obj</code>","text":"(<code>Object</code>)           \u2013            <p>The object and its members to recurse on.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_wildcards(external)","title":"<code>external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>When true, try to load unspecified modules to expand wildcards.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.expand_wildcards(seen)","title":"<code>seen</code>","text":"(<code>set | None</code>, default:                   <code>None</code> )           \u2013            <p>Used to avoid infinite recursion.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.load","title":"load","text":"<pre><code>load(\n    objspec: str | Path | None = None,\n    /,\n    *,\n    submodules: bool = True,\n    try_relative_path: bool = True,\n    find_stubs_package: bool = False,\n) -&gt; Object | Alias\n</code></pre> <p>Load an object as a Griffe object, given its Python or file path.</p> <p>Note that this will load the whole object's package, and return only the specified object. The rest of the package can be accessed from the returned object with regular methods and properties (<code>parent</code>, <code>members</code>, etc.).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; loader.load(\"griffe.Module\")\nAlias(\"Module\", \"_griffe.models.Module\")\n</code></pre> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>LoadingError</code>             \u2013            <p>When loading a module failed for various reasons.</p> </li> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When a module was not found and inspection is disallowed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Object | Alias</code>           \u2013            <p>A Griffe object.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Loading APIs <ul> <li> Alias resolution Modules collection </li> <li> The GriffeLoader class </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.load(objspec)","title":"<code>objspec</code>","text":"(<code>str | Path | None</code>, default:                   <code>None</code> )           \u2013            <p>The Python path of an object, or file path to a module.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.load(submodules)","title":"<code>submodules</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to recurse on the submodules. This parameter only makes sense when loading a package (top-level module).</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.load(try_relative_path)","title":"<code>try_relative_path</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to try finding the module as a relative path.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.load(find_stubs_package)","title":"<code>find_stubs_package</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to search for stubs-only package. If both the package and its stubs are found, they'll be merged together. If only the stubs are found, they'll be used as the package itself.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_aliases","title":"resolve_aliases","text":"<pre><code>resolve_aliases(\n    *,\n    implicit: bool = False,\n    external: bool | None = None,\n    max_iterations: int | None = None,\n) -&gt; tuple[set[str], int]\n</code></pre> <p>Resolve aliases.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[set[str], int]</code>           \u2013            <p>The unresolved aliases and the number of iterations done.</p> </li> </ul> Referenced by: <ul> <li> Changelog <ul> <li> 0.24.0 - 2022-11-13 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> 0.31.0 - 2023-07-04 Breaking Changes </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_aliases(implicit)","title":"<code>implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_aliases(external)","title":"<code>external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>When false, don't try to load unspecified modules to resolve aliases.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_aliases(max_iterations)","title":"<code>max_iterations</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Maximum number of iterations on the loader modules collection.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases","title":"resolve_module_aliases","text":"<pre><code>resolve_module_aliases(\n    obj: Object | Alias,\n    *,\n    implicit: bool = False,\n    external: bool | None = None,\n    seen: set[str] | None = None,\n    load_failures: set[str] | None = None,\n) -&gt; tuple[set[str], set[str]]\n</code></pre> <p>Follow aliases: try to recursively resolve all found aliases.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[set[str], set[str]]</code>           \u2013            <p>Both sets of resolved and unresolved aliases.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.24.0 - 2022-11-13 Breaking Changes </li> </ul>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases(obj)","title":"<code>obj</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The object and its members to recurse on.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases(implicit)","title":"<code>implicit</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When false, only try to resolve an alias if it is explicitly exported.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases(external)","title":"<code>external</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>When false, don't try to load unspecified modules to resolve aliases.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases(seen)","title":"<code>seen</code>","text":"(<code>set[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Used to avoid infinite recursion.</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.resolve_module_aliases(load_failures)","title":"<code>load_failures</code>","text":"(<code>set[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Set of external packages we failed to load (to prevent retries).</p>"},{"location":"reference/api/loaders/#griffe.GriffeLoader.stats","title":"stats","text":"<pre><code>stats() -&gt; Stats\n</code></pre> <p>Compute some statistics.</p> <p>Returns:</p> <ul> <li> <code>Stats</code>           \u2013            <p>Some statistics.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.ModulesCollection","title":"ModulesCollection","text":"<pre><code>ModulesCollection()\n</code></pre> <p>               Bases: <code>GetMembersMixin</code>, <code>SetMembersMixin</code>, <code>DelMembersMixin</code></p> <pre><code>\n              flowchart TD\n              griffe.ModulesCollection[ModulesCollection]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n\n                              _griffe.mixins.GetMembersMixin --&gt; griffe.ModulesCollection\n                \n                _griffe.mixins.SetMembersMixin --&gt; griffe.ModulesCollection\n                \n                _griffe.mixins.DelMembersMixin --&gt; griffe.ModulesCollection\n                \n\n\n              click griffe.ModulesCollection href \"\" \"griffe.ModulesCollection\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n            </code></pre> <p>A collection of modules, allowing easy access to members.</p> <p>Initialize the collection.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Loading APIs Alias resolution Modules collection </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_collection </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0Inspector <code></code>\u00a0modules_collection </li> <li> <code></code>\u00a0Visitor <code></code>\u00a0modules_collection </li> </ul> </li> <li> Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0modules_collection </li> <li> Models <ul> <li> <code></code>\u00a0Alias <code></code>\u00a0modules_collection </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0modules_collection </li> <li> <code></code>\u00a0Class <code></code>\u00a0modules_collection </li> <li> <code></code>\u00a0Function <code></code>\u00a0modules_collection </li> <li> <code></code>\u00a0Module <code></code>\u00a0modules_collection </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0modules_collection </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>A modules collection is always true-ish.</p> </li> <li> <code>__contains__</code>             \u2013              <p>Check if a module is in the collection.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>all_members</code>               (<code>dict[str, Module]</code>)           \u2013            <p>Members of the collection.</p> </li> <li> <code>is_collection</code>           \u2013            <p>Marked as collection to distinguish from objects.</p> </li> <li> <code>members</code>               (<code>dict[str, Module]</code>)           \u2013            <p>Members (modules) of the collection.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Module]\n</code></pre> <p>Members of the collection.</p> <p>This property is overwritten to simply return <code>self.members</code>, as <code>all_members</code> does not make sense for a modules collection.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection = True\n</code></pre> <p>Marked as collection to distinguish from objects.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Module] = {}\n</code></pre> <p>Members (modules) of the collection.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>A modules collection is always true-ish.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__contains__","title":"__contains__","text":"<pre><code>__contains__(item: Any) -&gt; bool\n</code></pre> <p>Check if a module is in the collection.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/loaders/#griffe.ModulesCollection.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/loaders/#griffe.LinesCollection","title":"LinesCollection","text":"<pre><code>LinesCollection()\n</code></pre> <p>A simple dictionary containing the modules source code lines.</p> <p>Initialize the collection.</p> Referenced by: <ul> <li> Changelog 0.31.0 - 2023-07-04 Breaking Changes </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0Inspector <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0Visitor <code></code>\u00a0lines_collection </li> </ul> </li> <li> Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0lines_collection </li> <li> Models <ul> <li> <code></code>\u00a0Alias <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0Class <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0Function <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0Module <code></code>\u00a0lines_collection </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lines_collection </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>A lines collection is always true-ish.</p> </li> <li> <code>__contains__</code>             \u2013              <p>Check if a file path is in the collection.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get the lines of a file path.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set the lines of a file path.</p> </li> <li> <code>items</code>             \u2013              <p>Return the collection items.</p> </li> <li> <code>keys</code>             \u2013              <p>Return the collection keys.</p> </li> <li> <code>values</code>             \u2013              <p>Return the collection values.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.LinesCollection.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>A lines collection is always true-ish.</p>"},{"location":"reference/api/loaders/#griffe.LinesCollection.__contains__","title":"__contains__","text":"<pre><code>__contains__(item: Path) -&gt; bool\n</code></pre> <p>Check if a file path is in the collection.</p>"},{"location":"reference/api/loaders/#griffe.LinesCollection.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: Path) -&gt; list[str]\n</code></pre> <p>Get the lines of a file path.</p>"},{"location":"reference/api/loaders/#griffe.LinesCollection.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(key: Path, value: list[str]) -&gt; None\n</code></pre> <p>Set the lines of a file path.</p>"},{"location":"reference/api/loaders/#griffe.LinesCollection.items","title":"items","text":"<pre><code>items() -&gt; ItemsView\n</code></pre> <p>Return the collection items.</p> <p>Returns:</p> <ul> <li> <code>ItemsView</code>           \u2013            <p>The collection items.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.LinesCollection.keys","title":"keys","text":"<pre><code>keys() -&gt; KeysView\n</code></pre> <p>Return the collection keys.</p> <p>Returns:</p> <ul> <li> <code>KeysView</code>           \u2013            <p>The collection keys.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.LinesCollection.values","title":"values","text":"<pre><code>values() -&gt; ValuesView\n</code></pre> <p>Return the collection values.</p> <p>Returns:</p> <ul> <li> <code>ValuesView</code>           \u2013            <p>The collection values.</p> </li> </ul>"},{"location":"reference/api/loaders/#additional-api","title":"Additional API","text":""},{"location":"reference/api/loaders/#griffe.Stats","title":"Stats","text":"<pre><code>Stats(loader: GriffeLoader)\n</code></pre> <p>Load statistics for a Griffe loader.</p> <p>Parameters:</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> </ul> Returned by: <ul> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0stats </li> </ul> <p>Methods:</p> <ul> <li> <code>as_text</code>             \u2013              <p>Format the statistics as text.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>by_kind</code>           \u2013            <p>Number of objects by kind.</p> </li> <li> <code>lines</code>           \u2013            <p>Total number of lines.</p> </li> <li> <code>loader</code>           \u2013            <p>The loader to compute stats for.</p> </li> <li> <code>modules_by_extension</code>           \u2013            <p>Number of modules by extension.</p> </li> <li> <code>packages</code>           \u2013            <p>Number of packages.</p> </li> <li> <code>time_spent_inspecting</code>           \u2013            <p>Time spent inspecting modules.</p> </li> <li> <code>time_spent_serializing</code>           \u2013            <p>Time spent serializing objects.</p> </li> <li> <code>time_spent_visiting</code>           \u2013            <p>Time spent visiting modules.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.Stats(loader)","title":"<code>loader</code>","text":"(<code>GriffeLoader</code>)           \u2013            <p>The loader to compute stats for.</p>"},{"location":"reference/api/loaders/#griffe.Stats.by_kind","title":"by_kind  <code>instance-attribute</code>","text":"<pre><code>by_kind = {MODULE: 0, CLASS: 0, FUNCTION: 0, ATTRIBUTE: 0}\n</code></pre> <p>Number of objects by kind.</p>"},{"location":"reference/api/loaders/#griffe.Stats.lines","title":"lines  <code>instance-attribute</code>","text":"<pre><code>lines = sum(len(lines) for lines in values())\n</code></pre> <p>Total number of lines.</p>"},{"location":"reference/api/loaders/#griffe.Stats.loader","title":"loader  <code>instance-attribute</code>","text":"<pre><code>loader = loader\n</code></pre> <p>The loader to compute stats for.</p>"},{"location":"reference/api/loaders/#griffe.Stats.modules_by_extension","title":"modules_by_extension  <code>instance-attribute</code>","text":"<pre><code>modules_by_extension = modules_by_extension\n</code></pre> <p>Number of modules by extension.</p>"},{"location":"reference/api/loaders/#griffe.Stats.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = len(top_modules)\n</code></pre> <p>Number of packages.</p>"},{"location":"reference/api/loaders/#griffe.Stats.time_spent_inspecting","title":"time_spent_inspecting  <code>instance-attribute</code>","text":"<pre><code>time_spent_inspecting = 0\n</code></pre> <p>Time spent inspecting modules.</p>"},{"location":"reference/api/loaders/#griffe.Stats.time_spent_serializing","title":"time_spent_serializing  <code>instance-attribute</code>","text":"<pre><code>time_spent_serializing = 0\n</code></pre> <p>Time spent serializing objects.</p>"},{"location":"reference/api/loaders/#griffe.Stats.time_spent_visiting","title":"time_spent_visiting  <code>instance-attribute</code>","text":"<pre><code>time_spent_visiting = 0\n</code></pre> <p>Time spent visiting modules.</p>"},{"location":"reference/api/loaders/#griffe.Stats.as_text","title":"as_text","text":"<pre><code>as_text() -&gt; str\n</code></pre> <p>Format the statistics as text.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Text stats.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.merge_stubs","title":"merge_stubs","text":"<pre><code>merge_stubs(mod1: Module, mod2: Module) -&gt; Module\n</code></pre> <p>Merge stubs into a module.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When both modules are regular modules (no stubs is passed).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Module</code>           \u2013            <p>The regular module.</p> </li> </ul>"},{"location":"reference/api/loaders/#griffe.merge_stubs(mod1)","title":"<code>mod1</code>","text":"(<code>Module</code>)           \u2013            <p>A regular module or stubs module.</p>"},{"location":"reference/api/loaders/#griffe.merge_stubs(mod2)","title":"<code>mod2</code>","text":"(<code>Module</code>)           \u2013            <p>A regular module or stubs module.</p>"},{"location":"reference/api/loggers/","title":"Loggers","text":""},{"location":"reference/api/loggers/#main-api","title":"Main API","text":""},{"location":"reference/api/loggers/#griffe.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger: Logger = _get()\n</code></pre> <p>Our global logger, used throughout the library.</p> <p>Griffe's output and error messages are logging messages.</p> <p>Griffe provides the <code>patch_loggers</code> function so dependent libraries can patch Griffe loggers as they see fit.</p> <p>For example, to fit in the MkDocs logging configuration and prefix each log message with the module name:</p> <pre><code>import logging\nfrom griffe import patch_loggers\n\n\nclass LoggerAdapter(logging.LoggerAdapter):\n    def __init__(self, prefix, logger):\n        super().__init__(logger, {})\n        self.prefix = prefix\n\n    def process(self, msg, kwargs):\n        return f\"{self.prefix}: {msg}\", kwargs\n\n\ndef get_logger(name):\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    return LoggerAdapter(name, logger)\n\n\npatch_loggers(get_logger)\n</code></pre> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Loggers </li> </ul>"},{"location":"reference/api/loggers/#griffe.get_logger","title":"get_logger","text":"<pre><code>get_logger(name: str = 'griffe') -&gt; Logger\n</code></pre> <p>Create and return a new logger instance.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Logger</code>           \u2013            <p>The logger.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Loggers </li> </ul>"},{"location":"reference/api/loggers/#griffe.get_logger(name)","title":"<code>name</code>","text":"(<code>str</code>, default:                   <code>'griffe'</code> )           \u2013            <p>The logger name.</p>"},{"location":"reference/api/loggers/#griffe.Logger","title":"Logger","text":"<pre><code>Logger(name: str)\n</code></pre> Returned by: <ul> <li> Reference Python API Loggers <ul> <li> <code></code>\u00a0logger </li> <li> <code></code>\u00a0get_logger </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>disable</code>             \u2013              <p>Temporarily disable logging.</p> </li> </ul>"},{"location":"reference/api/loggers/#griffe.Logger.disable","title":"disable","text":"<pre><code>disable() -&gt; Iterator[None]\n</code></pre> <p>Temporarily disable logging.</p> Referenced by: <ul> <li> Changelog 0.48.0 - 2024-07-15 Deprecations </li> </ul>"},{"location":"reference/api/loggers/#griffe.LogLevel","title":"LogLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.LogLevel[LogLevel]\n\n              \n\n              click griffe.LogLevel href \"\" \"griffe.LogLevel\"\n            </code></pre> <p>Enumeration of available log levels.</p> Used by: <ul> <li> Reference Python API <ul> <li> Agents <code></code>\u00a0safe_get__all__ </li> <li> Docstrings Docstring parsers <ul> <li> <code></code>\u00a0docstring_warning </li> <li> <code></code>\u00a0parse_docstring_annotation </li> </ul> </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>critical</code>           \u2013            <p>The CRITICAL log level.</p> </li> <li> <code>debug</code>           \u2013            <p>The DEBUG log level.</p> </li> <li> <code>error</code>           \u2013            <p>The ERROR log level.</p> </li> <li> <code>info</code>           \u2013            <p>The INFO log level.</p> </li> <li> <code>success</code>           \u2013            <p>The SUCCESS log level.</p> </li> <li> <code>trace</code>           \u2013            <p>The TRACE log level.</p> </li> <li> <code>warning</code>           \u2013            <p>The WARNING log level.</p> </li> </ul>"},{"location":"reference/api/loggers/#griffe.LogLevel.critical","title":"critical  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>critical = 'critical'\n</code></pre> <p>The CRITICAL log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.debug","title":"debug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug = 'debug'\n</code></pre> <p>The DEBUG log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error = 'error'\n</code></pre> <p>The ERROR log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.info","title":"info  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>info = 'info'\n</code></pre> <p>The INFO log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.success","title":"success  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>success = 'success'\n</code></pre> <p>The SUCCESS log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = 'trace'\n</code></pre> <p>The TRACE log level.</p>"},{"location":"reference/api/loggers/#griffe.LogLevel.warning","title":"warning  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warning = 'warning'\n</code></pre> <p>The WARNING log level.</p>"},{"location":"reference/api/loggers/#griffe.DEFAULT_LOG_LEVEL","title":"DEFAULT_LOG_LEVEL  <code>module-attribute</code>","text":"<pre><code>DEFAULT_LOG_LEVEL = os.getenv(\n    \"GRIFFE_LOG_LEVEL\", \"INFO\"\n).upper()\n</code></pre> <p>The default log level for the CLI.</p> <p>This can be overridden by the <code>GRIFFE_LOG_LEVEL</code> environment variable.</p>"},{"location":"reference/api/loggers/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/loggers/#griffe.patch_loggers","title":"patch_loggers","text":"<pre><code>patch_loggers(\n    get_logger_func: Callable[[str], Any],\n) -&gt; None\n</code></pre> <p>Patch Griffe logger and Griffe extensions' loggers.</p> <p>Parameters:</p> Referenced by: <ul> <li> Reference Python API Loggers <code></code>\u00a0logger </li> </ul>"},{"location":"reference/api/loggers/#griffe.patch_loggers(get_logger_func)","title":"<code>get_logger_func</code>","text":"(<code>Callable[[str], Any]</code>)           \u2013            <p>A function accepting a name as parameter and returning a logger.</p>"},{"location":"reference/api/models/","title":"Models","text":"<p>Griffe stores information extracted from Python source code into data models.</p> <p>These models represent trees of objects, starting with modules, and containing classes, functions, and attributes.</p> <p>Modules can have submodules, classes, functions and attributes. Classes can have nested classes, methods and attributes. Functions and attributes do not have any members.</p> <p>Indirections to objects declared in other modules are represented as \"aliases\". An alias therefore represents an imported object, and behaves almost exactly like the object it points to: it is a light wrapper around the object, with special methods and properties that allow to access the target's data transparently.</p> <p>The 5 models:</p> <ul> <li><code>Module</code></li> <li><code>Class</code></li> <li><code>Function</code></li> <li><code>Attribute</code></li> <li><code>Alias</code></li> </ul>"},{"location":"reference/api/models/#model-kind-enumeration","title":"Model kind enumeration","text":""},{"location":"reference/api/models/#griffe.Kind","title":"Kind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.Kind[Kind]\n\n              \n\n              click griffe.Kind href \"\" \"griffe.Kind\"\n            </code></pre> <p>Enumeration of the different object kinds.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API Models <code></code>\u00a0Alias </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Models <code></code>\u00a0Alias <code></code>\u00a0kind </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0kind </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>ALIAS</code>           \u2013            <p>Aliases (imported objects).</p> </li> <li> <code>ATTRIBUTE</code>           \u2013            <p>Attributes and properties.</p> </li> <li> <code>CLASS</code>           \u2013            <p>Classes.</p> </li> <li> <code>FUNCTION</code>           \u2013            <p>Functions and methods.</p> </li> <li> <code>MODULE</code>           \u2013            <p>Modules.</p> </li> </ul>"},{"location":"reference/api/models/#griffe.Kind.ALIAS","title":"ALIAS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALIAS = 'alias'\n</code></pre> <p>Aliases (imported objects).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases </li> </ul>"},{"location":"reference/api/models/#griffe.Kind.ATTRIBUTE","title":"ATTRIBUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTRIBUTE = 'attribute'\n</code></pre> <p>Attributes and properties.</p>"},{"location":"reference/api/models/#griffe.Kind.CLASS","title":"CLASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLASS = 'class'\n</code></pre> <p>Classes.</p>"},{"location":"reference/api/models/#griffe.Kind.FUNCTION","title":"FUNCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FUNCTION = 'function'\n</code></pre> <p>Functions and methods.</p>"},{"location":"reference/api/models/#griffe.Kind.MODULE","title":"MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MODULE = 'module'\n</code></pre> <p>Modules.</p>"},{"location":"reference/api/models/#models-base-classes","title":"Models base classes","text":""},{"location":"reference/api/models/#griffe.GetMembersMixin","title":"GetMembersMixin","text":"<p>Mixin class to share methods for accessing members.</p> <p>Methods:</p> <ul> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Same as <code>get_member</code>, with the item syntax <code>[]</code>.</p> </li> </ul> Subclassed by: <ul> <li> Reference Python API <ul> <li> Loaders <code></code>\u00a0ModulesCollection </li> <li> Models <code></code>\u00a0ObjectAliasMixin </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.GetMembersMixin.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.GetMembersMixin.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.GetMembersMixin.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.GetMembersMixin.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.SetMembersMixin","title":"SetMembersMixin","text":"<p>Mixin class to share methods for setting members.</p> <p>Methods:</p> <ul> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Same as <code>set_member</code>, with the item syntax <code>[]</code>.</p> </li> </ul> Subclassed by: <ul> <li> Reference Python API <ul> <li> Loaders <code></code>\u00a0ModulesCollection </li> <li> Models <code></code>\u00a0ObjectAliasMixin </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.SetMembersMixin.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/#griffe.SetMembersMixin.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.SetMembersMixin.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/#griffe.SetMembersMixin.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.SetMembersMixin.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.SetMembersMixin.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/#griffe.DelMembersMixin","title":"DelMembersMixin","text":"<p>Mixin class to share methods for deleting members.</p> <p>Methods:</p> <ul> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Same as <code>del_member</code>, with the item syntax <code>[]</code>.</p> </li> </ul> Subclassed by: <ul> <li> Reference Python API <ul> <li> Loaders <code></code>\u00a0ModulesCollection </li> <li> Models <code></code>\u00a0ObjectAliasMixin </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.DelMembersMixin.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.DelMembersMixin.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.DelMembersMixin.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/#griffe.DelMembersMixin.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.SerializationMixin","title":"SerializationMixin","text":"<p>Mixin class to share methods for de/serializing objects.</p> <p>Methods:</p> <ul> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> </ul> Subclassed by: <ul> <li> Reference Python API Models <code></code>\u00a0ObjectAliasMixin </li> </ul>"},{"location":"reference/api/models/#griffe.SerializationMixin.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.SerializationMixin.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/#griffe.SerializationMixin.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/#griffe.SerializationMixin.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.SerializationMixin.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/#griffe.SerializationMixin.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin","title":"ObjectAliasMixin","text":"<p>               Bases: <code>GetMembersMixin</code>, <code>SetMembersMixin</code>, <code>DelMembersMixin</code>, <code>SerializationMixin</code></p> <pre><code>\n              flowchart TD\n              griffe.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.mixins.GetMembersMixin --&gt; griffe.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; griffe.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; griffe.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; griffe.ObjectAliasMixin\n                \n\n\n              click griffe.ObjectAliasMixin href \"\" \"griffe.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>Mixin class to share methods that appear both in objects and aliases, unchanged.</p> <p>Attributes:</p> <ul> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> </ul> Subclassed by: <ul> <li> Reference Python API <ul> <li> Models <code></code>\u00a0Alias </li> <li> Models <code></code>\u00a0Object </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.ObjectAliasMixin.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/#griffe.Object","title":"Object","text":"<pre><code>Object(\n    name: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    runtime: bool = True,\n    docstring: Docstring | None = None,\n    parent: Module | Class | None = None,\n    lines_collection: LinesCollection | None = None,\n    modules_collection: ModulesCollection | None = None,\n)\n</code></pre> <p>               Bases: <code>ObjectAliasMixin</code></p> <pre><code>\n              flowchart TD\n              griffe.Object[Object]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.mixins.ObjectAliasMixin --&gt; griffe.Object\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n              click griffe.Object href \"\" \"griffe.Object\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>An abstract class representing a Python object.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs <ul> <li> Extending APIs Writing extensions How it works </li> <li> Navigating APIs Moving down: members Inherited members </li> </ul> </li> <li> Reference Python API Models <ul> <li> <code></code>\u00a0Attribute </li> <li> <code></code>\u00a0Class </li> <li> <code></code>\u00a0Function </li> <li> <code></code>\u00a0Module </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Helpers <ul> <li> <code></code>\u00a0htree </li> <li> <code></code>\u00a0vtree </li> </ul> </li> <li> Models <code></code>\u00a0Alias <code></code>\u00a0final_target </li> </ul> </li> </ul> Subclassed by: <ul> <li> Reference Python API Models <ul> <li> <code></code>\u00a0Attribute </li> <li> <code></code>\u00a0Class </li> <li> <code></code>\u00a0Function </li> <li> <code></code>\u00a0Module </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> API checks <ul> <li> <code></code>\u00a0AttributeChangedTypeBreakage </li> <li> <code></code>\u00a0AttributeChangedValueBreakage </li> <li> <code></code>\u00a0Breakage </li> <li> <code></code>\u00a0ClassRemovedBaseBreakage </li> <li> <code></code>\u00a0ObjectChangedKindBreakage </li> <li> <code></code>\u00a0ObjectRemovedBreakage </li> <li> <code></code>\u00a0ParameterAddedRequiredBreakage </li> <li> <code></code>\u00a0ParameterChangedDefaultBreakage </li> <li> <code></code>\u00a0ParameterChangedKindBreakage </li> <li> <code></code>\u00a0ParameterChangedRequiredBreakage </li> <li> <code></code>\u00a0ParameterMovedBreakage </li> <li> <code></code>\u00a0ParameterRemovedBreakage </li> <li> <code></code>\u00a0ReturnChangedTypeBreakage </li> </ul> </li> <li> Extensions <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0on_instance </li> <li> <code></code>\u00a0on_members </li> </ul> </li> <li> Helpers <ul> <li> <code></code>\u00a0htree </li> <li> <code></code>\u00a0vtree </li> </ul> </li> <li> Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_wildcards </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An object is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of members in this object, recursively.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this object's data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>deprecated</code>               (<code>bool | str | None</code>)           \u2013            <p>Whether this object is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The object docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this object has a docstring (empty or not).</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this object or any of its members has a docstring (empty or not).</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this object.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>               (<code>Kind</code>)           \u2013            <p>The object kind.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The object members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to this object or its parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The object name.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parent</code>               (<code>Module | Class | None</code>)           \u2013            <p>The parent of the object (none if top module).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this object is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this object is available at runtime.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/api/models/#griffe.Object(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The object name, as declared in the code.</p>"},{"location":"reference/api/models/#griffe.Object(lineno)","title":"<code>lineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The object starting line, or None for modules. Lines start at 1.</p>"},{"location":"reference/api/models/#griffe.Object(endlineno)","title":"<code>endlineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The object ending line (inclusive), or None for modules.</p>"},{"location":"reference/api/models/#griffe.Object(runtime)","title":"<code>runtime</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether this object is present at runtime or not.</p>"},{"location":"reference/api/models/#griffe.Object(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring | None</code>, default:                   <code>None</code> )           \u2013            <p>The object docstring.</p>"},{"location":"reference/api/models/#griffe.Object(parent)","title":"<code>parent</code>","text":"(<code>Module | Class | None</code>, default:                   <code>None</code> )           \u2013            <p>The object parent.</p>"},{"location":"reference/api/models/#griffe.Object(lines_collection)","title":"<code>lines_collection</code>","text":"(<code>LinesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of source code lines.</p>"},{"location":"reference/api/models/#griffe.Object(modules_collection)","title":"<code>modules_collection</code>","text":"(<code>ModulesCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>A collection of modules.</p>"},{"location":"reference/api/models/#griffe.Object.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Moving down: members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.Object.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.Object.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0path </li> <li> <code></code>\u00a0Class <code></code>\u00a0path </li> <li> <code></code>\u00a0Function <code></code>\u00a0path </li> <li> <code></code>\u00a0Module <code></code>\u00a0path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0path </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.Object.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: bool | str | None = None\n</code></pre> <p>Whether this object is deprecated (boolean or deprecation message).</p> Referenced by: <ul> <li> Extensions Official griffe-warnings-deprecated </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0lineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> </ul>"},{"location":"reference/api/models/#griffe.Object.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/#griffe.Object.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p> <p>See also: <code>relative_filepath</code>, <code>relative_package_filepath</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.filepath\nPosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.Object.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a docstring (empty or not).</p> <p>See also: <code>docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a docstring (empty or not).</p> <p>Inherited members are not considered. Imported members are not considered, unless they are also public.</p> <p>See also: <code>docstring</code>, <code>has_docstring</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/#griffe.Object.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Always false for objects.</p> <p>Only aliases can be marked as inherited.</p>"},{"location":"reference/api/models/#griffe.Object.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Always false for objects.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Object kind </li> </ul> </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also:  <code>is_module</code>. <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for objects.</p>"},{"location":"reference/api/models/#griffe.Object.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this object is an <code>__init__.py</code> module.</p> <p>See also:  <code>is_module</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Module <code></code>\u00a0is_module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_module </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also:  <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this object is a namespace subpackage.</p> <p>See also:  <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this object is a package (top module).</p> <p>See also:  <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this object is a subpackage.</p> <p>See also:  <code>is_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/#griffe.Object.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: Kind\n</code></pre> <p>The object kind.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> </ul>"},{"location":"reference/api/models/#griffe.Object.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0has_labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0has_labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0endlineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0endlineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>lines_collection</code>, <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n&gt;&gt;&gt; # The `module` of a module is itself.\n&gt;&gt;&gt; markdown[\"core\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n</code></pre> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0package </li> <li> <code></code>\u00a0Class <code></code>\u00a0package </li> <li> <code></code>\u00a0Function <code></code>\u00a0package </li> <li> <code></code>\u00a0Module <code></code>\u00a0package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0package </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> </ul>"},{"location":"reference/api/models/#griffe.Object.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/#griffe.Object.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/api/models/#griffe.Object.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].package\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0module </li> <li> <code></code>\u00a0Class <code></code>\u00a0module </li> <li> <code></code>\u00a0Function <code></code>\u00a0module </li> <li> <code></code>\u00a0Module <code></code>\u00a0module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0module </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/#griffe.Object.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p> <p>See also: <code>canonical_path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].path\n'markdown.core.Markdown.references'\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Class <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Function <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Module <code></code>\u00a0canonical_path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0canonical_path </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/#griffe.Object.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/api/models/#griffe.Object.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An object is always true-ish.</p>"},{"location":"reference/api/models/#griffe.Object.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.Object.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/#griffe.Object.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The number of members in this object, recursively.</p>"},{"location":"reference/api/models/#griffe.Object.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/#griffe.Object.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/#griffe.Object.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this object's data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> </ul>"},{"location":"reference/api/models/#griffe.Object.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/#griffe.Object.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/#griffe.Object.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/#griffe.Object.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/#griffe.Object.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/#griffe.Object.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/#griffe.Object.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/#griffe.Object.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/#griffe.Object.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/#griffe.Object.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/#griffe.Object.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/#griffe.Object.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/#griffe.Object.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/#griffe.Object.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/serializers/","title":"Serializers","text":""},{"location":"reference/api/serializers/#main-api","title":"Main API","text":"<p>See the <code>as_json()</code> and <code>from_json()</code> methods of objects.</p>"},{"location":"reference/api/serializers/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/serializers/#griffe.JSONEncoder","title":"JSONEncoder","text":"<pre><code>JSONEncoder(*args: Any, full: bool = False, **kwargs: Any)\n</code></pre> <p>               Bases: <code>JSONEncoder</code></p> <pre><code>\n              flowchart TD\n              griffe.JSONEncoder[JSONEncoder]\n\n              \n\n              click griffe.JSONEncoder href \"\" \"griffe.JSONEncoder\"\n            </code></pre> <p>JSON encoder.</p> <p>JSON encoders can be used directly, or through the <code>json.dump</code> or <code>json.dumps</code> methods.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from griffe import JSONEncoder\n&gt;&gt;&gt; JSONEncoder(full=True).encode(..., **kwargs)\n</code></pre> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from griffe import JSONEncoder\n&gt;&gt;&gt; json.dumps(..., cls=JSONEncoder, full=True, **kwargs)\n</code></pre> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <code></code>\u00a0griffe Serializers </li> </ul> <p>Methods:</p> <ul> <li> <code>default</code>             \u2013              <p>Return a serializable representation of the given object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>full</code>               (<code>bool</code>)           \u2013            <p>Whether to dump full data or base data.</p> </li> </ul>"},{"location":"reference/api/serializers/#griffe.JSONEncoder(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>See <code>json.JSONEncoder</code>.</p>"},{"location":"reference/api/serializers/#griffe.JSONEncoder(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to dump full data or base data. If you plan to reload the data in Python memory using the <code>json_decoder</code>, you don't need the full data as it can be inferred again using the base data. If you want to feed a non-Python tool instead, dump the full data.</p>"},{"location":"reference/api/serializers/#griffe.JSONEncoder(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>See <code>json.JSONEncoder</code>.</p>"},{"location":"reference/api/serializers/#griffe.JSONEncoder.full","title":"full  <code>instance-attribute</code>","text":"<pre><code>full: bool = full\n</code></pre> <p>Whether to dump full data or base data.</p>"},{"location":"reference/api/serializers/#griffe.JSONEncoder.default","title":"default","text":"<pre><code>default(obj: Any) -&gt; Any\n</code></pre> <p>Return a serializable representation of the given object.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>A serializable representation.</p> </li> </ul>"},{"location":"reference/api/serializers/#griffe.JSONEncoder.default(obj)","title":"<code>obj</code>","text":"(<code>Any</code>)           \u2013            <p>The object to serialize.</p>"},{"location":"reference/api/serializers/#griffe.json_decoder","title":"json_decoder","text":"<pre><code>json_decoder(\n    obj_dict: dict[str, Any],\n) -&gt; (\n    dict[str, Any] | Object | Alias | Parameter | str | Expr\n)\n</code></pre> <p>Decode dictionaries as data classes.</p> <p>The <code>json.loads</code> method walks the tree from bottom to top.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from griffe import json_decoder\n&gt;&gt;&gt; json.loads(..., object_hook=json_decoder)\n</code></pre> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any] | Object | Alias | Parameter | str | Expr</code>           \u2013            <p>An instance of a data class.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers <code></code>\u00a0JSONEncoder </li> </ul> </li> </ul>"},{"location":"reference/api/serializers/#griffe.json_decoder(obj_dict)","title":"<code>obj_dict</code>","text":"(<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to decode.</p>"},{"location":"reference/api/docstrings/models/","title":"Docstring models","text":""},{"location":"reference/api/docstrings/models/#main-api","title":"Main API","text":""},{"location":"reference/api/docstrings/models/#griffe.Docstring","title":"Docstring","text":"<pre><code>Docstring(\n    value: str,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    parent: Object | None = None,\n    parser: DocstringStyle | Parser | None = None,\n    parser_options: dict[str, Any] | None = None,\n)\n</code></pre> <p>This class represents docstrings.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs Navigating APIs Docstrings </li> <li> How-to Using Griffe as a docstring-parsing library </li> </ul> </li> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul> Used by: <ul> <li> Reference Python API Docstrings Docstring parsers <ul> <li> <code></code>\u00a0docstring_warning </li> <li> <code></code>\u00a0infer_docstring_style </li> <li> <code></code>\u00a0parse </li> <li> <code></code>\u00a0parse_auto </li> <li> <code></code>\u00a0parse_docstring_annotation </li> <li> <code></code>\u00a0parse_google </li> <li> <code></code>\u00a0parse_numpy </li> <li> <code></code>\u00a0parse_sphinx </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this docstring's data as a dictionary.</p> </li> <li> <code>parse</code>             \u2013              <p>Parse the docstring into structured data.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the docstring.</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the docstring.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines of the docstring.</p> </li> <li> <code>parent</code>               (<code>Object | None</code>)           \u2013            <p>The object this docstring is attached to.</p> </li> <li> <code>parsed</code>               (<code>list[DocstringSection]</code>)           \u2013            <p>The docstring sections, parsed into structured data.</p> </li> <li> <code>parser</code>               (<code>DocstringStyle | Parser | None</code>)           \u2013            <p>The selected docstring parser.</p> </li> <li> <code>parser_options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The configured parsing options.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The original, uncleaned value of the docstring as written in the source.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(value)","title":"<code>value</code>","text":"(<code>str</code>)           \u2013            <p>The docstring value.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(lineno)","title":"<code>lineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The starting line number.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(endlineno)","title":"<code>endlineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The ending line number.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(parent)","title":"<code>parent</code>","text":"(<code>Object | None</code>, default:                   <code>None</code> )           \u2013            <p>The parent object on which this docstring is attached.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(parser)","title":"<code>parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. By default, no parsing is done.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring(parser_options)","title":"<code>parser_options</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the docstring.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <code></code>\u00a0lineno </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the docstring.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <code></code>\u00a0endlineno </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines of the docstring.</p> <p>See also: <code>source</code>.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Object | None = parent\n</code></pre> <p>The object this docstring is attached to.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parsed","title":"parsed  <code>cached</code> <code>property</code>","text":"<pre><code>parsed: list[DocstringSection]\n</code></pre> <p>The docstring sections, parsed into structured data.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parser","title":"parser  <code>instance-attribute</code>","text":"<pre><code>parser: DocstringStyle | Parser | None = parser\n</code></pre> <p>The selected docstring parser.</p> <p>See also: <code>parser_options</code>, <code>parse</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <ul> <li> <code></code>\u00a0parser_options </li> <li> <code></code>\u00a0parse </li> </ul> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parser_options","title":"parser_options  <code>instance-attribute</code>","text":"<pre><code>parser_options: dict[str, Any] = parser_options or {}\n</code></pre> <p>The configured parsing options.</p> <p>See also: <code>parser</code>, <code>parse</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <ul> <li> <code></code>\u00a0parser </li> <li> <code></code>\u00a0parse </li> </ul> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The original, uncleaned value of the docstring as written in the source.</p> <p>See also: <code>value</code>.</p> Referenced by: <ul> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0value </li> </ul> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str = cleandoc(rstrip())\n</code></pre> <p>The original value of the docstring, cleaned by <code>inspect.cleandoc</code>.</p> <p>See also: <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <code></code>\u00a0source </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this docstring's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parse","title":"parse","text":"<pre><code>parse(\n    parser: DocstringStyle | Parser | None = None,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring into structured data.</p> <p>See also: <code>parser</code>, <code>parser_options</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>The parsed docstring as a list of sections.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0Docstring <ul> <li> <code></code>\u00a0parser </li> <li> <code></code>\u00a0parser_options </li> </ul> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parse(parser)","title":"<code>parser</code>","text":"(<code>DocstringStyle | Parser | None</code>, default:                   <code>None</code> )           \u2013            <p>The docstring parser to use. In order: use the given parser, or the self parser, or no parser (return a single text section).</p>"},{"location":"reference/api/docstrings/models/#griffe.Docstring.parse(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional docstring parsing options.</p>"},{"location":"reference/api/docstrings/models/#advanced-api-sections","title":"Advanced API: Sections","text":""},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind","title":"DocstringSectionKind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionKind[DocstringSectionKind]\n\n              \n\n              click griffe.DocstringSectionKind href \"\" \"griffe.DocstringSectionKind\"\n            </code></pre> <p>Enumeration of the possible docstring section kinds.</p> Returned by: <ul> <li> Reference Python API Docstrings Docstring models <ul> <li> <code></code>\u00a0DocstringSection <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionAdmonition <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionAttributes <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionClasses <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionDeprecated <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionExamples <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionFunctions <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionModules <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionOtherParameters <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionParameters <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionRaises <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionReceives <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionReturns <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionText <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionWarns <code></code>\u00a0kind </li> <li> <code></code>\u00a0DocstringSectionYields <code></code>\u00a0kind </li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li> <code>admonition</code>           \u2013            <p>Admonition block.</p> </li> <li> <code>attributes</code>           \u2013            <p>Attributes section.</p> </li> <li> <code>classes</code>           \u2013            <p>Classes section.</p> </li> <li> <code>deprecated</code>           \u2013            <p>Deprecation section.</p> </li> <li> <code>examples</code>           \u2013            <p>Examples section.</p> </li> <li> <code>functions</code>           \u2013            <p>Functions section.</p> </li> <li> <code>modules</code>           \u2013            <p>Modules section.</p> </li> <li> <code>other_parameters</code>           \u2013            <p>Other parameters (keyword arguments) section.</p> </li> <li> <code>parameters</code>           \u2013            <p>Parameters section.</p> </li> <li> <code>raises</code>           \u2013            <p>Raises (exceptions) section.</p> </li> <li> <code>receives</code>           \u2013            <p>Received value(s) (generators) section.</p> </li> <li> <code>returns</code>           \u2013            <p>Returned value(s) section.</p> </li> <li> <code>text</code>           \u2013            <p>Text section.</p> </li> <li> <code>warns</code>           \u2013            <p>Warnings section.</p> </li> <li> <code>yields</code>           \u2013            <p>Yielded value(s) (generators) section.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.admonition","title":"admonition  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admonition = 'admonition'\n</code></pre> <p>Admonition block.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes = 'attributes'\n</code></pre> <p>Attributes section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.classes","title":"classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>classes = 'classes'\n</code></pre> <p>Classes section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = 'deprecated'\n</code></pre> <p>Deprecation section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = 'examples'\n</code></pre> <p>Examples section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.functions","title":"functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>functions = 'functions'\n</code></pre> <p>Functions section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.modules","title":"modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modules = 'modules'\n</code></pre> <p>Modules section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.other_parameters","title":"other_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>other_parameters = 'other parameters'\n</code></pre> <p>Other parameters (keyword arguments) section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = 'parameters'\n</code></pre> <p>Parameters section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.raises","title":"raises  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raises = 'raises'\n</code></pre> <p>Raises (exceptions) section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.receives","title":"receives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>receives = 'receives'\n</code></pre> <p>Received value(s) (generators) section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.returns","title":"returns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns = 'returns'\n</code></pre> <p>Returned value(s) section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text = 'text'\n</code></pre> <p>Text section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.warns","title":"warns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warns = 'warns'\n</code></pre> <p>Warnings section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionKind.yields","title":"yields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yields = 'yields'\n</code></pre> <p>Yielded value(s) (generators) section.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText","title":"DocstringSectionText","text":"<pre><code>DocstringSectionText(value: str, title: str | None = None)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionText[DocstringSectionText]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionText\n                \n\n\n              click griffe.DocstringSectionText href \"\" \"griffe.DocstringSectionText\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a text section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText(value)","title":"<code>value</code>","text":"(<code>str</code>)           \u2013            <p>The section text.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = text\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionText.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters","title":"DocstringSectionParameters","text":"<pre><code>DocstringSectionParameters(\n    value: list[DocstringParameter],\n    title: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionParameters[DocstringSectionParameters]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionParameters\n                \n\n\n              click griffe.DocstringSectionParameters href \"\" \"griffe.DocstringSectionParameters\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a parameters section.</p> <p>Parameters:</p> Subclassed by: <ul> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0DocstringSectionOtherParameters </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringParameter]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters(value)","title":"<code>value</code>","text":"(<code>list[DocstringParameter]</code>)           \u2013            <p>The section parameters.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = parameters\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringParameter] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionParameters.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters","title":"DocstringSectionOtherParameters","text":"<pre><code>DocstringSectionOtherParameters(\n    value: list[DocstringParameter],\n    title: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringSectionParameters</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionOtherParameters[DocstringSectionOtherParameters]\n              _griffe.docstrings.models.DocstringSectionParameters[DocstringSectionParameters]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSectionParameters --&gt; griffe.DocstringSectionOtherParameters\n                                _griffe.docstrings.models.DocstringSection --&gt; _griffe.docstrings.models.DocstringSectionParameters\n                \n\n\n\n              click griffe.DocstringSectionOtherParameters href \"\" \"griffe.DocstringSectionOtherParameters\"\n              click _griffe.docstrings.models.DocstringSectionParameters href \"\" \"_griffe.docstrings.models.DocstringSectionParameters\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents an other parameters section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringParameter]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters(value)","title":"<code>value</code>","text":"(<code>list[DocstringParameter]</code>)           \u2013            <p>The section parameters.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = other_parameters\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringParameter] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionOtherParameters.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises","title":"DocstringSectionRaises","text":"<pre><code>DocstringSectionRaises(\n    value: list[DocstringRaise], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionRaises[DocstringSectionRaises]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionRaises\n                \n\n\n              click griffe.DocstringSectionRaises href \"\" \"griffe.DocstringSectionRaises\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a raises section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringRaise]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises(value)","title":"<code>value</code>","text":"(<code>list[DocstringRaise]</code>)           \u2013            <p>The section exceptions.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = raises\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringRaise] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionRaises.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns","title":"DocstringSectionWarns","text":"<pre><code>DocstringSectionWarns(\n    value: list[DocstringWarn], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionWarns[DocstringSectionWarns]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionWarns\n                \n\n\n              click griffe.DocstringSectionWarns href \"\" \"griffe.DocstringSectionWarns\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a warns section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringWarn]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns(value)","title":"<code>value</code>","text":"(<code>list[DocstringWarn]</code>)           \u2013            <p>The section warnings.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = warns\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringWarn] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionWarns.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns","title":"DocstringSectionReturns","text":"<pre><code>DocstringSectionReturns(\n    value: list[DocstringReturn], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionReturns[DocstringSectionReturns]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionReturns\n                \n\n\n              click griffe.DocstringSectionReturns href \"\" \"griffe.DocstringSectionReturns\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a returns section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringReturn]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns(value)","title":"<code>value</code>","text":"(<code>list[DocstringReturn]</code>)           \u2013            <p>The section returned items.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = returns\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringReturn] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReturns.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields","title":"DocstringSectionYields","text":"<pre><code>DocstringSectionYields(\n    value: list[DocstringYield], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionYields[DocstringSectionYields]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionYields\n                \n\n\n              click griffe.DocstringSectionYields href \"\" \"griffe.DocstringSectionYields\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a yields section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringYield]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields(value)","title":"<code>value</code>","text":"(<code>list[DocstringYield]</code>)           \u2013            <p>The section yielded items.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = yields\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringYield] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionYields.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives","title":"DocstringSectionReceives","text":"<pre><code>DocstringSectionReceives(\n    value: list[DocstringReceive], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionReceives[DocstringSectionReceives]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionReceives\n                \n\n\n              click griffe.DocstringSectionReceives href \"\" \"griffe.DocstringSectionReceives\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a receives section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringReceive]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives(value)","title":"<code>value</code>","text":"(<code>list[DocstringReceive]</code>)           \u2013            <p>The section received items.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = receives\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringReceive] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionReceives.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples","title":"DocstringSectionExamples","text":"<pre><code>DocstringSectionExamples(\n    value: list[tuple[Literal[text, examples], str]],\n    title: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionExamples[DocstringSectionExamples]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionExamples\n                \n\n\n              click griffe.DocstringSectionExamples href \"\" \"griffe.DocstringSectionExamples\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents an examples section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[tuple[Literal[text, examples], str]]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples(value)","title":"<code>value</code>","text":"(<code>list[tuple[Literal[text, examples], str]]</code>)           \u2013            <p>The section examples.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = examples\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[tuple[Literal[text, examples], str]] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionExamples.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes","title":"DocstringSectionAttributes","text":"<pre><code>DocstringSectionAttributes(\n    value: list[DocstringAttribute],\n    title: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionAttributes[DocstringSectionAttributes]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionAttributes\n                \n\n\n              click griffe.DocstringSectionAttributes href \"\" \"griffe.DocstringSectionAttributes\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents an attributes section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringAttribute]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes(value)","title":"<code>value</code>","text":"(<code>list[DocstringAttribute]</code>)           \u2013            <p>The section attributes.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = attributes\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringAttribute] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAttributes.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions","title":"DocstringSectionFunctions","text":"<pre><code>DocstringSectionFunctions(\n    value: list[DocstringFunction], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionFunctions[DocstringSectionFunctions]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionFunctions\n                \n\n\n              click griffe.DocstringSectionFunctions href \"\" \"griffe.DocstringSectionFunctions\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a functions/methods section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringFunction]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions(value)","title":"<code>value</code>","text":"(<code>list[DocstringFunction]</code>)           \u2013            <p>The section functions.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = functions\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringFunction] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionFunctions.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses","title":"DocstringSectionClasses","text":"<pre><code>DocstringSectionClasses(\n    value: list[DocstringClass], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionClasses[DocstringSectionClasses]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionClasses\n                \n\n\n              click griffe.DocstringSectionClasses href \"\" \"griffe.DocstringSectionClasses\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a classes section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringClass]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses(value)","title":"<code>value</code>","text":"(<code>list[DocstringClass]</code>)           \u2013            <p>The section classes.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = classes\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringClass] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionClasses.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules","title":"DocstringSectionModules","text":"<pre><code>DocstringSectionModules(\n    value: list[DocstringModule], title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionModules[DocstringSectionModules]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionModules\n                \n\n\n              click griffe.DocstringSectionModules href \"\" \"griffe.DocstringSectionModules\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a modules section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>list[DocstringModule]</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules(value)","title":"<code>value</code>","text":"(<code>list[DocstringModule]</code>)           \u2013            <p>The section modules.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = modules\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: list[DocstringModule] = value\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionModules.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated","title":"DocstringSectionDeprecated","text":"<pre><code>DocstringSectionDeprecated(\n    version: str, text: str, title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionDeprecated[DocstringSectionDeprecated]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionDeprecated\n                \n\n\n              click griffe.DocstringSectionDeprecated href \"\" \"griffe.DocstringSectionDeprecated\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents a deprecated section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>DocstringDeprecated</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated(version)","title":"<code>version</code>","text":"(<code>str</code>)           \u2013            <p>The deprecation version.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The deprecation text.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = deprecated\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: DocstringDeprecated = DocstringDeprecated(\n    annotation=version, description=text\n)\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionDeprecated.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition","title":"DocstringSectionAdmonition","text":"<pre><code>DocstringSectionAdmonition(\n    kind: str, text: str, title: str | None = None\n)\n</code></pre> <p>               Bases: <code>DocstringSection</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringSectionAdmonition[DocstringSectionAdmonition]\n              _griffe.docstrings.models.DocstringSection[DocstringSection]\n\n                              _griffe.docstrings.models.DocstringSection --&gt; griffe.DocstringSectionAdmonition\n                \n\n\n              click griffe.DocstringSectionAdmonition href \"\" \"griffe.DocstringSectionAdmonition\"\n              click _griffe.docstrings.models.DocstringSection href \"\" \"_griffe.docstrings.models.DocstringSection\"\n            </code></pre> <p>This class represents an admonition section.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>DocstringAdmonition</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition(kind)","title":"<code>kind</code>","text":"(<code>str</code>)           \u2013            <p>The admonition kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The admonition text.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind = admonition\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: DocstringAdmonition = DocstringAdmonition(\n    annotation=kind, description=text\n)\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSectionAdmonition.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#advanced-api-section-items","title":"Advanced API: Section items","text":""},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition","title":"DocstringAdmonition","text":"<pre><code>DocstringAdmonition(\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringAdmonition[DocstringAdmonition]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringElement --&gt; griffe.DocstringAdmonition\n                \n\n\n              click griffe.DocstringAdmonition href \"\" \"griffe.DocstringAdmonition\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents an admonition.</p> <p>Parameters:</p> Returned by: <ul> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0DocstringSectionAdmonition <code></code>\u00a0value </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>contents</code>               (<code>str</code>)           \u2013            <p>The contents of this admonition.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>kind</code>               (<code>str | Expr | None</code>)           \u2013            <p>The kind of this admonition.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.contents","title":"contents  <code>property</code> <code>writable</code>","text":"<pre><code>contents: str\n</code></pre> <p>The contents of this admonition.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.kind","title":"kind  <code>property</code> <code>writable</code>","text":"<pre><code>kind: str | Expr | None\n</code></pre> <p>The kind of this admonition.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAdmonition.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated","title":"DocstringDeprecated","text":"<pre><code>DocstringDeprecated(\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringDeprecated[DocstringDeprecated]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringElement --&gt; griffe.DocstringDeprecated\n                \n\n\n              click griffe.DocstringDeprecated href \"\" \"griffe.DocstringDeprecated\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented deprecated item.</p> <p>Parameters:</p> Returned by: <ul> <li> Reference Python API Docstrings Docstring models <code></code>\u00a0DocstringSectionDeprecated <code></code>\u00a0value </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>The version of this deprecation.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated.version","title":"version  <code>property</code> <code>writable</code>","text":"<pre><code>version: str\n</code></pre> <p>The version of this deprecation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringDeprecated.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise","title":"DocstringRaise","text":"<pre><code>DocstringRaise(\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringRaise[DocstringRaise]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringElement --&gt; griffe.DocstringRaise\n                \n\n\n              click griffe.DocstringRaise href \"\" \"griffe.DocstringRaise\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented raise value.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringRaise.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn","title":"DocstringWarn","text":"<pre><code>DocstringWarn(\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringWarn[DocstringWarn]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringElement --&gt; griffe.DocstringWarn\n                \n\n\n              click griffe.DocstringWarn href \"\" \"griffe.DocstringWarn\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented warn value.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringWarn.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn","title":"DocstringReturn","text":"<pre><code>DocstringReturn(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringReturn[DocstringReturn]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringReturn\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringReturn href \"\" \"griffe.DocstringReturn\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented return value.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReturn.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield","title":"DocstringYield","text":"<pre><code>DocstringYield(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringYield[DocstringYield]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringYield\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringYield href \"\" \"griffe.DocstringYield\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented yield value.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringYield.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive","title":"DocstringReceive","text":"<pre><code>DocstringReceive(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringReceive[DocstringReceive]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringReceive\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringReceive href \"\" \"griffe.DocstringReceive\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented receive value.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringReceive.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter","title":"DocstringParameter","text":"<pre><code>DocstringParameter(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringParameter[DocstringParameter]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringParameter\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringParameter href \"\" \"griffe.DocstringParameter\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represent a documented function parameter.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>default</code>               (<code>str | None</code>)           \u2013            <p>The default value of this parameter.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default: str | None\n</code></pre> <p>The default value of this parameter.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringParameter.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute","title":"DocstringAttribute","text":"<pre><code>DocstringAttribute(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringAttribute[DocstringAttribute]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringAttribute\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringAttribute href \"\" \"griffe.DocstringAttribute\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented module/class attribute.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringAttribute.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction","title":"DocstringFunction","text":"<pre><code>DocstringFunction(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringFunction[DocstringFunction]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringFunction\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringFunction href \"\" \"griffe.DocstringFunction\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented function.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>signature</code>               (<code>str | Expr | None</code>)           \u2013            <p>The function signature.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.signature","title":"signature  <code>property</code>","text":"<pre><code>signature: str | Expr | None\n</code></pre> <p>The function signature.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringFunction.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass","title":"DocstringClass","text":"<pre><code>DocstringClass(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringClass[DocstringClass]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringClass\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringClass href \"\" \"griffe.DocstringClass\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented class.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>signature</code>               (<code>str | Expr | None</code>)           \u2013            <p>The class signature.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.signature","title":"signature  <code>property</code>","text":"<pre><code>signature: str | Expr | None\n</code></pre> <p>The class signature.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringClass.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule","title":"DocstringModule","text":"<pre><code>DocstringModule(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringNamedElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringModule[DocstringModule]\n              _griffe.docstrings.models.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringNamedElement --&gt; griffe.DocstringModule\n                                _griffe.docstrings.models.DocstringElement --&gt; _griffe.docstrings.models.DocstringNamedElement\n                \n\n\n\n              click griffe.DocstringModule href \"\" \"griffe.DocstringModule\"\n              click _griffe.docstrings.models.DocstringNamedElement href \"\" \"_griffe.docstrings.models.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This class represents a documented module.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringModule.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#models-base-classes","title":"Models base classes","text":""},{"location":"reference/api/docstrings/models/#griffe.DocstringElement","title":"DocstringElement","text":"<pre><code>DocstringElement(\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n)\n</code></pre> <p>This base class represents annotated, nameless elements.</p> <p>Parameters:</p> Subclassed by: <ul> <li> Reference Python API Docstrings Docstring models <ul> <li> <code></code>\u00a0DocstringAdmonition </li> <li> <code></code>\u00a0DocstringDeprecated </li> <li> <code></code>\u00a0DocstringNamedElement </li> <li> <code></code>\u00a0DocstringRaise </li> <li> <code></code>\u00a0DocstringWarn </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringElement.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement","title":"DocstringNamedElement","text":"<pre><code>DocstringNamedElement(\n    name: str,\n    *,\n    description: str,\n    annotation: str | Expr | None = None,\n    value: str | None = None,\n)\n</code></pre> <p>               Bases: <code>DocstringElement</code></p> <pre><code>\n              flowchart TD\n              griffe.DocstringNamedElement[DocstringNamedElement]\n              _griffe.docstrings.models.DocstringElement[DocstringElement]\n\n                              _griffe.docstrings.models.DocstringElement --&gt; griffe.DocstringNamedElement\n                \n\n\n              click griffe.DocstringNamedElement href \"\" \"griffe.DocstringNamedElement\"\n              click _griffe.docstrings.models.DocstringElement href \"\" \"_griffe.docstrings.models.DocstringElement\"\n            </code></pre> <p>This base class represents annotated, named elements.</p> <p>Parameters:</p> Subclassed by: <ul> <li> Reference Python API Docstrings Docstring models <ul> <li> <code></code>\u00a0DocstringAttribute </li> <li> <code></code>\u00a0DocstringClass </li> <li> <code></code>\u00a0DocstringFunction </li> <li> <code></code>\u00a0DocstringModule </li> <li> <code></code>\u00a0DocstringParameter </li> <li> <code></code>\u00a0DocstringReceive </li> <li> <code></code>\u00a0DocstringReturn </li> <li> <code></code>\u00a0DocstringYield </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this element's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The element annotation.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The element description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The element name.</p> </li> <li> <code>value</code>               (<code>str | None</code>)           \u2013            <p>The element value, if any</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement(description)","title":"<code>description</code>","text":"(<code>str</code>)           \u2013            <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The element annotation, if any.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement(value)","title":"<code>value</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The element value, as a string.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The element annotation.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre> <p>The element description.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The element name.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | None = value\n</code></pre> <p>The element value, if any</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this element's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringNamedElement.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection","title":"DocstringSection","text":"<pre><code>DocstringSection(title: str | None = None)\n</code></pre> <p>This class represents a docstring section.</p> <p>Parameters:</p> Subclassed by: <ul> <li> Reference Python API Docstrings Docstring models <ul> <li> <code></code>\u00a0DocstringSectionAdmonition </li> <li> <code></code>\u00a0DocstringSectionAttributes </li> <li> <code></code>\u00a0DocstringSectionClasses </li> <li> <code></code>\u00a0DocstringSectionDeprecated </li> <li> <code></code>\u00a0DocstringSectionExamples </li> <li> <code></code>\u00a0DocstringSectionFunctions </li> <li> <code></code>\u00a0DocstringSectionModules </li> <li> <code></code>\u00a0DocstringSectionParameters </li> <li> <code></code>\u00a0DocstringSectionRaises </li> <li> <code></code>\u00a0DocstringSectionReceives </li> <li> <code></code>\u00a0DocstringSectionReturns </li> <li> <code></code>\u00a0DocstringSectionText </li> <li> <code></code>\u00a0DocstringSectionWarns </li> <li> <code></code>\u00a0DocstringSectionYields </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>Whether this section has a true-ish value.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this section's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>DocstringSectionKind</code>)           \u2013            <p>The section kind.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>The section title.</p> </li> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The section value.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection(title)","title":"<code>title</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: DocstringSectionKind\n</code></pre> <p>The section kind.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str | None = title\n</code></pre> <p>The section title.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Any = None\n</code></pre> <p>The section value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Whether this section has a true-ish value.</p>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this section's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/docstrings/models/#griffe.DocstringSection.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/docstrings/parsers/","title":"Docstring parsers","text":""},{"location":"reference/api/docstrings/parsers/#main-api","title":"Main API","text":""},{"location":"reference/api/docstrings/parsers/#griffe.parse","title":"parse","text":"<pre><code>parse(\n    docstring: Docstring,\n    parser: DocstringStyle | Parser | None,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse the docstring.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>A list of docstring sections.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse(parser)","title":"<code>parser</code>","text":"(<code>DocstringStyle | Parser | None</code>)           \u2013            <p>The docstring parser to use. If None, return a single text section.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>The options accepted by the parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto","title":"parse_auto","text":"<pre><code>parse_auto(\n    docstring: Docstring,\n    *,\n    method: DocstringDetectionMethod = \"heuristics\",\n    style_order: list[Parser]\n    | list[DocstringStyle]\n    | None = None,\n    default: Parser | DocstringStyle | None = None,\n    per_style_options: dict[\n        Parser | DocstringStyle, dict[str, Any]\n    ]\n    | None = None,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a docstring by automatically detecting the style it uses.</p> <p> Sponsors only \u2014  Insiders 1.3.0.</p> <p>See <code>infer_docstring_style</code> for more information on the available parameters.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>A list of docstring sections.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(method)","title":"<code>method</code>","text":"(<code>DocstringDetectionMethod</code>, default:                   <code>'heuristics'</code> )           \u2013            <p>The method to use to infer the parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(style_order)","title":"<code>style_order</code>","text":"(<code>list[Parser] | list[DocstringStyle] | None</code>, default:                   <code>None</code> )           \u2013            <p>The order of the styles to try when inferring the parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(default)","title":"<code>default</code>","text":"(<code>Parser | DocstringStyle | None</code>, default:                   <code>None</code> )           \u2013            <p>The default parser to use if the inference fails.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(per_style_options)","title":"<code>per_style_options</code>","text":"(<code>dict[Parser | DocstringStyle, dict[str, Any]] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional parsing options per style.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_auto(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Deprecated. Use <code>per_style_options</code> instead.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google","title":"parse_google","text":"<pre><code>parse_google(\n    docstring: Docstring,\n    *,\n    ignore_init_summary: bool = False,\n    trim_doctest_flags: bool = True,\n    returns_multiple_items: bool = True,\n    returns_named_value: bool = True,\n    returns_type_in_property_summary: bool = False,\n    receives_multiple_items: bool = True,\n    receives_named_value: bool = True,\n    warn_unknown_params: bool = True,\n    warnings: bool = True,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a Google-style docstring.</p> <p>This function iterates on lines of a docstring to build sections. It then returns this list of sections.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>A list of docstring sections.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(ignore_init_summary)","title":"<code>ignore_init_summary</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(trim_doctest_flags)","title":"<code>trim_doctest_flags</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove doctest flags from Python example blocks.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(returns_multiple_items)","title":"<code>returns_multiple_items</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to parse multiple items in <code>Yields</code> and <code>Returns</code> sections. When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(returns_named_value)","title":"<code>returns_named_value</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to parse <code>Yields</code> and <code>Returns</code> section items as name and description, rather than type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>. Names are optional: <code>name (int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(receives_multiple_items)","title":"<code>receives_multiple_items</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to parse multiple items in <code>Receives</code> sections. When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(receives_named_value)","title":"<code>receives_named_value</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to parse <code>Receives</code> section items as name and description, rather than type and description. When true, type must be wrapped in parentheses: <code>(int): Description.</code>. Names are optional: <code>name (int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(returns_type_in_property_summary)","title":"<code>returns_type_in_property_summary</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to parse the return type of properties at the beginning of their summary: <code>str: Summary of the property</code>.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(warn_unknown_params)","title":"<code>warn_unknown_params</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Warn about documented parameters not appearing in the signature.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(warnings)","title":"<code>warnings</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to log warnings at all.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_google(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional parsing options.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy","title":"parse_numpy","text":"<pre><code>parse_numpy(\n    docstring: Docstring,\n    *,\n    ignore_init_summary: bool = False,\n    trim_doctest_flags: bool = True,\n    warn_unknown_params: bool = True,\n    warnings: bool = True,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a Numpydoc-style docstring.</p> <p>This function iterates on lines of a docstring to build sections. It then returns this list of sections.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>A list of docstring sections.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(ignore_init_summary)","title":"<code>ignore_init_summary</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(trim_doctest_flags)","title":"<code>trim_doctest_flags</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to remove doctest flags from Python example blocks.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(warn_unknown_params)","title":"<code>warn_unknown_params</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Warn about documented parameters not appearing in the signature.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(warnings)","title":"<code>warnings</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to log warnings at all.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_numpy(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional parsing options.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_sphinx","title":"parse_sphinx","text":"<pre><code>parse_sphinx(\n    docstring: Docstring,\n    *,\n    warn_unknown_params: bool = True,\n    warnings: bool = True,\n    **options: Any,\n) -&gt; list[DocstringSection]\n</code></pre> <p>Parse a Sphinx-style docstring.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>A list of docstring sections.</p> </li> </ul> Referenced by: <ul> <li> Reference <code></code>\u00a0griffe Docstrings </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_sphinx(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_sphinx(warn_unknown_params)","title":"<code>warn_unknown_params</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Warn about documented parameters not appearing in the signature.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_sphinx(warnings)","title":"<code>warnings</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to log warnings at all.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_sphinx(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional parsing options.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.DocstringStyle","title":"DocstringStyle  <code>module-attribute</code>","text":"<pre><code>DocstringStyle = Literal[\n    \"google\", \"numpy\", \"sphinx\", \"auto\"\n]\n</code></pre> <p>The supported docstring styles (literal values of the Parser enumeration).</p>"},{"location":"reference/api/docstrings/parsers/#advanced-api","title":"Advanced API","text":""},{"location":"reference/api/docstrings/parsers/#griffe.Parser","title":"Parser","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.Parser[Parser]\n\n              \n\n              click griffe.Parser href \"\" \"griffe.Parser\"\n            </code></pre> <p>Enumeration of the different docstring parsers.</p> <p>Attributes:</p> <ul> <li> <code>auto</code>           \u2013            <p>Infer docstring parser.</p> </li> <li> <code>google</code>           \u2013            <p>Google-style docstrings parser.</p> </li> <li> <code>numpy</code>           \u2013            <p>Numpydoc-style docstrings parser.</p> </li> <li> <code>sphinx</code>           \u2013            <p>Sphinx-style docstrings parser.</p> </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.Parser.auto","title":"auto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto = 'auto'\n</code></pre> <p>Infer docstring parser.</p> <p> Sponsors only \u2014  Insiders 1.3.0.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.Parser.google","title":"google  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google = 'google'\n</code></pre> <p>Google-style docstrings parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.Parser.numpy","title":"numpy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>numpy = 'numpy'\n</code></pre> <p>Numpydoc-style docstrings parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.Parser.sphinx","title":"sphinx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sphinx = 'sphinx'\n</code></pre> <p>Sphinx-style docstrings parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parsers","title":"parsers  <code>module-attribute</code>","text":"<pre><code>parsers: dict[\n    Parser, Callable[[Docstring], list[DocstringSection]]\n] = {\n    auto: parse_auto,\n    google: parse_google,\n    sphinx: parse_sphinx,\n    numpy: parse_numpy,\n}\n</code></pre>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_docstring_annotation","title":"parse_docstring_annotation","text":"<pre><code>parse_docstring_annotation(\n    annotation: str,\n    docstring: Docstring,\n    log_level: LogLevel = error,\n) -&gt; str | Expr\n</code></pre> <p>Parse a string into a true name or expression that can be resolved later.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str | Expr</code>           \u2013            <p>The string unchanged, or a new name or expression.</p> </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_docstring_annotation(annotation)","title":"<code>annotation</code>","text":"(<code>str</code>)           \u2013            <p>The annotation to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_docstring_annotation(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring in which the annotation appears. The docstring's parent is accessed to bind a resolver to the resulting name/expression.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.parse_docstring_annotation(log_level)","title":"<code>log_level</code>","text":"(<code>LogLevel</code>, default:                   <code>error</code> )           \u2013            <p>Log level to use to log a message.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.docstring_warning","title":"docstring_warning","text":"<pre><code>docstring_warning(\n    docstring: Docstring,\n    offset: int,\n    message: str,\n    log_level: LogLevel = warning,\n) -&gt; None\n</code></pre> <p>Log a warning when parsing a docstring.</p> <p>This function logs a warning message by prefixing it with the filepath and line number.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>A function used to log parsing warnings if <code>name</code> was passed, else none.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.48.0 - 2024-07-15 Deprecations </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.docstring_warning(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring object.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.docstring_warning(offset)","title":"<code>offset</code>","text":"(<code>int</code>)           \u2013            <p>The offset in the docstring lines.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.docstring_warning(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>The message to log.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.DocstringDetectionMethod","title":"DocstringDetectionMethod  <code>module-attribute</code>","text":"<pre><code>DocstringDetectionMethod = Literal[\n    \"heuristics\", \"max_sections\"\n]\n</code></pre> <p>The supported methods to infer docstring styles.</p> Used by: <ul> <li> Reference Python API Docstrings Docstring parsers <ul> <li> <code></code>\u00a0infer_docstring_style </li> <li> <code></code>\u00a0parse_auto </li> </ul> </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style","title":"infer_docstring_style","text":"<pre><code>infer_docstring_style(\n    docstring: Docstring,\n    *,\n    method: DocstringDetectionMethod = \"heuristics\",\n    style_order: list[Parser]\n    | list[DocstringStyle]\n    | None = None,\n    default: Parser | DocstringStyle | None = None,\n    per_style_options: dict[\n        Parser | DocstringStyle, dict[str, Any]\n    ]\n    | None = None,\n    **options: Any,\n) -&gt; tuple[Parser | None, list[DocstringSection] | None]\n</code></pre> <p>Infer the parser to use for the docstring.</p> <p> Sponsors only \u2014  Insiders 1.3.0.</p> <p>The 'heuristics' method uses regular expressions. The 'max_sections' method parses the docstring with all parsers specified in <code>style_order</code> and returns the one who parsed the most sections.</p> <p>If heuristics fail, the <code>default</code> parser is returned. If multiple parsers parsed the same number of sections, <code>style_order</code> is used to decide which one to return. The <code>default</code> parser is never used with the 'max_sections' method.</p> <p>For non-Insiders versions, <code>default</code> is returned if specified, else the first parser in <code>style_order</code> is returned. If <code>style_order</code> is not specified, <code>None</code> is returned.</p> <p>Additional options are parsed to the detected parser, if any.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[Parser | None, list[DocstringSection] | None]</code>           \u2013            <p>The inferred parser, and optionally parsed sections (when method is 'max_sections').</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Docstrings Docstring parsers <code></code>\u00a0parse_auto </li> </ul>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring</code>)           \u2013            <p>The docstring to parse.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(method)","title":"<code>method</code>","text":"(<code>DocstringDetectionMethod</code>, default:                   <code>'heuristics'</code> )           \u2013            <p>The method to use to infer the parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(style_order)","title":"<code>style_order</code>","text":"(<code>list[Parser] | list[DocstringStyle] | None</code>, default:                   <code>None</code> )           \u2013            <p>The order of the styles to try when inferring the parser.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(default)","title":"<code>default</code>","text":"(<code>Parser | DocstringStyle | None</code>, default:                   <code>None</code> )           \u2013            <p>The default parser to use if the inference fails.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(per_style_options)","title":"<code>per_style_options</code>","text":"(<code>dict[Parser | DocstringStyle, dict[str, Any]] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional parsing options per style.</p>"},{"location":"reference/api/docstrings/parsers/#griffe.infer_docstring_style(**options)","title":"<code>**options</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Deprecated. Use <code>per_style_options</code> instead.</p>"},{"location":"reference/api/models/alias/","title":"Alias","text":""},{"location":"reference/api/models/alias/#griffe.Alias","title":"Alias","text":"<pre><code>Alias(\n    name: str,\n    target: str | Object | Alias,\n    *,\n    lineno: int | None = None,\n    endlineno: int | None = None,\n    runtime: bool = True,\n    parent: Module | Class | Alias | None = None,\n    inherited: bool = False,\n)\n</code></pre> <p>               Bases: <code>ObjectAliasMixin</code></p> <pre><code>\n              flowchart TD\n              griffe.Alias[Alias]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.mixins.ObjectAliasMixin --&gt; griffe.Alias\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n              click griffe.Alias href \"\" \"griffe.Alias\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>This class represents an alias, or indirection, to an object declared in another module.</p> <p>Aliases represent objects that are in the scope of a module or class, but were imported from another module.</p> <p>They behave almost exactly like regular objects, to a few exceptions:</p> <ul> <li>line numbers are those of the alias, not the target</li> <li>the path is the alias path, not the canonical one</li> <li>the name can be different from the target's</li> <li>if the target can be resolved, the kind is the target's kind</li> <li>if the target cannot be resolved, the kind becomes Kind.ALIAS</li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs <ul> <li> Extending APIs Writing extensions Events and hooks Analysis events </li> <li> Loading APIs Alias resolution </li> <li> Navigating APIs Aliases </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API Models </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Exceptions <code></code>\u00a0AliasResolutionError <code></code>\u00a0alias </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> Exceptions <code></code>\u00a0AliasResolutionError </li> <li> Extensions <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0on_alias </li> <li> <code></code>\u00a0on_wildcard_expansion </li> </ul> </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An alias is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The length of an alias is always 1.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this alias' data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this target's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>mro</code>             \u2013              <p>Return a list of classes in order corresponding to Python's MRO.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>resolve_target</code>             \u2013              <p>Resolve the target.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>alias_endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the alias.</p> </li> <li> <code>alias_lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the alias.</p> </li> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The attribute type annotation.</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>bases</code>               (<code>list[Expr | str]</code>)           \u2013            <p>The class bases.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>decorators</code>               (<code>list[Decorator]</code>)           \u2013            <p>The class/function decorators.</p> </li> <li> <code>deleter</code>               (<code>Function | None</code>)           \u2013            <p>The deleter linked to this function (property).</p> </li> <li> <code>deprecated</code>               (<code>str | bool | None</code>)           \u2013            <p>Whether this alias is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The target docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the target object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> <code>final_target</code>               (<code>Object</code>)           \u2013            <p>The final, resolved target, if possible.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this alias' target has a non-empty docstring.</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this alias' target or any of its members has a non-empty docstring.</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this alias' target.</p> </li> <li> <code>imports_future_annotations</code>               (<code>bool</code>)           \u2013            <p>Whether this module import future annotations.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Whether this alias represents an inherited member.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always true for aliases.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for aliases.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this module is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>               (<code>Kind</code>)           \u2013            <p>The target's kind, or <code>Kind.ALIAS</code> if the target cannot be resolved.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The target labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the target object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The target's members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to the alias parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The alias name.</p> </li> <li> <code>overloads</code>               (<code>dict[str, list[Function]] | list[Function] | None</code>)           \u2013            <p>The overloaded signatures declared in this class/module or for this function.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>The parameters of the current function or <code>__init__</code> method for classes.</p> </li> <li> <code>parent</code>               (<code>Module | Class | Alias | None</code>)           \u2013            <p>The parent of this alias.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path / import path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this alias is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>resolved</code>               (<code>bool</code>)           \u2013            <p>Whether this alias' target is resolved.</p> </li> <li> <code>resolved_bases</code>               (<code>list[Object]</code>)           \u2013            <p>Resolved class bases.</p> </li> <li> <code>returns</code>               (<code>str | Expr | None</code>)           \u2013            <p>The function return type annotation.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this alias is available at runtime.</p> </li> <li> <code>setter</code>               (<code>Function | None</code>)           \u2013            <p>The setter linked to this function (property).</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> <li> <code>target</code>               (<code>Object | Alias</code>)           \u2013            <p>The resolved target (actual object), if possible.</p> </li> <li> <code>target_path</code>               (<code>str</code>)           \u2013            <p>The path of this alias' target.</p> </li> <li> <code>value</code>               (<code>str | Expr | None</code>)           \u2013            <p>The attribute value.</p> </li> <li> <code>wildcard</code>               (<code>str | None</code>)           \u2013            <p>The module on which the wildcard import is performed (if any).</p> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The alias name.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(target)","title":"<code>target</code>","text":"(<code>str | Object | Alias</code>)           \u2013            <p>If it's a string, the target resolution is delayed until accessing the target property. If it's an object, or even another alias, the target is immediately set.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(lineno)","title":"<code>lineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The alias starting line number.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(endlineno)","title":"<code>endlineno</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The alias ending line number.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(runtime)","title":"<code>runtime</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether this alias is present at runtime or not.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(parent)","title":"<code>parent</code>","text":"(<code>Module | Class | Alias | None</code>, default:                   <code>None</code> )           \u2013            <p>The alias parent.</p>"},{"location":"reference/api/models/alias/#griffe.Alias(inherited)","title":"<code>inherited</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether this alias wraps an inherited member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.alias_endlineno","title":"alias_endlineno  <code>instance-attribute</code>","text":"<pre><code>alias_endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the alias.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Alias </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.alias_lineno","title":"alias_lineno  <code>instance-attribute</code>","text":"<pre><code>alias_lineno: int | None = lineno\n</code></pre> <p>The starting line number of the alias.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Alias </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.aliases","title":"aliases  <code>property</code>","text":"<pre><code>aliases: dict[str, Alias]\n</code></pre> <p>The aliases pointing to this object.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.annotation","title":"annotation  <code>property</code> <code>writable</code>","text":"<pre><code>annotation: str | Expr | None\n</code></pre> <p>The attribute type annotation.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.bases","title":"bases  <code>property</code>","text":"<pre><code>bases: list[Expr | str]\n</code></pre> <p>The class bases.</p> <p>See also: <code>Class</code>, <code>resolved_bases</code>, <code>mro</code>.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0path </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.decorators","title":"decorators  <code>property</code>","text":"<pre><code>decorators: list[Decorator]\n</code></pre> <p>The class/function decorators.</p> <p>See also: <code>Function</code>, <code>Class</code>.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.deleter","title":"deleter  <code>property</code>","text":"<pre><code>deleter: Function | None\n</code></pre> <p>The deleter linked to this function (property).</p>"},{"location":"reference/api/models/alias/#griffe.Alias.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: str | bool | None = None\n</code></pre> <p>Whether this alias is deprecated (boolean or deprecation message).</p>"},{"location":"reference/api/models/alias/#griffe.Alias.docstring","title":"docstring  <code>property</code> <code>writable</code>","text":"<pre><code>docstring: Docstring | None\n</code></pre> <p>The target docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.endlineno","title":"endlineno  <code>property</code> <code>writable</code>","text":"<pre><code>endlineno: int | None\n</code></pre> <p>The ending line number of the target object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0lineno </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.exports","title":"exports  <code>property</code>","text":"<pre><code>exports: list[str | ExprName] | None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.extra","title":"extra  <code>property</code>","text":"<pre><code>extra: dict\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p> <p>See also: <code>relative_filepath</code>, <code>relative_package_filepath</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.final_target","title":"final_target  <code>property</code>","text":"<pre><code>final_target: Object\n</code></pre> <p>The final, resolved target, if possible.</p> <p>This will iterate through the targets until a non-alias object is found.</p> <p>See also: <code>target</code>, <code>resolve_target</code>, <code>resolved</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases Alias chains </li> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0target </li> <li> <code></code>\u00a0resolve_target </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this alias' target has a non-empty docstring.</p> <p>See also: <code>has_docstrings</code>, <code>docstring</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this alias' target or any of its members has a non-empty docstring.</p> <p>See also: <code>has_docstring</code>, <code>docstring</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.imports","title":"imports  <code>property</code>","text":"<pre><code>imports: dict[str, str]\n</code></pre> <p>The other objects imported by this alias' target.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> <p>See also: <code>is_imported</code>.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.imports_future_annotations","title":"imports_future_annotations  <code>property</code>","text":"<pre><code>imports_future_annotations: bool\n</code></pre> <p>Whether this module import future annotations.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.inherited","title":"inherited  <code>instance-attribute</code>","text":"<pre><code>inherited: bool = inherited\n</code></pre> <p>Whether this alias represents an inherited member.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>Each inherited member of the target will be wrapped in an alias, to preserve correct object access paths.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = True\n</code></pre> <p>Always true for aliases.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases </li> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also: <code>is_module</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for aliases.</p> <p>See also: <code>ModulesCollection</code>.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this module is an <code>__init__.py</code> module.</p> <p>See also: <code>is_module</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_module </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also: <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_namespace_subpackage </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this module is a namespace subpackage.</p> <p>See also: <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_namespace_package </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this module is a package (top module).</p> <p>See also: <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_subpackage </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this module is a subpackage.</p> <p>See also: <code>is_package</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0is_package </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.kind","title":"kind  <code>property</code>","text":"<pre><code>kind: Kind\n</code></pre> <p>The target's kind, or <code>Kind.ALIAS</code> if the target cannot be resolved.</p> <p>See also: <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.labels","title":"labels  <code>property</code>","text":"<pre><code>labels: set[str]\n</code></pre> <p>The target labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0has_labels </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.lineno","title":"lineno  <code>property</code> <code>writable</code>","text":"<pre><code>lineno: int | None\n</code></pre> <p>The starting line number of the target object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0endlineno </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>source</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.members","title":"members  <code>property</code>","text":"<pre><code>members: dict[str, Object | Alias]\n</code></pre> <p>The target's members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0package </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to the alias parents.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The alias name.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.overloads","title":"overloads  <code>property</code> <code>writable</code>","text":"<pre><code>overloads: dict[str, list[Function]] | list[Function] | None\n</code></pre> <p>The overloaded signatures declared in this class/module or for this function.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0module </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>The parameters of the current function or <code>__init__</code> method for classes.</p> <p>This property can fetch inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!</p>"},{"location":"reference/api/models/alias/#griffe.Alias.parent","title":"parent  <code>property</code> <code>writable</code>","text":"<pre><code>parent: Module | Class | Alias | None\n</code></pre> <p>The parent of this alias.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path / import path of this object.</p> <p>See also: <code>canonical_path</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0canonical_path </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this alias is public.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.resolved","title":"resolved  <code>property</code>","text":"<pre><code>resolved: bool\n</code></pre> <p>Whether this alias' target is resolved.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Aliases </li> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0final_target </li> <li> <code></code>\u00a0target </li> <li> <code></code>\u00a0resolve_target </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.resolved_bases","title":"resolved_bases  <code>property</code>","text":"<pre><code>resolved_bases: list[Object]\n</code></pre> <p>Resolved class bases.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0bases </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.returns","title":"returns  <code>property</code> <code>writable</code>","text":"<pre><code>returns: str | Expr | None\n</code></pre> <p>The function return type annotation.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this alias is available at runtime.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.setter","title":"setter  <code>property</code>","text":"<pre><code>setter: Function | None\n</code></pre> <p>The setter linked to this function (property).</p>"},{"location":"reference/api/models/alias/#griffe.Alias.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.target","title":"target  <code>property</code> <code>writable</code>","text":"<pre><code>target: Object | Alias\n</code></pre> <p>The resolved target (actual object), if possible.</p> <p>Upon accessing this property, if the target is not already resolved, a lookup is done using the modules collection to find the target.</p> <p>See also: <code>final_target</code>, <code>resolve_target</code>, <code>resolved</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Model-specific fields Alias </li> </ul> </li> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0final_target </li> <li> <code></code>\u00a0resolve_target </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.target_path","title":"target_path  <code>instance-attribute</code>","text":"<pre><code>target_path: str\n</code></pre> <p>The path of this alias' target.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Model-specific fields Alias </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value: str | Expr | None\n</code></pre> <p>The attribute value.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.wildcard","title":"wildcard  <code>property</code>","text":"<pre><code>wildcard: str | None\n</code></pre> <p>The module on which the wildcard import is performed (if any).</p> <p>See also: <code>GriffeLoader.expand_wildcards</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Alias </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_wildcards </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An alias is always true-ish.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/alias/#griffe.Alias.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/alias/#griffe.Alias.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The length of an alias is always 1.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/alias/#griffe.Alias.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this alias' data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0as_json </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.as_dict(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this target's data as a JSON string.</p> <p>See also: <code>as_dict</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0as_dict </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/alias/#griffe.Alias.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>, <code>get_member</code>, <code>set_member</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0members </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0labels </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0kind </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/alias/#griffe.Alias.mro","title":"mro","text":"<pre><code>mro() -&gt; list[Class]\n</code></pre> <p>Return a list of classes in order corresponding to Python's MRO.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0bases </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.resolve_target","title":"resolve_target","text":"<pre><code>resolve_target() -&gt; None\n</code></pre> <p>Resolve the target.</p> <p>See also: <code>target</code>, <code>final_target</code>, <code>resolved</code>.</p> <p>Raises:</p> <ul> <li> <code>AliasResolutionError</code>             \u2013            <p>When the target cannot be resolved. It happens when the target does not exist, or could not be loaded (unhandled dynamic object?), or when the target is from a module that was not loaded and added to the collection.</p> </li> <li> <code>CyclicAliasError</code>             \u2013            <p>When the resolved target is the alias itself.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Alias </li> <li> Reference Python API Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0final_target </li> <li> <code></code>\u00a0target </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/alias/#griffe.Alias.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/alias/#griffe.Alias.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/attribute/","title":"Attribute","text":""},{"location":"reference/api/models/attribute/#griffe.Attribute","title":"Attribute","text":"<pre><code>Attribute(\n    *args: Any,\n    value: str | Expr | None = None,\n    annotation: str | Expr | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>               Bases: <code>Object</code></p> <pre><code>\n              flowchart TD\n              griffe.Attribute[Attribute]\n              _griffe.models.Object[Object]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.models.Object --&gt; griffe.Attribute\n                                _griffe.mixins.ObjectAliasMixin --&gt; _griffe.models.Object\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n\n              click griffe.Attribute href \"\" \"griffe.Attribute\"\n              click _griffe.models.Object href \"\" \"_griffe.models.Object\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>The class representing a Python module/class/instance attribute.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs <ul> <li> Extending APIs Writing extensions <ul> <li> Events and hooks Analysis events </li> <li> How it works </li> </ul> </li> <li> Navigating APIs </li> </ul> </li> <li> How-to Supporting custom decorators </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API <ul> <li> Loaders <code></code>\u00a0load </li> <li> Models </li> </ul> </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API Extensions <code></code>\u00a0Extension <code></code>\u00a0on_attribute_instance </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An object is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of members in this object, recursively.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this function's data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The attribute type annotation.</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>deleter</code>               (<code>Function | None</code>)           \u2013            <p>The deleter linked to this property.</p> </li> <li> <code>deprecated</code>               (<code>bool | str | None</code>)           \u2013            <p>Whether this object is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The object docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this object has a docstring (empty or not).</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this object or any of its members has a docstring (empty or not).</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this object.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>           \u2013            <p>The object kind.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The object members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to this object or its parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The object name.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parent</code>               (<code>Module | Class | None</code>)           \u2013            <p>The parent of the object (none if top module).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this object is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this object is available at runtime.</p> </li> <li> <code>setter</code>               (<code>Function | None</code>)           \u2013            <p>The setter linked to this property.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> <li> <code>value</code>               (<code>str | Expr | None</code>)           \u2013            <p>The attribute value.</p> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute(value)","title":"<code>value</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The attribute value, if any.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The attribute annotation, if any.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Moving down: members </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The attribute type annotation.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Attributes </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0path </li> <li> <code></code>\u00a0Class <code></code>\u00a0path </li> <li> <code></code>\u00a0Function <code></code>\u00a0path </li> <li> <code></code>\u00a0Module <code></code>\u00a0path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0path </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.deleter","title":"deleter  <code>instance-attribute</code>","text":"<pre><code>deleter: Function | None = None\n</code></pre> <p>The deleter linked to this property.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Attributes </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: bool | str | None = None\n</code></pre> <p>Whether this object is deprecated (boolean or deprecation message).</p> Referenced by: <ul> <li> Extensions Official griffe-warnings-deprecated </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0lineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p> <p>See also: <code>relative_filepath</code>, <code>relative_package_filepath</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.filepath\nPosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a docstring (empty or not).</p> <p>See also: <code>docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a docstring (empty or not).</p> <p>Inherited members are not considered. Imported members are not considered, unless they are also public.</p> <p>See also: <code>docstring</code>, <code>has_docstring</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Always false for objects.</p> <p>Only aliases can be marked as inherited.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Always false for objects.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Object kind </li> </ul> </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also:  <code>is_module</code>. <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for objects.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this object is an <code>__init__.py</code> module.</p> <p>See also:  <code>is_module</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Module <code></code>\u00a0is_module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_module </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also:  <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this object is a namespace subpackage.</p> <p>See also:  <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this object is a package (top module).</p> <p>See also:  <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this object is a subpackage.</p> <p>See also:  <code>is_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind = ATTRIBUTE\n</code></pre> <p>The object kind.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0has_labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0has_labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0endlineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0endlineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>lines_collection</code>, <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n&gt;&gt;&gt; # The `module` of a module is itself.\n&gt;&gt;&gt; markdown[\"core\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n</code></pre> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0package </li> <li> <code></code>\u00a0Class <code></code>\u00a0package </li> <li> <code></code>\u00a0Function <code></code>\u00a0package </li> <li> <code></code>\u00a0Module <code></code>\u00a0package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0package </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].package\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0module </li> <li> <code></code>\u00a0Class <code></code>\u00a0module </li> <li> <code></code>\u00a0Function <code></code>\u00a0module </li> <li> <code></code>\u00a0Module <code></code>\u00a0module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0module </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p> <p>See also: <code>canonical_path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].path\n'markdown.core.Markdown.references'\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Class <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Function <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Module <code></code>\u00a0canonical_path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0canonical_path </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.setter","title":"setter  <code>instance-attribute</code>","text":"<pre><code>setter: Function | None = None\n</code></pre> <p>The setter linked to this property.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Attributes </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr | None = value\n</code></pre> <p>The attribute value.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Attributes </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An object is always true-ish.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The number of members in this object, recursively.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/attribute/#griffe.Attribute.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/attribute/#griffe.Attribute.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/attribute/#griffe.Attribute.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/class/","title":"Class","text":""},{"location":"reference/api/models/class/#griffe.Class","title":"Class","text":"<pre><code>Class(\n    *args: Any,\n    bases: Sequence[Expr | str] | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>               Bases: <code>Object</code></p> <pre><code>\n              flowchart TD\n              griffe.Class[Class]\n              _griffe.models.Object[Object]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.models.Object --&gt; griffe.Class\n                                _griffe.mixins.ObjectAliasMixin --&gt; _griffe.models.Object\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n\n              click griffe.Class href \"\" \"griffe.Class\"\n              click _griffe.models.Object href \"\" \"_griffe.models.Object\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>The class representing a Python class.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs <ul> <li> Extending APIs Writing extensions <ul> <li> Events and hooks Analysis events </li> <li> How it works </li> </ul> </li> <li> Navigating APIs </li> </ul> </li> <li> How-to Supporting custom decorators </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API <ul> <li> Loaders <code></code>\u00a0load </li> <li> Models <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0bases </li> <li> <code></code>\u00a0decorators </li> </ul> </li> <li> Models </li> </ul> </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API Extensions <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0on_class_instance </li> <li> <code></code>\u00a0on_class_members </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An object is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of members in this object, recursively.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this class' data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>mro</code>             \u2013              <p>Return a list of classes in order corresponding to Python's MRO.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>bases</code>               (<code>list[Expr | str]</code>)           \u2013            <p>The class bases.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>decorators</code>               (<code>list[Decorator]</code>)           \u2013            <p>The class decorators.</p> </li> <li> <code>deprecated</code>               (<code>bool | str | None</code>)           \u2013            <p>Whether this object is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The object docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this object has a docstring (empty or not).</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this object or any of its members has a docstring (empty or not).</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this object.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>           \u2013            <p>The object kind.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The object members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to this object or its parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The object name.</p> </li> <li> <code>overloads</code>               (<code>dict[str, list[Function]]</code>)           \u2013            <p>The overloaded signatures declared in this class.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>The parameters of this class' <code>__init__</code> method, if any.</p> </li> <li> <code>parent</code>               (<code>Module | Class | None</code>)           \u2013            <p>The parent of the object (none if top module).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this object is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>resolved_bases</code>               (<code>list[Object]</code>)           \u2013            <p>Resolved class bases.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this object is available at runtime.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/class/#griffe.Class(bases)","title":"<code>bases</code>","text":"(<code>Sequence[Expr | str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The list of base classes, if any.</p>"},{"location":"reference/api/models/class/#griffe.Class(decorators)","title":"<code>decorators</code>","text":"(<code>list[Decorator] | None</code>, default:                   <code>None</code> )           \u2013            <p>The class decorators, if any.</p>"},{"location":"reference/api/models/class/#griffe.Class(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/class/#griffe.Class.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Moving down: members </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.bases","title":"bases  <code>instance-attribute</code>","text":"<pre><code>bases: list[Expr | str] = list(bases) if bases else []\n</code></pre> <p>The class bases.</p> <p>See also: <code>resolved_bases</code>, <code>mro</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> <li> Reference Python API Models <code></code>\u00a0Class <ul> <li> <code></code>\u00a0resolved_bases </li> <li> <code></code>\u00a0mro </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0path </li> <li> <code></code>\u00a0Class <code></code>\u00a0path </li> <li> <code></code>\u00a0Function <code></code>\u00a0path </li> <li> <code></code>\u00a0Module <code></code>\u00a0path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0path </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The class decorators.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: bool | str | None = None\n</code></pre> <p>Whether this object is deprecated (boolean or deprecation message).</p> Referenced by: <ul> <li> Extensions Official griffe-warnings-deprecated </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0lineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/class/#griffe.Class.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p> <p>See also: <code>relative_filepath</code>, <code>relative_package_filepath</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.filepath\nPosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a docstring (empty or not).</p> <p>See also: <code>docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a docstring (empty or not).</p> <p>Inherited members are not considered. Imported members are not considered, unless they are also public.</p> <p>See also: <code>docstring</code>, <code>has_docstring</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Always false for objects.</p> <p>Only aliases can be marked as inherited.</p>"},{"location":"reference/api/models/class/#griffe.Class.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Always false for objects.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Object kind </li> </ul> </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also:  <code>is_module</code>. <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for objects.</p>"},{"location":"reference/api/models/class/#griffe.Class.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this object is an <code>__init__.py</code> module.</p> <p>See also:  <code>is_module</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Module <code></code>\u00a0is_module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_module </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also:  <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this object is a namespace subpackage.</p> <p>See also:  <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this object is a package (top module).</p> <p>See also:  <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this object is a subpackage.</p> <p>See also:  <code>is_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind = CLASS\n</code></pre> <p>The object kind.</p>"},{"location":"reference/api/models/class/#griffe.Class.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0has_labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0has_labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0endlineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0endlineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>lines_collection</code>, <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n&gt;&gt;&gt; # The `module` of a module is itself.\n&gt;&gt;&gt; markdown[\"core\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n</code></pre> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0package </li> <li> <code></code>\u00a0Class <code></code>\u00a0package </li> <li> <code></code>\u00a0Function <code></code>\u00a0package </li> <li> <code></code>\u00a0Module <code></code>\u00a0package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0package </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/api/models/class/#griffe.Class.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signatures declared in this class.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].package\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0module </li> <li> <code></code>\u00a0Class <code></code>\u00a0module </li> <li> <code></code>\u00a0Function <code></code>\u00a0module </li> <li> <code></code>\u00a0Module <code></code>\u00a0module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0module </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>The parameters of this class' <code>__init__</code> method, if any.</p> <p>This property fetches inherited members, and therefore is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p> <p>See also: <code>canonical_path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].path\n'markdown.core.Markdown.references'\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Class <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Function <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Module <code></code>\u00a0canonical_path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0canonical_path </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.resolved_bases","title":"resolved_bases  <code>property</code>","text":"<pre><code>resolved_bases: list[Object]\n</code></pre> <p>Resolved class bases.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>bases</code>, <code>mro</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> <li> Reference Python API Models <code></code>\u00a0Class <ul> <li> <code></code>\u00a0bases </li> <li> <code></code>\u00a0mro </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/api/models/class/#griffe.Class.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An object is always true-ish.</p>"},{"location":"reference/api/models/class/#griffe.Class.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/class/#griffe.Class.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/class/#griffe.Class.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The number of members in this object, recursively.</p>"},{"location":"reference/api/models/class/#griffe.Class.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/class/#griffe.Class.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/class/#griffe.Class.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this class' data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/class/#griffe.Class.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/class/#griffe.Class.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/class/#griffe.Class.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/class/#griffe.Class.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/class/#griffe.Class.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/class/#griffe.Class.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/class/#griffe.Class.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/class/#griffe.Class.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/class/#griffe.Class.mro","title":"mro","text":"<pre><code>mro() -&gt; list[Class]\n</code></pre> <p>Return a list of classes in order corresponding to Python's MRO.</p> <p>See also: <code>bases</code>, <code>resolved_bases</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Classes </li> <li> Reference Python API Models <code></code>\u00a0Class <ul> <li> <code></code>\u00a0bases </li> <li> <code></code>\u00a0resolved_bases </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/class/#griffe.Class.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/class/#griffe.Class.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/class/#griffe.Class.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/class/#utilities","title":"Utilities","text":""},{"location":"reference/api/models/class/#griffe.c3linear_merge","title":"c3linear_merge","text":"<pre><code>c3linear_merge(*lists: list[_T]) -&gt; list[_T]\n</code></pre> <p>Merge lists of lists in the order defined by the C3Linear algorithm.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[_T]</code>           \u2013            <p>The merged list of items.</p> </li> </ul>"},{"location":"reference/api/models/class/#griffe.c3linear_merge(*lists)","title":"<code>*lists</code>","text":"(<code>list[_T]</code>, default:                   <code>()</code> )           \u2013            <p>Lists of items.</p>"},{"location":"reference/api/models/function/","title":"Function","text":""},{"location":"reference/api/models/function/#griffe.Function","title":"Function","text":"<pre><code>Function(\n    *args: Any,\n    parameters: Parameters | None = None,\n    returns: str | Expr | None = None,\n    decorators: list[Decorator] | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>               Bases: <code>Object</code></p> <pre><code>\n              flowchart TD\n              griffe.Function[Function]\n              _griffe.models.Object[Object]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.models.Object --&gt; griffe.Function\n                                _griffe.mixins.ObjectAliasMixin --&gt; _griffe.models.Object\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n\n              click griffe.Function href \"\" \"griffe.Function\"\n              click _griffe.models.Object href \"\" \"_griffe.models.Object\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>The class representing a Python function.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs <ul> <li> Extending APIs Writing extensions <ul> <li> Events and hooks Analysis events </li> <li> How it works </li> </ul> </li> <li> Navigating APIs </li> </ul> </li> <li> How-to Supporting custom decorators </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API <ul> <li> Loaders <code></code>\u00a0load </li> <li> Models <code></code>\u00a0Alias <code></code>\u00a0decorators </li> <li> Models </li> </ul> </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> Agents <code></code>\u00a0Visitor <code></code>\u00a0get_base_property </li> <li> Extensions <code></code>\u00a0Extension <code></code>\u00a0on_function_instance </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An object is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of members in this object, recursively.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this function's data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The type annotation of the returned value.</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>decorators</code>               (<code>list[Decorator]</code>)           \u2013            <p>The function decorators.</p> </li> <li> <code>deprecated</code>               (<code>bool | str | None</code>)           \u2013            <p>Whether this object is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The object docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path (or directory list for namespace packages) where this object was defined.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this object has a docstring (empty or not).</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this object or any of its members has a docstring (empty or not).</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this object.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>           \u2013            <p>The object kind.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The object members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to this object or its parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The object name.</p> </li> <li> <code>overloads</code>               (<code>list[Function] | None</code>)           \u2013            <p>The overloaded signatures of this function.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>The function parameters.</p> </li> <li> <code>parent</code>               (<code>Module | Class | None</code>)           \u2013            <p>The parent of the object (none if top module).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this object is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>returns</code>               (<code>str | Expr | None</code>)           \u2013            <p>The function return type annotation.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this object is available at runtime.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/function/#griffe.Function(parameters)","title":"<code>parameters</code>","text":"(<code>Parameters | None</code>, default:                   <code>None</code> )           \u2013            <p>The function parameters.</p>"},{"location":"reference/api/models/function/#griffe.Function(returns)","title":"<code>returns</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The function return annotation.</p>"},{"location":"reference/api/models/function/#griffe.Function(decorators)","title":"<code>decorators</code>","text":"(<code>list[Decorator] | None</code>, default:                   <code>None</code> )           \u2013            <p>The function decorators, if any.</p>"},{"location":"reference/api/models/function/#griffe.Function(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/function/#griffe.Function.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Moving down: members </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.annotation","title":"annotation  <code>property</code>","text":"<pre><code>annotation: str | Expr | None\n</code></pre> <p>The type annotation of the returned value.</p>"},{"location":"reference/api/models/function/#griffe.Function.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0path </li> <li> <code></code>\u00a0Class <code></code>\u00a0path </li> <li> <code></code>\u00a0Function <code></code>\u00a0path </li> <li> <code></code>\u00a0Module <code></code>\u00a0path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0path </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.decorators","title":"decorators  <code>instance-attribute</code>","text":"<pre><code>decorators: list[Decorator] = decorators or []\n</code></pre> <p>The function decorators.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Functions </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: bool | str | None = None\n</code></pre> <p>Whether this object is deprecated (boolean or deprecation message).</p> Referenced by: <ul> <li> Extensions Official griffe-warnings-deprecated </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0lineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/function/#griffe.Function.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path (or directory list for namespace packages) where this object was defined.</p> <p>See also: <code>relative_filepath</code>, <code>relative_package_filepath</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown.filepath\nPosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py')\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0relative_filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a docstring (empty or not).</p> <p>See also: <code>docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a docstring (empty or not).</p> <p>Inherited members are not considered. Imported members are not considered, unless they are also public.</p> <p>See also: <code>docstring</code>, <code>has_docstring</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Always false for objects.</p> <p>Only aliases can be marked as inherited.</p>"},{"location":"reference/api/models/function/#griffe.Function.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Always false for objects.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Object kind </li> </ul> </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also:  <code>is_module</code>. <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for objects.</p>"},{"location":"reference/api/models/function/#griffe.Function.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this object is an <code>__init__.py</code> module.</p> <p>See also:  <code>is_module</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_module </li> <li> <code></code>\u00a0Module <code></code>\u00a0is_module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_module </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this object is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also:  <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this object is a namespace subpackage.</p> <p>See also:  <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_namespace_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_namespace_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_namespace_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this object is a package (top module).</p> <p>See also:  <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_subpackage </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_subpackage </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_subpackage </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this object is a subpackage.</p> <p>See also:  <code>is_package</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Class <code></code>\u00a0is_package </li> <li> <code></code>\u00a0Function <code></code>\u00a0is_package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0is_package </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind = FUNCTION\n</code></pre> <p>The object kind.</p>"},{"location":"reference/api/models/function/#griffe.Function.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0has_labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0has_labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0endlineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0endlineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>lines_collection</code>, <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n&gt;&gt;&gt; # The `module` of a module is itself.\n&gt;&gt;&gt; markdown[\"core\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n</code></pre> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0package </li> <li> <code></code>\u00a0Class <code></code>\u00a0package </li> <li> <code></code>\u00a0Function <code></code>\u00a0package </li> <li> <code></code>\u00a0Module <code></code>\u00a0package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0package </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/api/models/function/#griffe.Function.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: list[Function] | None = None\n</code></pre> <p>The overloaded signatures of this function.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Functions </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].package\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0module </li> <li> <code></code>\u00a0Class <code></code>\u00a0module </li> <li> <code></code>\u00a0Function <code></code>\u00a0module </li> <li> <code></code>\u00a0Module <code></code>\u00a0module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0module </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Parameters = parameters or Parameters()\n</code></pre> <p>The function parameters.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Functions </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p> <p>See also: <code>canonical_path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].path\n'markdown.core.Markdown.references'\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Class <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Function <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Module <code></code>\u00a0canonical_path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0canonical_path </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.returns","title":"returns  <code>instance-attribute</code>","text":"<pre><code>returns: str | Expr | None = returns\n</code></pre> <p>The function return type annotation.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Functions </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/api/models/function/#griffe.Function.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An object is always true-ish.</p>"},{"location":"reference/api/models/function/#griffe.Function.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/function/#griffe.Function.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/function/#griffe.Function.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The number of members in this object, recursively.</p>"},{"location":"reference/api/models/function/#griffe.Function.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/function/#griffe.Function.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/function/#griffe.Function.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this function's data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/function/#griffe.Function.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/function/#griffe.Function.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/function/#griffe.Function.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/function/#griffe.Function.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/function/#griffe.Function.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/function/#griffe.Function.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/function/#griffe.Function.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/function/#griffe.Function.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/function/#griffe.Function.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/function/#griffe.Function.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Function.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/function/#griffe.Function.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/function/#griffe.Parameters","title":"Parameters","text":"<pre><code>Parameters(*parameters: Parameter)\n</code></pre> <p>This class is a container for parameters.</p> <p>It allows to get parameters using their position (index) or their name:</p> <pre><code>&gt;&gt;&gt; parameters = Parameters(Parameter(\"hello\"))\n&gt;&gt;&gt; parameters[0] is parameters[\"hello\"]\nTrue\n</code></pre> <p>See also: <code>Parameter</code>.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields <ul> <li> Classes </li> <li> Functions </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API Models <code></code>\u00a0Function <code></code>\u00a0Parameter </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Models <ul> <li> <code></code>\u00a0Alias <code></code>\u00a0parameters </li> <li> <code></code>\u00a0Class <code></code>\u00a0parameters </li> <li> <code></code>\u00a0Function <code></code>\u00a0parameters </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__contains__</code>             \u2013              <p>Whether a parameter with the given name is present.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a parameter by index or name.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a parameter by index or name.</p> </li> <li> <code>__iter__</code>             \u2013              <p>Iterate over the parameters, in order.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of parameters.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a parameter by index or name.</p> </li> <li> <code>add</code>             \u2013              <p>Add a parameter to the container.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Parameters(*parameters)","title":"<code>*parameters</code>","text":"(<code>Parameter</code>, default:                   <code>()</code> )           \u2013            <p>The initial parameters to add to the container.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__contains__","title":"__contains__","text":"<pre><code>__contains__(param_name: str)\n</code></pre> <p>Whether a parameter with the given name is present.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(name_or_index: int | str) -&gt; None\n</code></pre> <p>Delete a parameter by index or name.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(name_or_index: int | str) -&gt; Parameter\n</code></pre> <p>Get a parameter by index or name.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre> <p>Iterate over the parameters, in order.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__len__","title":"__len__","text":"<pre><code>__len__()\n</code></pre> <p>The number of parameters.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    name_or_index: int | str, parameter: Parameter\n) -&gt; None\n</code></pre> <p>Set a parameter by index or name.</p>"},{"location":"reference/api/models/function/#griffe.Parameters.add","title":"add","text":"<pre><code>add(parameter: Parameter) -&gt; None\n</code></pre> <p>Add a parameter to the container.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When a parameter with the same name is already present.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Parameters.add(parameter)","title":"<code>parameter</code>","text":"(<code>Parameter</code>)           \u2013            <p>The function parameter to add.</p>"},{"location":"reference/api/models/function/#griffe.Parameter","title":"Parameter","text":"<pre><code>Parameter(\n    name: str,\n    *,\n    annotation: str | Expr | None = None,\n    kind: ParameterKind | None = None,\n    default: str | Expr | None = None,\n    docstring: Docstring | None = None,\n)\n</code></pre> <p>This class represent a function parameter.</p> <p>See also: <code>Parameters</code>.</p> <p>Parameters:</p> Referenced by: <ul> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API Models <code></code>\u00a0Function <code></code>\u00a0Parameters </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API Models <code></code>\u00a0Function <code></code>\u00a0Parameters <code></code>\u00a0__getitem__ </li> </ul> Used by: <ul> <li> Reference Python API Models <code></code>\u00a0Function <code></code>\u00a0Parameters <code></code>\u00a0add </li> </ul> <p>Methods:</p> <ul> <li> <code>__eq__</code>             \u2013              <p>Parameters are equal if all their attributes except <code>docstring</code> and <code>function</code> are equal.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this parameter's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>annotation</code>               (<code>str | Expr | None</code>)           \u2013            <p>The parameter type annotation.</p> </li> <li> <code>default</code>               (<code>str | Expr | None</code>)           \u2013            <p>The parameter default value.</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The parameter docstring.</p> </li> <li> <code>function</code>               (<code>Function | None</code>)           \u2013            <p>The parent function of the parameter.</p> </li> <li> <code>kind</code>               (<code>ParameterKind | None</code>)           \u2013            <p>The parameter kind.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The parameter name.</p> </li> <li> <code>required</code>               (<code>bool</code>)           \u2013            <p>Whether this parameter is required.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Parameter(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The parameter name, without leading stars (<code>*</code> or <code>**</code>).</p>"},{"location":"reference/api/models/function/#griffe.Parameter(annotation)","title":"<code>annotation</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The parameter annotation, if any.</p>"},{"location":"reference/api/models/function/#griffe.Parameter(kind)","title":"<code>kind</code>","text":"(<code>ParameterKind | None</code>, default:                   <code>None</code> )           \u2013            <p>The parameter kind.</p>"},{"location":"reference/api/models/function/#griffe.Parameter(default)","title":"<code>default</code>","text":"(<code>str | Expr | None</code>, default:                   <code>None</code> )           \u2013            <p>The parameter default, if any.</p>"},{"location":"reference/api/models/function/#griffe.Parameter(docstring)","title":"<code>docstring</code>","text":"(<code>Docstring | None</code>, default:                   <code>None</code> )           \u2013            <p>The parameter docstring.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.annotation","title":"annotation  <code>instance-attribute</code>","text":"<pre><code>annotation: str | Expr | None = annotation\n</code></pre> <p>The parameter type annotation.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default: str | Expr | None = default\n</code></pre> <p>The parameter default value.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The parameter docstring.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function: Function | None = None\n</code></pre> <p>The parent function of the parameter.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: ParameterKind | None = kind\n</code></pre> <p>The parameter kind.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The parameter name.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p>Whether this parameter is required.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Parameters are equal if all their attributes except <code>docstring</code> and <code>function</code> are equal.</p>"},{"location":"reference/api/models/function/#griffe.Parameter.as_dict","title":"as_dict","text":"<pre><code>as_dict(\n    *, full: bool = False, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Return this parameter's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Parameter.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/function/#griffe.ParameterKind","title":"ParameterKind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <pre><code>\n              flowchart TD\n              griffe.ParameterKind[ParameterKind]\n\n              \n\n              click griffe.ParameterKind href \"\" \"griffe.ParameterKind\"\n            </code></pre> <p>Enumeration of the different parameter kinds.</p> Returned by: <ul> <li> Reference Python API Expressions <code></code>\u00a0ExprParameter <code></code>\u00a0kind </li> </ul> Used by: <ul> <li> Reference Python API Expressions <code></code>\u00a0ExprParameter </li> </ul> <p>Attributes:</p> <ul> <li> <code>keyword_only</code>           \u2013            <p>Keyword-only parameter.</p> </li> <li> <code>positional_only</code>           \u2013            <p>Positional-only parameter.</p> </li> <li> <code>positional_or_keyword</code>           \u2013            <p>Positional or keyword parameter.</p> </li> <li> <code>var_keyword</code>           \u2013            <p>Variadic keyword parameter.</p> </li> <li> <code>var_positional</code>           \u2013            <p>Variadic positional parameter.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.ParameterKind.keyword_only","title":"keyword_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keyword_only = 'keyword-only'\n</code></pre> <p>Keyword-only parameter.</p>"},{"location":"reference/api/models/function/#griffe.ParameterKind.positional_only","title":"positional_only  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_only = 'positional-only'\n</code></pre> <p>Positional-only parameter.</p>"},{"location":"reference/api/models/function/#griffe.ParameterKind.positional_or_keyword","title":"positional_or_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>positional_or_keyword = 'positional or keyword'\n</code></pre> <p>Positional or keyword parameter.</p>"},{"location":"reference/api/models/function/#griffe.ParameterKind.var_keyword","title":"var_keyword  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_keyword = 'variadic keyword'\n</code></pre> <p>Variadic keyword parameter.</p>"},{"location":"reference/api/models/function/#griffe.ParameterKind.var_positional","title":"var_positional  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_positional = 'variadic positional'\n</code></pre> <p>Variadic positional parameter.</p>"},{"location":"reference/api/models/function/#griffe.ParametersType","title":"ParametersType  <code>module-attribute</code>","text":"<pre><code>ParametersType = list[\n    tuple[\n        str,\n        Optional[AST],\n        ParameterKind,\n        Optional[Union[str, AST]],\n    ]\n]\n</code></pre> <p>Type alias for the list of parameters of a function.</p> Returned by: <ul> <li> Reference Python API Agents <code></code>\u00a0get_parameters </li> </ul>"},{"location":"reference/api/models/function/#griffe.Decorator","title":"Decorator","text":"<pre><code>Decorator(\n    value: str | Expr,\n    *,\n    lineno: int | None,\n    endlineno: int | None,\n)\n</code></pre> <p>This class represents decorators.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields <ul> <li> Classes </li> <li> Functions </li> </ul> </li> <li> Reference <code></code>\u00a0griffe Models </li> </ul> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Return this decorator's data as a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>callable_path</code>               (<code>str</code>)           \u2013            <p>The path of the callable used as decorator.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the decorator.</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the decorator.</p> </li> <li> <code>value</code>               (<code>str | Expr</code>)           \u2013            <p>The decorator value (as a Griffe expression or string).</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Decorator(value)","title":"<code>value</code>","text":"(<code>str | Expr</code>)           \u2013            <p>The decorator code.</p>"},{"location":"reference/api/models/function/#griffe.Decorator(lineno)","title":"<code>lineno</code>","text":"(<code>int | None</code>)           \u2013            <p>The starting line number.</p>"},{"location":"reference/api/models/function/#griffe.Decorator(endlineno)","title":"<code>endlineno</code>","text":"(<code>int | None</code>)           \u2013            <p>The ending line number.</p>"},{"location":"reference/api/models/function/#griffe.Decorator.callable_path","title":"callable_path  <code>property</code>","text":"<pre><code>callable_path: str\n</code></pre> <p>The path of the callable used as decorator.</p>"},{"location":"reference/api/models/function/#griffe.Decorator.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the decorator.</p>"},{"location":"reference/api/models/function/#griffe.Decorator.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the decorator.</p>"},{"location":"reference/api/models/function/#griffe.Decorator.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Expr = value\n</code></pre> <p>The decorator value (as a Griffe expression or string).</p>"},{"location":"reference/api/models/function/#griffe.Decorator.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this decorator's data as a dictionary.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/function/#griffe.Decorator.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/module/","title":"Module","text":""},{"location":"reference/api/models/module/#griffe.Module","title":"Module","text":"<pre><code>Module(\n    *args: Any,\n    filepath: Path | list[Path] | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>               Bases: <code>Object</code></p> <pre><code>\n              flowchart TD\n              griffe.Module[Module]\n              _griffe.models.Object[Object]\n              _griffe.mixins.ObjectAliasMixin[ObjectAliasMixin]\n              _griffe.mixins.GetMembersMixin[GetMembersMixin]\n              _griffe.mixins.SetMembersMixin[SetMembersMixin]\n              _griffe.mixins.DelMembersMixin[DelMembersMixin]\n              _griffe.mixins.SerializationMixin[SerializationMixin]\n\n                              _griffe.models.Object --&gt; griffe.Module\n                                _griffe.mixins.ObjectAliasMixin --&gt; _griffe.models.Object\n                                _griffe.mixins.GetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SetMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.DelMembersMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n                _griffe.mixins.SerializationMixin --&gt; _griffe.mixins.ObjectAliasMixin\n                \n\n\n\n\n              click griffe.Module href \"\" \"griffe.Module\"\n              click _griffe.models.Object href \"\" \"_griffe.models.Object\"\n              click _griffe.mixins.ObjectAliasMixin href \"\" \"_griffe.mixins.ObjectAliasMixin\"\n              click _griffe.mixins.GetMembersMixin href \"\" \"_griffe.mixins.GetMembersMixin\"\n              click _griffe.mixins.SetMembersMixin href \"\" \"_griffe.mixins.SetMembersMixin\"\n              click _griffe.mixins.DelMembersMixin href \"\" \"_griffe.mixins.DelMembersMixin\"\n              click _griffe.mixins.SerializationMixin href \"\" \"_griffe.mixins.SerializationMixin\"\n            </code></pre> <p>The class representing a Python module.</p> <p>Parameters:</p> Referenced by: <ul> <li> Guide User guide <ul> <li> Manipulating APIs <ul> <li> Extending APIs Writing extensions <ul> <li> Events and hooks Analysis events </li> <li> How it works </li> </ul> </li> <li> Navigating APIs </li> </ul> </li> <li> How-to Supporting custom decorators </li> </ul> </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Models </li> <li> Python API <ul> <li> Loaders <code></code>\u00a0load </li> <li> Models </li> </ul> </li> </ul> </li> </ul> Returned by: <ul> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0ExportedName <code></code>\u00a0parent </li> <li> <code></code>\u00a0Inspector <code></code>\u00a0get_module </li> <li> <code></code>\u00a0Visitor <code></code>\u00a0get_module </li> <li> <code></code>\u00a0inspect </li> <li> <code></code>\u00a0visit </li> </ul> </li> <li> Helpers <code></code>\u00a0module_vtree </li> <li> Loaders <code></code>\u00a0merge_stubs </li> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0module </li> <li> <code></code>\u00a0package </li> </ul> </li> </ul> </li> </ul> Used by: <ul> <li> Reference Python API <ul> <li> Agents <ul> <li> <code></code>\u00a0ExportedName </li> <li> <code></code>\u00a0get__all__ </li> <li> <code></code>\u00a0relative_to_absolute </li> <li> <code></code>\u00a0safe_get__all__ </li> </ul> </li> <li> Extensions <ul> <li> <code></code>\u00a0DataclassesExtension <code></code>\u00a0on_package_loaded </li> <li> <code></code>\u00a0Extension <ul> <li> <code></code>\u00a0on_module_instance </li> <li> <code></code>\u00a0on_module_members </li> <li> <code></code>\u00a0on_package_loaded </li> </ul> </li> </ul> </li> <li> Finder <code></code>\u00a0ModuleFinder <code></code>\u00a0submodules </li> <li> Loaders <ul> <li> <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> <li> <code></code>\u00a0merge_stubs </li> </ul> </li> </ul> </li> </ul> Yielded by: <ul> <li> Reference Python API Helpers <ul> <li> <code></code>\u00a0temporary_inspected_module </li> <li> <code></code>\u00a0temporary_inspected_package </li> <li> <code></code>\u00a0temporary_visited_module </li> <li> <code></code>\u00a0temporary_visited_package </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>An object is always true-ish.</p> </li> <li> <code>__delitem__</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>__getitem__</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>__len__</code>             \u2013              <p>The number of members in this object, recursively.</p> </li> <li> <code>__setitem__</code>             \u2013              <p>Set a member with its name or path.</p> </li> <li> <code>as_dict</code>             \u2013              <p>Return this module's data as a dictionary.</p> </li> <li> <code>as_json</code>             \u2013              <p>Return this object's data as a JSON string.</p> </li> <li> <code>del_member</code>             \u2013              <p>Delete a member with its name or path.</p> </li> <li> <code>filter_members</code>             \u2013              <p>Filter and return members based on predicates.</p> </li> <li> <code>from_json</code>             \u2013              <p>Create an instance of this class from a JSON string.</p> </li> <li> <code>get_member</code>             \u2013              <p>Get a member with its name or path.</p> </li> <li> <code>has_labels</code>             \u2013              <p>Tell if this object has all the given labels.</p> </li> <li> <code>is_kind</code>             \u2013              <p>Tell if this object is of the given kind.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve a name within this object's and parents' scope.</p> </li> <li> <code>set_member</code>             \u2013              <p>Set a member with its name or path.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>aliases</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>The aliases pointing to this object.</p> </li> <li> <code>all_members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>All members (declared and inherited).</p> </li> <li> <code>attributes</code>               (<code>dict[str, Attribute]</code>)           \u2013            <p>The attribute members.</p> </li> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> <li> <code>classes</code>               (<code>dict[str, Class]</code>)           \u2013            <p>The class members.</p> </li> <li> <code>deprecated</code>               (<code>bool | str | None</code>)           \u2013            <p>Whether this object is deprecated (boolean or deprecation message).</p> </li> <li> <code>docstring</code>               (<code>Docstring | None</code>)           \u2013            <p>The object docstring.</p> </li> <li> <code>endlineno</code>               (<code>int | None</code>)           \u2013            <p>The ending line number of the object.</p> </li> <li> <code>exports</code>               (<code>list[str | ExprName] | None</code>)           \u2013            <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> </li> <li> <code>extra</code>               (<code>dict[str, dict[str, Any]]</code>)           \u2013            <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p> </li> <li> <code>filepath</code>               (<code>Path | list[Path]</code>)           \u2013            <p>The file path of this module.</p> </li> <li> <code>functions</code>               (<code>dict[str, Function]</code>)           \u2013            <p>The function members.</p> </li> <li> <code>has_docstring</code>               (<code>bool</code>)           \u2013            <p>Whether this object has a docstring (empty or not).</p> </li> <li> <code>has_docstrings</code>               (<code>bool</code>)           \u2013            <p>Whether this object or any of its members has a docstring (empty or not).</p> </li> <li> <code>imports</code>               (<code>dict[str, str]</code>)           \u2013            <p>The other objects imported by this object.</p> </li> <li> <code>imports_future_annotations</code>               (<code>bool</code>)           \u2013            <p>Whether this module import future annotations.</p> </li> <li> <code>inherited</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>inherited_members</code>               (<code>dict[str, Alias]</code>)           \u2013            <p>Members that are inherited from base classes.</p> </li> <li> <code>is_alias</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_attribute</code>               (<code>bool</code>)           \u2013            <p>Whether this object is an attribute.</p> </li> <li> <code>is_class</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a class.</p> </li> <li> <code>is_class_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> </li> <li> <code>is_collection</code>               (<code>bool</code>)           \u2013            <p>Always false for objects.</p> </li> <li> <code>is_deprecated</code>               (<code>bool</code>)           \u2013            <p>Whether this object is deprecated.</p> </li> <li> <code>is_exported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> </li> <li> <code>is_function</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a function.</p> </li> <li> <code>is_imported</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias was imported from another module.</p> </li> <li> <code>is_init_module</code>               (<code>bool</code>)           \u2013            <p>Whether this module is an <code>__init__.py</code> module.</p> </li> <li> <code>is_module</code>               (<code>bool</code>)           \u2013            <p>Whether this object is a module.</p> </li> <li> <code>is_namespace_package</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> </li> <li> <code>is_namespace_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a namespace subpackage.</p> </li> <li> <code>is_package</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a package (top module).</p> </li> <li> <code>is_private</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Whether this object is considered public.</p> </li> <li> <code>is_special</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> </li> <li> <code>is_subpackage</code>               (<code>bool</code>)           \u2013            <p>Whether this module is a subpackage.</p> </li> <li> <code>is_wildcard_exposed</code>               (<code>bool</code>)           \u2013            <p>Whether this object/alias is exposed to wildcard imports.</p> </li> <li> <code>kind</code>           \u2013            <p>The object kind.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> </li> <li> <code>lineno</code>               (<code>int | None</code>)           \u2013            <p>The starting line number of the object.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The lines containing the source of this object.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>The lines collection attached to this object or its parents.</p> </li> <li> <code>members</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The object members (modules, classes, functions, attributes).</p> </li> <li> <code>module</code>               (<code>Module</code>)           \u2013            <p>The parent module of this object.</p> </li> <li> <code>modules</code>               (<code>dict[str, Module]</code>)           \u2013            <p>The module members.</p> </li> <li> <code>modules_collection</code>               (<code>ModulesCollection</code>)           \u2013            <p>The modules collection attached to this object or its parents.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The object name.</p> </li> <li> <code>overloads</code>               (<code>dict[str, list[Function]]</code>)           \u2013            <p>The overloaded signatures declared in this module.</p> </li> <li> <code>package</code>               (<code>Module</code>)           \u2013            <p>The absolute top module (the package) of this object.</p> </li> <li> <code>parent</code>               (<code>Module | Class | None</code>)           \u2013            <p>The parent of the object (none if top module).</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The dotted path of this object.</p> </li> <li> <code>public</code>               (<code>bool | None</code>)           \u2013            <p>Whether this object is public.</p> </li> <li> <code>relative_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the current working directory.</p> </li> <li> <code>relative_package_filepath</code>               (<code>Path</code>)           \u2013            <p>The file path where this object was defined, relative to the top module path.</p> </li> <li> <code>runtime</code>               (<code>bool</code>)           \u2013            <p>Whether this object is available at runtime.</p> </li> <li> <code>source</code>               (<code>str</code>)           \u2013            <p>The source code of this object.</p> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/module/#griffe.Module(filepath)","title":"<code>filepath</code>","text":"(<code>Path | list[Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>The module file path (directory for namespace [sub]packages, none for builtin modules).</p>"},{"location":"reference/api/models/module/#griffe.Module(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>See <code>griffe.Object</code>.</p>"},{"location":"reference/api/models/module/#griffe.Module.aliases","title":"aliases  <code>instance-attribute</code>","text":"<pre><code>aliases: dict[str, Alias] = {}\n</code></pre> <p>The aliases pointing to this object.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Moving down: members </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.all_members","title":"all_members  <code>property</code>","text":"<pre><code>all_members: dict[str, Object | Alias]\n</code></pre> <p>All members (declared and inherited).</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.attributes","title":"attributes  <code>property</code>","text":"<pre><code>attributes: dict[str, Attribute]\n</code></pre> <p>The attribute members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>The canonical path is the path where the object was defined (not imported).</p> <p>See also: <code>path</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0path </li> <li> <code></code>\u00a0Class <code></code>\u00a0path </li> <li> <code></code>\u00a0Function <code></code>\u00a0path </li> <li> <code></code>\u00a0Module <code></code>\u00a0path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0path </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.classes","title":"classes  <code>property</code>","text":"<pre><code>classes: dict[str, Class]\n</code></pre> <p>The class members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.deprecated","title":"deprecated  <code>instance-attribute</code>","text":"<pre><code>deprecated: bool | str | None = None\n</code></pre> <p>Whether this object is deprecated (boolean or deprecation message).</p> Referenced by: <ul> <li> Extensions Official griffe-warnings-deprecated </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.docstring","title":"docstring  <code>instance-attribute</code>","text":"<pre><code>docstring: Docstring | None = docstring\n</code></pre> <p>The object docstring.</p> <p>See also: <code>has_docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0has_docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.endlineno","title":"endlineno  <code>instance-attribute</code>","text":"<pre><code>endlineno: int | None = endlineno\n</code></pre> <p>The ending line number of the object.</p> <p>See also: <code>lineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0lineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0lineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0lineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.exports","title":"exports  <code>instance-attribute</code>","text":"<pre><code>exports: list[str | ExprName] | None = None\n</code></pre> <p>The names of the objects exported by this (module) object through the <code>__all__</code> variable.</p> <p>Exports can contain string (object names) or resolvable names, like other lists of exports coming from submodules:</p> <pre><code>from .submodule import __all__ as submodule_all\n\n__all__ = [\"hello\", *submodule_all]\n</code></pre> <p>Exports get expanded by the loader before it expands wildcards and resolves aliases.</p> <p>See also: <code>GriffeLoader.expand_exports</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Loaders <code></code>\u00a0GriffeLoader <code></code>\u00a0expand_exports </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.extra","title":"extra  <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, dict[str, Any]] = defaultdict(dict)\n</code></pre> <p>Namespaced dictionaries storing extra metadata for this object, used by extensions.</p>"},{"location":"reference/api/models/module/#griffe.Module.filepath","title":"filepath  <code>property</code>","text":"<pre><code>filepath: Path | list[Path]\n</code></pre> <p>The file path of this module.</p> <p>Raises:</p> <ul> <li> <code>BuiltinModuleError</code>             \u2013            <p>When the instance filepath is None.</p> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.functions","title":"functions  <code>property</code>","text":"<pre><code>functions: dict[str, Function]\n</code></pre> <p>The function members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.has_docstring","title":"has_docstring  <code>property</code>","text":"<pre><code>has_docstring: bool\n</code></pre> <p>Whether this object has a docstring (empty or not).</p> <p>See also: <code>docstring</code>, <code>has_docstrings</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstrings </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.has_docstrings","title":"has_docstrings  <code>property</code>","text":"<pre><code>has_docstrings: bool\n</code></pre> <p>Whether this object or any of its members has a docstring (empty or not).</p> <p>Inherited members are not considered. Imported members are not considered, unless they are also public.</p> <p>See also: <code>docstring</code>, <code>has_docstring</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Docstrings </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0docstring </li> <li> <code></code>\u00a0has_docstring </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.imports","title":"imports  <code>instance-attribute</code>","text":"<pre><code>imports: dict[str, str] = {}\n</code></pre> <p>The other objects imported by this object.</p> <p>Keys are the names within the object (<code>from ... import ... as AS_NAME</code>), while the values are the actual names of the objects (<code>from ... import REAL_NAME as ...</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.imports_future_annotations","title":"imports_future_annotations  <code>property</code>","text":"<pre><code>imports_future_annotations: bool\n</code></pre> <p>Whether this module import future annotations.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Modules </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.inherited","title":"inherited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited: bool = False\n</code></pre> <p>Always false for objects.</p> <p>Only aliases can be marked as inherited.</p>"},{"location":"reference/api/models/module/#griffe.Module.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, Alias]\n</code></pre> <p>Members that are inherited from base classes.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>See also: <code>members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_alias","title":"is_alias  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_alias: bool = False\n</code></pre> <p>Always false for objects.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs <ul> <li> Aliases </li> <li> Object kind </li> </ul> </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_attribute","title":"is_attribute  <code>property</code>","text":"<pre><code>is_attribute: bool\n</code></pre> <p>Whether this object is an attribute.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_class","title":"is_class  <code>property</code>","text":"<pre><code>is_class: bool\n</code></pre> <p>Whether this object is a class.</p> <p>See also:  <code>is_module</code>. <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_class_private","title":"is_class_private  <code>property</code>","text":"<pre><code>is_class_private: bool\n</code></pre> <p>Whether this object/alias is class-private (starts with <code>__</code> and is a class member).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_collection","title":"is_collection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_collection: bool = False\n</code></pre> <p>Always false for objects.</p>"},{"location":"reference/api/models/module/#griffe.Module.is_deprecated","title":"is_deprecated  <code>property</code>","text":"<pre><code>is_deprecated: bool\n</code></pre> <p>Whether this object is deprecated.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_exported","title":"is_exported  <code>property</code>","text":"<pre><code>is_exported: bool\n</code></pre> <p>Whether this object/alias is exported (listed in <code>__all__</code>).</p> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_function","title":"is_function  <code>property</code>","text":"<pre><code>is_function: bool\n</code></pre> <p>Whether this object is a function.</p> <p>See also:  <code>is_module</code>. <code>is_class</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_imported","title":"is_imported  <code>property</code>","text":"<pre><code>is_imported: bool\n</code></pre> <p>Whether this object/alias was imported from another module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> <li> Reference Python API Models <code></code>\u00a0Alias <code></code>\u00a0imports </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_init_module","title":"is_init_module  <code>property</code>","text":"<pre><code>is_init_module: bool\n</code></pre> <p>Whether this module is an <code>__init__.py</code> module.</p> <p>See also: <code>is_module</code>.</p>"},{"location":"reference/api/models/module/#griffe.Module.is_module","title":"is_module  <code>property</code>","text":"<pre><code>is_module: bool\n</code></pre> <p>Whether this object is a module.</p> <p>See also:  <code>is_init_module</code>. <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>, <code>is_kind</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_init_module </li> <li> <code></code>\u00a0is_kind </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_namespace_package","title":"is_namespace_package  <code>property</code>","text":"<pre><code>is_namespace_package: bool\n</code></pre> <p>Whether this module is a namespace package (top folder, no <code>__init__.py</code>).</p> <p>See also: <code>is_namespace_subpackage</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Module <code></code>\u00a0is_namespace_subpackage </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_namespace_subpackage","title":"is_namespace_subpackage  <code>property</code>","text":"<pre><code>is_namespace_subpackage: bool\n</code></pre> <p>Whether this module is a namespace subpackage.</p> <p>See also: <code>is_namespace_package</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Module <code></code>\u00a0is_namespace_package </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_package","title":"is_package  <code>property</code>","text":"<pre><code>is_package: bool\n</code></pre> <p>Whether this module is a package (top module).</p> <p>See also: <code>is_subpackage</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Module <code></code>\u00a0is_subpackage </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_private","title":"is_private  <code>property</code>","text":"<pre><code>is_private: bool\n</code></pre> <p>Whether this object/alias is private (starts with <code>_</code>) but not special.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre> <p>Whether this object is considered public.</p> <p>In modules, developers can mark objects as public thanks to the <code>__all__</code> variable. In classes however, there is no convention or standard to do so.</p> <p>Therefore, to decide whether an object is public, we follow this algorithm:</p> <ul> <li>If the object's <code>public</code> attribute is set (boolean), return its value.</li> <li>If the object is listed in its parent's (a module) <code>__all__</code> attribute, it is public.</li> <li>If the parent (module) defines <code>__all__</code> and the object is not listed in, it is private.</li> <li>If the object has a private name, it is private.</li> <li>If the object was imported from another module, it is private.</li> <li>Otherwise, the object is public.</li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 Deprecations </li> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_special","title":"is_special  <code>property</code>","text":"<pre><code>is_special: bool\n</code></pre> <p>Whether this object/alias is special (\"dunder\" attribute/method, starts and end with <code>__</code>).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_subpackage","title":"is_subpackage  <code>property</code>","text":"<pre><code>is_subpackage: bool\n</code></pre> <p>Whether this module is a subpackage.</p> <p>See also: <code>is_package</code>.</p> Referenced by: <ul> <li> Reference Python API Models <code></code>\u00a0Module <code></code>\u00a0is_package </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_wildcard_exposed","title":"is_wildcard_exposed  <code>property</code>","text":"<pre><code>is_wildcard_exposed: bool\n</code></pre> <p>Whether this object/alias is exposed to wildcard imports.</p> <p>To be exposed to wildcard imports, an object/alias must:</p> <ul> <li>be available at runtime</li> <li>have a module as parent</li> <li>be listed in <code>__all__</code> if <code>__all__</code> is defined</li> <li>or not be private (having a name starting with an underscore)</li> </ul> <p>Special case for Griffe trees: a submodule is only exposed if its parent imports it.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Imports/exports </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind = MODULE\n</code></pre> <p>The object kind.</p>"},{"location":"reference/api/models/module/#griffe.Module.labels","title":"labels  <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = set()\n</code></pre> <p>The object labels (<code>property</code>, <code>dataclass</code>, etc.).</p> <p>See also: <code>has_labels</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0has_labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0has_labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0has_labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int | None = lineno\n</code></pre> <p>The starting line number of the object.</p> <p>See also: <code>endlineno</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Class <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Function <code></code>\u00a0endlineno </li> <li> <code></code>\u00a0Module <code></code>\u00a0endlineno </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0endlineno </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.lines","title":"lines  <code>property</code>","text":"<pre><code>lines: list[str]\n</code></pre> <p>The lines containing the source of this object.</p> <p>See also: <code>lines_collection</code>, <code>source</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines_collection </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.lines_collection","title":"lines_collection  <code>property</code>","text":"<pre><code>lines_collection: LinesCollection\n</code></pre> <p>The lines collection attached to this object or its parents.</p> <p>See also: <code>lines</code>, <code>source</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0source </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: dict[str, Object | Alias] = {}\n</code></pre> <p>The object members (modules, classes, functions, attributes).</p> <p>See also: <code>inherited_members</code>, <code>get_member</code>, <code>set_member</code>, <code>filter_members</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0inherited_members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.module","title":"module  <code>property</code>","text":"<pre><code>module: Module\n</code></pre> <p>The parent module of this object.</p> <p>See also: <code>package</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n&gt;&gt;&gt; # The `module` of a module is itself.\n&gt;&gt;&gt; markdown[\"core\"].module\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/core.py'))\n</code></pre> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the object is not a module and does not have a parent.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0package </li> <li> <code></code>\u00a0Class <code></code>\u00a0package </li> <li> <code></code>\u00a0Function <code></code>\u00a0package </li> <li> <code></code>\u00a0Module <code></code>\u00a0package </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0package </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.modules","title":"modules  <code>property</code>","text":"<pre><code>modules: dict[str, Module]\n</code></pre> <p>The module members.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members Inherited members </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.modules_collection","title":"modules_collection  <code>property</code>","text":"<pre><code>modules_collection: ModulesCollection\n</code></pre> <p>The modules collection attached to this object or its parents.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When no modules collection can be found in the object or its parents.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>The object name.</p>"},{"location":"reference/api/models/module/#griffe.Module.overloads","title":"overloads  <code>instance-attribute</code>","text":"<pre><code>overloads: dict[str, list[Function]] = defaultdict(list)\n</code></pre> <p>The overloaded signatures declared in this module.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Model-specific fields Modules </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.package","title":"package  <code>property</code>","text":"<pre><code>package: Module\n</code></pre> <p>The absolute top module (the package) of this object.</p> <p>See also: <code>module</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].package\nModule(PosixPath('~/project/.venv/lib/python3.11/site-packages/markdown/__init__.py'))\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0module </li> <li> <code></code>\u00a0Class <code></code>\u00a0module </li> <li> <code></code>\u00a0Function <code></code>\u00a0module </li> <li> <code></code>\u00a0Module <code></code>\u00a0module </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0module </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent: Module | Class | None = parent\n</code></pre> <p>The parent of the object (none if top module).</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving up: parents </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The dotted path of this object.</p> <p>On regular objects (not aliases), the path is the canonical path.</p> <p>See also: <code>canonical_path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import griffe\n&gt;&gt;&gt; markdown = griffe.load(\"markdown\")\n&gt;&gt;&gt; markdown[\"core.Markdown.references\"].path\n'markdown.core.Markdown.references'\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Class <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Function <code></code>\u00a0canonical_path </li> <li> <code></code>\u00a0Module <code></code>\u00a0canonical_path </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0canonical_path </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.public","title":"public  <code>instance-attribute</code>","text":"<pre><code>public: bool | None = None\n</code></pre> <p>Whether this object is public.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object visibility </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.relative_filepath","title":"relative_filepath  <code>property</code>","text":"<pre><code>relative_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the current working directory.</p> <p>If this object's file path is not relative to the current working directory, return its absolute path.</p> <p>See also: <code>filepath</code>, <code>relative_package_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_package_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_package_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.relative_package_filepath","title":"relative_package_filepath  <code>property</code>","text":"<pre><code>relative_package_filepath: Path\n</code></pre> <p>The file path where this object was defined, relative to the top module path.</p> <p>See also: <code>filepath</code>, <code>relative_filepath</code>.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When the relative path could not be computed.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> <li> <code></code>\u00a0Module <code></code>\u00a0relative_filepath </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0filepath </li> <li> <code></code>\u00a0relative_filepath </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.runtime","title":"runtime  <code>instance-attribute</code>","text":"<pre><code>runtime: bool = runtime\n</code></pre> <p>Whether this object is available at runtime.</p> <p>Typically, type-guarded objects (under an <code>if TYPE_CHECKING</code> condition) are not available at runtime.</p>"},{"location":"reference/api/models/module/#griffe.Module.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>The source code of this object.</p> <p>See also: <code>lines</code>, <code>lines_collection</code>.</p> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object location Source </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0lines </li> <li> <code></code>\u00a0lines_collection </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>An object is always true-ish.</p>"},{"location":"reference/api/models/module/#griffe.Module.__delitem__","title":"__delitem__","text":"<pre><code>__delitem__(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; del griffe_object[\"foo\"]\n&gt;&gt;&gt; del griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; del griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/module/#griffe.Module.__delitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Members will be looked up in both declared members and inherited ones, triggering computation of the latter.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; qux = griffe_object[(\"path\", \"to\", \"qux\")]\n</code></pre>"},{"location":"reference/api/models/module/#griffe.Module.__getitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>The number of members in this object, recursively.</p>"},{"location":"reference/api/models/module/#griffe.Module.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the consumer API: do not use when producing Griffe trees!</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object[\"foo\"] = foo\n&gt;&gt;&gt; griffe_object[\"path.to.bar\"] = bar\n&gt;&gt;&gt; griffe_object[(\"path\", \"to\", \"qux\")] = qux\n</code></pre>"},{"location":"reference/api/models/module/#griffe.Module.__setitem__(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.__setitem__(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"reference/api/models/module/#griffe.Module.as_dict","title":"as_dict","text":"<pre><code>as_dict(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>Return this module's data as a dictionary.</p> <p>See also: <code>as_json</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>A dictionary.</p> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.as_dict(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options.</p>"},{"location":"reference/api/models/module/#griffe.Module.as_json","title":"as_json","text":"<pre><code>as_json(*, full: bool = False, **kwargs: Any) -&gt; str\n</code></pre> <p>Return this object's data as a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A JSON string.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Class <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Function <code></code>\u00a0as_dict </li> <li> <code></code>\u00a0Module <code></code>\u00a0as_dict </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0as_dict </li> <li> Serializers Main API </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.as_json(full)","title":"<code>full</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to return full info, or just base info.</p>"},{"location":"reference/api/models/module/#griffe.Module.as_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional serialization options passed to encoder.</p>"},{"location":"reference/api/models/module/#griffe.Module.del_member","title":"del_member","text":"<pre><code>del_member(key: str | Sequence[str]) -&gt; None\n</code></pre> <p>Delete a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.del_member(\"foo\")\n&gt;&gt;&gt; griffe_object.del_member(\"path.to.bar\")\n&gt;&gt;&gt; griffe_object.del_member((\"path\", \"to\", \"qux\"))\n</code></pre>"},{"location":"reference/api/models/module/#griffe.Module.del_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.filter_members","title":"filter_members","text":"<pre><code>filter_members(\n    *predicates: Callable[[Object | Alias], bool],\n) -&gt; dict[str, Object | Alias]\n</code></pre> <p>Filter and return members based on predicates.</p> <p>See also: <code>members</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Object | Alias]</code>           \u2013            <p>A dictionary of members.</p> </li> </ul> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.filter_members(*predicates)","title":"<code>*predicates</code>","text":"(<code>Callable[[Object | Alias], bool]</code>, default:                   <code>()</code> )           \u2013            <p>A list of predicates, i.e. callables accepting a member as argument and returning a boolean.</p>"},{"location":"reference/api/models/module/#griffe.Module.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_string: str, **kwargs: Any) -&gt; _ObjType\n</code></pre> <p>Create an instance of this class from a JSON string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>_ObjType</code>           \u2013            <p>An Object instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>When the json_string does not represent and object of the class from which this classmethod has been called.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Serializing APIs Python API </li> <li> Reference <ul> <li> <code></code>\u00a0griffe Serializers </li> <li> Python API Serializers Main API </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.from_json(json_string)","title":"<code>json_string</code>","text":"(<code>str</code>)           \u2013            <p>JSON to decode into Object.</p>"},{"location":"reference/api/models/module/#griffe.Module.from_json(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional options passed to decoder.</p>"},{"location":"reference/api/models/module/#griffe.Module.get_member","title":"get_member","text":"<pre><code>get_member(key: str | Sequence[str]) -&gt; Any\n</code></pre> <p>Get a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Members will be looked up in declared members only, not inherited ones.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = griffe_object[\"foo\"]\n&gt;&gt;&gt; bar = griffe_object[\"path.to.bar\"]\n&gt;&gt;&gt; bar = griffe_object[(\"path\", \"to\", \"bar\")]\n</code></pre> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Moving down: members </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.get_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.has_labels","title":"has_labels","text":"<pre><code>has_labels(*labels: str) -&gt; bool\n</code></pre> <p>Tell if this object has all the given labels.</p> <p>See also: <code>labels</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Changelog 0.46.0 - 2024-06-16 <ul> <li> Breaking Changes </li> <li> Deprecations </li> </ul> </li> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <code></code>\u00a0labels </li> <li> <code></code>\u00a0Class <code></code>\u00a0labels </li> <li> <code></code>\u00a0Function <code></code>\u00a0labels </li> <li> <code></code>\u00a0Module <code></code>\u00a0labels </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0labels </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.has_labels(*labels)","title":"<code>*labels</code>","text":"(<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Labels that must be present.</p>"},{"location":"reference/api/models/module/#griffe.Module.is_kind","title":"is_kind","text":"<pre><code>is_kind(kind: str | Kind | set[str | Kind]) -&gt; bool\n</code></pre> <p>Tell if this object is of the given kind.</p> <p>See also: <code>is_module</code>, <code>is_class</code>, <code>is_function</code>, <code>is_attribute</code>, <code>is_alias</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>When an empty set is given as argument.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or False.</p> </li> </ul> Referenced by: <ul> <li> Guide User guide Manipulating APIs Navigating APIs Object kind </li> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Attribute <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Class <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Function <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> <li> <code></code>\u00a0Module <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> <li> Models <code></code>\u00a0Object <ul> <li> <code></code>\u00a0is_attribute </li> <li> <code></code>\u00a0is_class </li> <li> <code></code>\u00a0is_function </li> <li> <code></code>\u00a0is_module </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.is_kind(kind)","title":"<code>kind</code>","text":"(<code>str | Kind | set[str | Kind]</code>)           \u2013            <p>An instance or set of kinds (strings or enumerations).</p>"},{"location":"reference/api/models/module/#griffe.Module.resolve","title":"resolve","text":"<pre><code>resolve(name: str) -&gt; str\n</code></pre> <p>Resolve a name within this object's and parents' scope.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>NameResolutionError</code>             \u2013            <p>When the name could not be resolved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The resolved name.</p> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.resolve(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name to resolve.</p>"},{"location":"reference/api/models/module/#griffe.Module.set_member","title":"set_member","text":"<pre><code>set_member(\n    key: str | Sequence[str], value: Object | Alias\n) -&gt; None\n</code></pre> <p>Set a member with its name or path.</p> <p>This method is part of the producer API: you can use it safely while building Griffe trees (for example in Griffe extensions).</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; griffe_object.set_member(\"foo\", foo)\n&gt;&gt;&gt; griffe_object.set_member(\"path.to.bar\", bar)\n&gt;&gt;&gt; griffe_object.set_member((\"path\", \"to\", \"qux\"), qux)\n</code></pre> Referenced by: <ul> <li> Reference Python API <ul> <li> Models <ul> <li> <code></code>\u00a0Alias <ul> <li> <code></code>\u00a0members </li> <li> <code></code>\u00a0filter_members </li> </ul> </li> <li> <code></code>\u00a0Attribute <code></code>\u00a0members </li> <li> <code></code>\u00a0Class <code></code>\u00a0members </li> <li> <code></code>\u00a0Function <code></code>\u00a0members </li> <li> <code></code>\u00a0Module <code></code>\u00a0members </li> </ul> </li> <li> Models <code></code>\u00a0Object <code></code>\u00a0members </li> </ul> </li> </ul>"},{"location":"reference/api/models/module/#griffe.Module.set_member(key)","title":"<code>key</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>The name or path of the member.</p>"},{"location":"reference/api/models/module/#griffe.Module.set_member(value)","title":"<code>value</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The member.</p>"},{"location":"guide/contributors/coverage/","title":"Coverage report","text":""}]}